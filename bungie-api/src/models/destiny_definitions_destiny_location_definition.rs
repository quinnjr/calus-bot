/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyLocationDefinition : A \"Location\" is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.  Most of this data isn't intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyLocationDefinition {
  /// If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition.
  #[serde(rename = "vendorHash")]
  vendor_hash: Option<i32>,
  /// A Location may refer to different specific spots in the world based on the world's current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one.
  #[serde(rename = "locationReleases")]
  location_releases: Option<Vec<::models::DestinyDefinitionsDestinyLocationReleaseDefinition>>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyLocationDefinition {
  /// A \"Location\" is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.  Most of this data isn't intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective.
  pub fn new() -> DestinyDefinitionsDestinyLocationDefinition {
    DestinyDefinitionsDestinyLocationDefinition {
      vendor_hash: None,
      location_releases: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_vendor_hash(&mut self, vendor_hash: i32) {
    self.vendor_hash = Some(vendor_hash);
  }

  pub fn with_vendor_hash(mut self, vendor_hash: i32) -> DestinyDefinitionsDestinyLocationDefinition {
    self.vendor_hash = Some(vendor_hash);
    self
  }

  pub fn vendor_hash(&self) -> Option<&i32> {
    self.vendor_hash.as_ref()
  }

  pub fn reset_vendor_hash(&mut self) {
    self.vendor_hash = None;
  }

  pub fn set_location_releases(&mut self, location_releases: Vec<::models::DestinyDefinitionsDestinyLocationReleaseDefinition>) {
    self.location_releases = Some(location_releases);
  }

  pub fn with_location_releases(mut self, location_releases: Vec<::models::DestinyDefinitionsDestinyLocationReleaseDefinition>) -> DestinyDefinitionsDestinyLocationDefinition {
    self.location_releases = Some(location_releases);
    self
  }

  pub fn location_releases(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyLocationReleaseDefinition>> {
    self.location_releases.as_ref()
  }

  pub fn reset_location_releases(&mut self) {
    self.location_releases = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyLocationDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyLocationDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyLocationDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



