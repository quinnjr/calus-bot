/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyComponentsRecordsDestinyCharacterRecordsComponent {
  #[serde(rename = "featuredRecordHashes")]
  featured_record_hashes: Option<Vec<i32>>,
  #[serde(rename = "records")]
  records: Option<::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>>
}

impl DestinyComponentsRecordsDestinyCharacterRecordsComponent {
  pub fn new() -> DestinyComponentsRecordsDestinyCharacterRecordsComponent {
    DestinyComponentsRecordsDestinyCharacterRecordsComponent {
      featured_record_hashes: None,
      records: None
    }
  }

  pub fn set_featured_record_hashes(&mut self, featured_record_hashes: Vec<i32>) {
    self.featured_record_hashes = Some(featured_record_hashes);
  }

  pub fn with_featured_record_hashes(mut self, featured_record_hashes: Vec<i32>) -> DestinyComponentsRecordsDestinyCharacterRecordsComponent {
    self.featured_record_hashes = Some(featured_record_hashes);
    self
  }

  pub fn featured_record_hashes(&self) -> Option<&Vec<i32>> {
    self.featured_record_hashes.as_ref()
  }

  pub fn reset_featured_record_hashes(&mut self) {
    self.featured_record_hashes = None;
  }

  pub fn set_records(&mut self, records: ::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>) {
    self.records = Some(records);
  }

  pub fn with_records(mut self, records: ::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>) -> DestinyComponentsRecordsDestinyCharacterRecordsComponent {
    self.records = Some(records);
    self
  }

  pub fn records(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>> {
    self.records.as_ref()
  }

  pub fn reset_records(&mut self) {
    self.records = None;
  }

}



