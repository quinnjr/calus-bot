/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition : Any data we need to figure out whether this Quest Item is the currently active one for the conceptual Milestone. Even just typing this description, I already regret it.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
  /// The item representing this Milestone quest. Use this hash to look up the DestinyInventoryItemDefinition for the quest to find its steps and human readable data.
  #[serde(rename = "questItemHash")]
  quest_item_hash: Option<i32>,
  /// The individual quests may have different definitions from the overall milestone: if there's a specific active quest, use these displayProperties instead of that of the overall DestinyMilestoneDefinition.
  #[serde(rename = "displayProperties")]
  display_properties: Option<Value>,
  /// If populated, this image can be shown instead of the generic milestone's image when this quest is live, or it can be used to show a background image for the quest itself that differs from that of the Activity or the Milestone.
  #[serde(rename = "overrideImage")]
  override_image: Option<String>,
  /// The rewards you will get for completing this quest, as best as we could extract them from our data. Sometimes, it'll be a decent amount of data. Sometimes, it's going to be sucky. Sorry.
  #[serde(rename = "questRewards")]
  quest_rewards: Option<Value>,
  /// The full set of all possible \"conceptual activities\" that are related to this Milestone. Tiers or alternative modes of play within these conceptual activities will be defined as sub-entities. Keyed by the Conceptual Activity Hash. Use the key to look up DestinyActivityDefinition.
  #[serde(rename = "activities")]
  activities: Option<::std::collections::HashMap<String, ::models::DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition>>,
  /// Sometimes, a Milestone's quest is related to an entire Destination rather than a specific activity. In that situation, this will be the hash of that Destination. Hotspots are currently the only Milestones that expose this data, but that does not preclude this data from being returned for other Milestones in the future.
  #[serde(rename = "destinationHash")]
  destination_hash: Option<i32>
}

impl DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
  /// Any data we need to figure out whether this Quest Item is the currently active one for the conceptual Milestone. Even just typing this description, I already regret it.
  pub fn new() -> DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
    DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
      quest_item_hash: None,
      display_properties: None,
      override_image: None,
      quest_rewards: None,
      activities: None,
      destination_hash: None
    }
  }

  pub fn set_quest_item_hash(&mut self, quest_item_hash: i32) {
    self.quest_item_hash = Some(quest_item_hash);
  }

  pub fn with_quest_item_hash(mut self, quest_item_hash: i32) -> DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
    self.quest_item_hash = Some(quest_item_hash);
    self
  }

  pub fn quest_item_hash(&self) -> Option<&i32> {
    self.quest_item_hash.as_ref()
  }

  pub fn reset_quest_item_hash(&mut self) {
    self.quest_item_hash = None;
  }

  pub fn set_display_properties(&mut self, display_properties: Value) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: Value) -> DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&Value> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_override_image(&mut self, override_image: String) {
    self.override_image = Some(override_image);
  }

  pub fn with_override_image(mut self, override_image: String) -> DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
    self.override_image = Some(override_image);
    self
  }

  pub fn override_image(&self) -> Option<&String> {
    self.override_image.as_ref()
  }

  pub fn reset_override_image(&mut self) {
    self.override_image = None;
  }

  pub fn set_quest_rewards(&mut self, quest_rewards: Value) {
    self.quest_rewards = Some(quest_rewards);
  }

  pub fn with_quest_rewards(mut self, quest_rewards: Value) -> DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
    self.quest_rewards = Some(quest_rewards);
    self
  }

  pub fn quest_rewards(&self) -> Option<&Value> {
    self.quest_rewards.as_ref()
  }

  pub fn reset_quest_rewards(&mut self) {
    self.quest_rewards = None;
  }

  pub fn set_activities(&mut self, activities: ::std::collections::HashMap<String, ::models::DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition>) {
    self.activities = Some(activities);
  }

  pub fn with_activities(mut self, activities: ::std::collections::HashMap<String, ::models::DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition>) -> DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
    self.activities = Some(activities);
    self
  }

  pub fn activities(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition>> {
    self.activities.as_ref()
  }

  pub fn reset_activities(&mut self) {
    self.activities = None;
  }

  pub fn set_destination_hash(&mut self, destination_hash: i32) {
    self.destination_hash = Some(destination_hash);
  }

  pub fn with_destination_hash(mut self, destination_hash: i32) -> DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
    self.destination_hash = Some(destination_hash);
    self
  }

  pub fn destination_hash(&self) -> Option<&i32> {
    self.destination_hash.as_ref()
  }

  pub fn reset_destination_hash(&mut self) {
    self.destination_hash = None;
  }

}



