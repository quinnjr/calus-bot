/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyFactionDefinition : These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyFactionDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// The hash identifier for the DestinyProgressionDefinition that indicates the character's relationship with this faction in terms of experience and levels.
  #[serde(rename = "progressionHash")]
  progression_hash: Option<i32>,
  /// The faction token item hashes, and their respective progression values.
  #[serde(rename = "tokenValues")]
  token_values: Option<::std::collections::HashMap<String, i32>>,
  /// The faction reward item hash, usually an engram.
  #[serde(rename = "rewardItemHash")]
  reward_item_hash: Option<i32>,
  /// The faction reward vendor hash, used for faction engram previews.
  #[serde(rename = "rewardVendorHash")]
  reward_vendor_hash: Option<i32>,
  /// List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.
  #[serde(rename = "vendors")]
  vendors: Option<Vec<::models::DestinyDefinitionsDestinyFactionVendorDefinition>>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyFactionDefinition {
  /// These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
  pub fn new() -> DestinyDefinitionsDestinyFactionDefinition {
    DestinyDefinitionsDestinyFactionDefinition {
      display_properties: None,
      progression_hash: None,
      token_values: None,
      reward_item_hash: None,
      reward_vendor_hash: None,
      vendors: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsDestinyFactionDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_progression_hash(&mut self, progression_hash: i32) {
    self.progression_hash = Some(progression_hash);
  }

  pub fn with_progression_hash(mut self, progression_hash: i32) -> DestinyDefinitionsDestinyFactionDefinition {
    self.progression_hash = Some(progression_hash);
    self
  }

  pub fn progression_hash(&self) -> Option<&i32> {
    self.progression_hash.as_ref()
  }

  pub fn reset_progression_hash(&mut self) {
    self.progression_hash = None;
  }

  pub fn set_token_values(&mut self, token_values: ::std::collections::HashMap<String, i32>) {
    self.token_values = Some(token_values);
  }

  pub fn with_token_values(mut self, token_values: ::std::collections::HashMap<String, i32>) -> DestinyDefinitionsDestinyFactionDefinition {
    self.token_values = Some(token_values);
    self
  }

  pub fn token_values(&self) -> Option<&::std::collections::HashMap<String, i32>> {
    self.token_values.as_ref()
  }

  pub fn reset_token_values(&mut self) {
    self.token_values = None;
  }

  pub fn set_reward_item_hash(&mut self, reward_item_hash: i32) {
    self.reward_item_hash = Some(reward_item_hash);
  }

  pub fn with_reward_item_hash(mut self, reward_item_hash: i32) -> DestinyDefinitionsDestinyFactionDefinition {
    self.reward_item_hash = Some(reward_item_hash);
    self
  }

  pub fn reward_item_hash(&self) -> Option<&i32> {
    self.reward_item_hash.as_ref()
  }

  pub fn reset_reward_item_hash(&mut self) {
    self.reward_item_hash = None;
  }

  pub fn set_reward_vendor_hash(&mut self, reward_vendor_hash: i32) {
    self.reward_vendor_hash = Some(reward_vendor_hash);
  }

  pub fn with_reward_vendor_hash(mut self, reward_vendor_hash: i32) -> DestinyDefinitionsDestinyFactionDefinition {
    self.reward_vendor_hash = Some(reward_vendor_hash);
    self
  }

  pub fn reward_vendor_hash(&self) -> Option<&i32> {
    self.reward_vendor_hash.as_ref()
  }

  pub fn reset_reward_vendor_hash(&mut self) {
    self.reward_vendor_hash = None;
  }

  pub fn set_vendors(&mut self, vendors: Vec<::models::DestinyDefinitionsDestinyFactionVendorDefinition>) {
    self.vendors = Some(vendors);
  }

  pub fn with_vendors(mut self, vendors: Vec<::models::DestinyDefinitionsDestinyFactionVendorDefinition>) -> DestinyDefinitionsDestinyFactionDefinition {
    self.vendors = Some(vendors);
    self
  }

  pub fn vendors(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyFactionVendorDefinition>> {
    self.vendors.as_ref()
  }

  pub fn reset_vendors(&mut self) {
    self.vendors = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyFactionDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyFactionDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyFactionDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



