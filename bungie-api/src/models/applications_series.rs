/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationsSeries {
  /// Collection of samples with time and value.
  #[serde(rename = "datapoints")]
  datapoints: Option<Vec<::models::ApplicationsDatapoint>>,
  /// Target to which to datapoints apply.
  #[serde(rename = "target")]
  target: Option<String>
}

impl ApplicationsSeries {
  pub fn new() -> ApplicationsSeries {
    ApplicationsSeries {
      datapoints: None,
      target: None
    }
  }

  pub fn set_datapoints(&mut self, datapoints: Vec<::models::ApplicationsDatapoint>) {
    self.datapoints = Some(datapoints);
  }

  pub fn with_datapoints(mut self, datapoints: Vec<::models::ApplicationsDatapoint>) -> ApplicationsSeries {
    self.datapoints = Some(datapoints);
    self
  }

  pub fn datapoints(&self) -> Option<&Vec<::models::ApplicationsDatapoint>> {
    self.datapoints.as_ref()
  }

  pub fn reset_datapoints(&mut self) {
    self.datapoints = None;
  }

  pub fn set_target(&mut self, target: String) {
    self.target = Some(target);
  }

  pub fn with_target(mut self, target: String) -> ApplicationsSeries {
    self.target = Some(target);
    self
  }

  pub fn target(&self) -> Option<&String> {
    self.target.as_ref()
  }

  pub fn reset_target(&mut self) {
    self.target = None;
  }

}



