/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyLeaderboard {
  #[serde(rename = "statId")]
  stat_id: Option<String>,
  #[serde(rename = "entries")]
  entries: Option<Vec<::models::DestinyHistoricalStatsDestinyLeaderboardEntry>>
}

impl DestinyHistoricalStatsDestinyLeaderboard {
  pub fn new() -> DestinyHistoricalStatsDestinyLeaderboard {
    DestinyHistoricalStatsDestinyLeaderboard {
      stat_id: None,
      entries: None
    }
  }

  pub fn set_stat_id(&mut self, stat_id: String) {
    self.stat_id = Some(stat_id);
  }

  pub fn with_stat_id(mut self, stat_id: String) -> DestinyHistoricalStatsDestinyLeaderboard {
    self.stat_id = Some(stat_id);
    self
  }

  pub fn stat_id(&self) -> Option<&String> {
    self.stat_id.as_ref()
  }

  pub fn reset_stat_id(&mut self) {
    self.stat_id = None;
  }

  pub fn set_entries(&mut self, entries: Vec<::models::DestinyHistoricalStatsDestinyLeaderboardEntry>) {
    self.entries = Some(entries);
  }

  pub fn with_entries(mut self, entries: Vec<::models::DestinyHistoricalStatsDestinyLeaderboardEntry>) -> DestinyHistoricalStatsDestinyLeaderboard {
    self.entries = Some(entries);
    self
  }

  pub fn entries(&self) -> Option<&Vec<::models::DestinyHistoricalStatsDestinyLeaderboardEntry>> {
    self.entries.as_ref()
  }

  pub fn reset_entries(&mut self) {
    self.entries = None;
  }

}



