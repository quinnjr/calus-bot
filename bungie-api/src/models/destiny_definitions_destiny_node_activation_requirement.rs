/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyNodeActivationRequirement : Talent nodes have requirements that must be met before they can be activated.  This describes the material costs, the Level of the Talent Grid's progression required, and other conditional information that limits whether a talent node can be activated.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyNodeActivationRequirement {
  /// The Progression level on the Talent Grid required to activate this node.  See DestinyTalentGridDefinition.progressionHash for the related Progression, and read DestinyProgressionDefinition's documentation to learn more about Progressions.
  #[serde(rename = "gridLevel")]
  grid_level: Option<i32>,
  /// The list of hash identifiers for material requirement sets: materials that are required for the node to be activated. See DestinyMaterialRequirementSetDefinition for more information about material requirements.  In this case, only a single DestinyMaterialRequirementSetDefinition will be chosen from this list, and we won't know which one will be chosen until an instance of the item is created.
  #[serde(rename = "materialRequirementHashes")]
  material_requirement_hashes: Option<Vec<i32>>
}

impl DestinyDefinitionsDestinyNodeActivationRequirement {
  /// Talent nodes have requirements that must be met before they can be activated.  This describes the material costs, the Level of the Talent Grid's progression required, and other conditional information that limits whether a talent node can be activated.
  pub fn new() -> DestinyDefinitionsDestinyNodeActivationRequirement {
    DestinyDefinitionsDestinyNodeActivationRequirement {
      grid_level: None,
      material_requirement_hashes: None
    }
  }

  pub fn set_grid_level(&mut self, grid_level: i32) {
    self.grid_level = Some(grid_level);
  }

  pub fn with_grid_level(mut self, grid_level: i32) -> DestinyDefinitionsDestinyNodeActivationRequirement {
    self.grid_level = Some(grid_level);
    self
  }

  pub fn grid_level(&self) -> Option<&i32> {
    self.grid_level.as_ref()
  }

  pub fn reset_grid_level(&mut self) {
    self.grid_level = None;
  }

  pub fn set_material_requirement_hashes(&mut self, material_requirement_hashes: Vec<i32>) {
    self.material_requirement_hashes = Some(material_requirement_hashes);
  }

  pub fn with_material_requirement_hashes(mut self, material_requirement_hashes: Vec<i32>) -> DestinyDefinitionsDestinyNodeActivationRequirement {
    self.material_requirement_hashes = Some(material_requirement_hashes);
    self
  }

  pub fn material_requirement_hashes(&self) -> Option<&Vec<i32>> {
    self.material_requirement_hashes.as_ref()
  }

  pub fn reset_material_requirement_hashes(&mut self) {
    self.material_requirement_hashes = None;
  }

}



