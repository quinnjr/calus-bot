/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsArtifactsDestinyArtifactDefinition : Represents known info about a Destiny Artifact.  We cannot guarantee that artifact definitions will be immutable between seasons - in fact, we've been told that they will be replaced between seasons. But this definition is built both to minimize the amount of lookups for related data that have to occur, and is built in hope that, if this plan changes, we will be able to accommodate it more easily.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsArtifactsDestinyArtifactDefinition {
  /// Any basic display info we know about the Artifact. Currently sourced from a related inventory item, but the source of this data is subject to change.
  #[serde(rename = "displayProperties")]
  display_properties: Option<Value>,
  /// Any Geometry/3D info we know about the Artifact. Currently sourced from a related inventory item's gearset information, but the source of this data is subject to change.
  #[serde(rename = "translationBlock")]
  translation_block: Option<Value>,
  /// Any Tier/Rank data related to this artifact, listed in display order.  Currently sourced from a Vendor, but this source is subject to change.
  #[serde(rename = "tiers")]
  tiers: Option<Vec<::models::DestinyDefinitionsArtifactsDestinyArtifactTierDefinition>>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsArtifactsDestinyArtifactDefinition {
  /// Represents known info about a Destiny Artifact.  We cannot guarantee that artifact definitions will be immutable between seasons - in fact, we've been told that they will be replaced between seasons. But this definition is built both to minimize the amount of lookups for related data that have to occur, and is built in hope that, if this plan changes, we will be able to accommodate it more easily.
  pub fn new() -> DestinyDefinitionsArtifactsDestinyArtifactDefinition {
    DestinyDefinitionsArtifactsDestinyArtifactDefinition {
      display_properties: None,
      translation_block: None,
      tiers: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: Value) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: Value) -> DestinyDefinitionsArtifactsDestinyArtifactDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&Value> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_translation_block(&mut self, translation_block: Value) {
    self.translation_block = Some(translation_block);
  }

  pub fn with_translation_block(mut self, translation_block: Value) -> DestinyDefinitionsArtifactsDestinyArtifactDefinition {
    self.translation_block = Some(translation_block);
    self
  }

  pub fn translation_block(&self) -> Option<&Value> {
    self.translation_block.as_ref()
  }

  pub fn reset_translation_block(&mut self) {
    self.translation_block = None;
  }

  pub fn set_tiers(&mut self, tiers: Vec<::models::DestinyDefinitionsArtifactsDestinyArtifactTierDefinition>) {
    self.tiers = Some(tiers);
  }

  pub fn with_tiers(mut self, tiers: Vec<::models::DestinyDefinitionsArtifactsDestinyArtifactTierDefinition>) -> DestinyDefinitionsArtifactsDestinyArtifactDefinition {
    self.tiers = Some(tiers);
    self
  }

  pub fn tiers(&self) -> Option<&Vec<::models::DestinyDefinitionsArtifactsDestinyArtifactTierDefinition>> {
    self.tiers.as_ref()
  }

  pub fn reset_tiers(&mut self) {
    self.tiers = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsArtifactsDestinyArtifactDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsArtifactsDestinyArtifactDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsArtifactsDestinyArtifactDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



