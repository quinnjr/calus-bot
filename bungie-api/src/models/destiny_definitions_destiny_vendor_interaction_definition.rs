/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyVendorInteractionDefinition : A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorInteractionDefinition {
  /// The position of this interaction in its parent array. Note that this is NOT content agnostic, and should not be used as such.
  #[serde(rename = "interactionIndex")]
  interaction_index: Option<i32>,
  /// The potential replies that the user can make to the interaction.
  #[serde(rename = "replies")]
  replies: Option<Vec<::models::DestinyDefinitionsDestinyVendorInteractionReplyDefinition>>,
  /// If >= 0, this is the category of sale items to show along with this interaction dialog.
  #[serde(rename = "vendorCategoryIndex")]
  vendor_category_index: Option<i32>,
  /// If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character's status with the quest if you use it to find the character's current Quest Step by checking their inventory against this questlineItemHash's DestinyInventoryItemDefinition.setData.
  #[serde(rename = "questlineItemHash")]
  questline_item_hash: Option<i32>,
  /// If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.
  #[serde(rename = "sackInteractionList")]
  sack_interaction_list: Option<Vec<::models::DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition>>,
  /// A UI hint for the behavior of the interaction screen. This is useful to determine what type of interaction is occurring, such as a prompt to receive a rank up reward or a prompt to choose a reward for completing a quest. The hash isn't as useful as the Enum in retrospect, well what can you do. Try using interactionType instead.
  #[serde(rename = "uiInteractionType")]
  ui_interaction_type: Option<i32>,
  /// The enumerated version of the possible UI hints for vendor interactions, which is a little easier to grok than the hash found in uiInteractionType.
  #[serde(rename = "interactionType")]
  interaction_type: Option<i32>,
  /// If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
  #[serde(rename = "rewardBlockLabel")]
  reward_block_label: Option<String>,
  /// If the vendor's reward list is sourced from one of his categories, this is the index into the category array of items to show.
  #[serde(rename = "rewardVendorCategoryIndex")]
  reward_vendor_category_index: Option<i32>,
  /// If the vendor interaction has flavor text, this is some of it.
  #[serde(rename = "flavorLineOne")]
  flavor_line_one: Option<String>,
  /// If the vendor interaction has flavor text, this is the rest of it.
  #[serde(rename = "flavorLineTwo")]
  flavor_line_two: Option<String>,
  /// The header for the interaction dialog.
  #[serde(rename = "headerDisplayProperties")]
  header_display_properties: Option<Value>,
  /// The localized text telling the player what to do when they see this dialog.
  #[serde(rename = "instructions")]
  instructions: Option<String>
}

impl DestinyDefinitionsDestinyVendorInteractionDefinition {
  /// A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
  pub fn new() -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    DestinyDefinitionsDestinyVendorInteractionDefinition {
      interaction_index: None,
      replies: None,
      vendor_category_index: None,
      questline_item_hash: None,
      sack_interaction_list: None,
      ui_interaction_type: None,
      interaction_type: None,
      reward_block_label: None,
      reward_vendor_category_index: None,
      flavor_line_one: None,
      flavor_line_two: None,
      header_display_properties: None,
      instructions: None
    }
  }

  pub fn set_interaction_index(&mut self, interaction_index: i32) {
    self.interaction_index = Some(interaction_index);
  }

  pub fn with_interaction_index(mut self, interaction_index: i32) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.interaction_index = Some(interaction_index);
    self
  }

  pub fn interaction_index(&self) -> Option<&i32> {
    self.interaction_index.as_ref()
  }

  pub fn reset_interaction_index(&mut self) {
    self.interaction_index = None;
  }

  pub fn set_replies(&mut self, replies: Vec<::models::DestinyDefinitionsDestinyVendorInteractionReplyDefinition>) {
    self.replies = Some(replies);
  }

  pub fn with_replies(mut self, replies: Vec<::models::DestinyDefinitionsDestinyVendorInteractionReplyDefinition>) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.replies = Some(replies);
    self
  }

  pub fn replies(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyVendorInteractionReplyDefinition>> {
    self.replies.as_ref()
  }

  pub fn reset_replies(&mut self) {
    self.replies = None;
  }

  pub fn set_vendor_category_index(&mut self, vendor_category_index: i32) {
    self.vendor_category_index = Some(vendor_category_index);
  }

  pub fn with_vendor_category_index(mut self, vendor_category_index: i32) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.vendor_category_index = Some(vendor_category_index);
    self
  }

  pub fn vendor_category_index(&self) -> Option<&i32> {
    self.vendor_category_index.as_ref()
  }

  pub fn reset_vendor_category_index(&mut self) {
    self.vendor_category_index = None;
  }

  pub fn set_questline_item_hash(&mut self, questline_item_hash: i32) {
    self.questline_item_hash = Some(questline_item_hash);
  }

  pub fn with_questline_item_hash(mut self, questline_item_hash: i32) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.questline_item_hash = Some(questline_item_hash);
    self
  }

  pub fn questline_item_hash(&self) -> Option<&i32> {
    self.questline_item_hash.as_ref()
  }

  pub fn reset_questline_item_hash(&mut self) {
    self.questline_item_hash = None;
  }

  pub fn set_sack_interaction_list(&mut self, sack_interaction_list: Vec<::models::DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition>) {
    self.sack_interaction_list = Some(sack_interaction_list);
  }

  pub fn with_sack_interaction_list(mut self, sack_interaction_list: Vec<::models::DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition>) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.sack_interaction_list = Some(sack_interaction_list);
    self
  }

  pub fn sack_interaction_list(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition>> {
    self.sack_interaction_list.as_ref()
  }

  pub fn reset_sack_interaction_list(&mut self) {
    self.sack_interaction_list = None;
  }

  pub fn set_ui_interaction_type(&mut self, ui_interaction_type: i32) {
    self.ui_interaction_type = Some(ui_interaction_type);
  }

  pub fn with_ui_interaction_type(mut self, ui_interaction_type: i32) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.ui_interaction_type = Some(ui_interaction_type);
    self
  }

  pub fn ui_interaction_type(&self) -> Option<&i32> {
    self.ui_interaction_type.as_ref()
  }

  pub fn reset_ui_interaction_type(&mut self) {
    self.ui_interaction_type = None;
  }

  pub fn set_interaction_type(&mut self, interaction_type: i32) {
    self.interaction_type = Some(interaction_type);
  }

  pub fn with_interaction_type(mut self, interaction_type: i32) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.interaction_type = Some(interaction_type);
    self
  }

  pub fn interaction_type(&self) -> Option<&i32> {
    self.interaction_type.as_ref()
  }

  pub fn reset_interaction_type(&mut self) {
    self.interaction_type = None;
  }

  pub fn set_reward_block_label(&mut self, reward_block_label: String) {
    self.reward_block_label = Some(reward_block_label);
  }

  pub fn with_reward_block_label(mut self, reward_block_label: String) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.reward_block_label = Some(reward_block_label);
    self
  }

  pub fn reward_block_label(&self) -> Option<&String> {
    self.reward_block_label.as_ref()
  }

  pub fn reset_reward_block_label(&mut self) {
    self.reward_block_label = None;
  }

  pub fn set_reward_vendor_category_index(&mut self, reward_vendor_category_index: i32) {
    self.reward_vendor_category_index = Some(reward_vendor_category_index);
  }

  pub fn with_reward_vendor_category_index(mut self, reward_vendor_category_index: i32) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.reward_vendor_category_index = Some(reward_vendor_category_index);
    self
  }

  pub fn reward_vendor_category_index(&self) -> Option<&i32> {
    self.reward_vendor_category_index.as_ref()
  }

  pub fn reset_reward_vendor_category_index(&mut self) {
    self.reward_vendor_category_index = None;
  }

  pub fn set_flavor_line_one(&mut self, flavor_line_one: String) {
    self.flavor_line_one = Some(flavor_line_one);
  }

  pub fn with_flavor_line_one(mut self, flavor_line_one: String) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.flavor_line_one = Some(flavor_line_one);
    self
  }

  pub fn flavor_line_one(&self) -> Option<&String> {
    self.flavor_line_one.as_ref()
  }

  pub fn reset_flavor_line_one(&mut self) {
    self.flavor_line_one = None;
  }

  pub fn set_flavor_line_two(&mut self, flavor_line_two: String) {
    self.flavor_line_two = Some(flavor_line_two);
  }

  pub fn with_flavor_line_two(mut self, flavor_line_two: String) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.flavor_line_two = Some(flavor_line_two);
    self
  }

  pub fn flavor_line_two(&self) -> Option<&String> {
    self.flavor_line_two.as_ref()
  }

  pub fn reset_flavor_line_two(&mut self) {
    self.flavor_line_two = None;
  }

  pub fn set_header_display_properties(&mut self, header_display_properties: Value) {
    self.header_display_properties = Some(header_display_properties);
  }

  pub fn with_header_display_properties(mut self, header_display_properties: Value) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.header_display_properties = Some(header_display_properties);
    self
  }

  pub fn header_display_properties(&self) -> Option<&Value> {
    self.header_display_properties.as_ref()
  }

  pub fn reset_header_display_properties(&mut self) {
    self.header_display_properties = None;
  }

  pub fn set_instructions(&mut self, instructions: String) {
    self.instructions = Some(instructions);
  }

  pub fn with_instructions(mut self, instructions: String) -> DestinyDefinitionsDestinyVendorInteractionDefinition {
    self.instructions = Some(instructions);
    self
  }

  pub fn instructions(&self) -> Option<&String> {
    self.instructions.as_ref()
  }

  pub fn reset_instructions(&mut self) {
    self.instructions = None;
  }

}



