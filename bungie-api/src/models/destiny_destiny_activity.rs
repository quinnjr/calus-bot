/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDestinyActivity : Represents the \"Live\" data that we can obtain about a Character's status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information.   Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDestinyActivity {
  /// The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity.
  #[serde(rename = "activityHash")]
  activity_hash: Option<i32>,
  /// If true, then the activity should have a \"new\" indicator in the Director UI.
  #[serde(rename = "isNew")]
  is_new: Option<bool>,
  /// If true, the user is allowed to lead a Fireteam into this activity.
  #[serde(rename = "canLead")]
  can_lead: Option<bool>,
  /// If true, the user is allowed to join with another Fireteam in this activity.
  #[serde(rename = "canJoin")]
  can_join: Option<bool>,
  /// If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check.
  #[serde(rename = "isCompleted")]
  is_completed: Option<bool>,
  /// If true, the user should be able to see this activity.
  #[serde(rename = "isVisible")]
  is_visible: Option<bool>,
  /// The difficulty level of the activity, if applicable.
  #[serde(rename = "displayLevel")]
  display_level: Option<i32>,
  /// The recommended light level for the activity, if applicable.
  #[serde(rename = "recommendedLight")]
  recommended_light: Option<i32>,
  /// A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity.
  #[serde(rename = "difficultyTier")]
  difficulty_tier: Option<i32>,
  #[serde(rename = "challenges")]
  challenges: Option<Vec<::models::DestinyChallengesDestinyChallengeStatus>>,
  /// If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
  #[serde(rename = "modifierHashes")]
  modifier_hashes: Option<Vec<i32>>,
  /// The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.
  #[serde(rename = "booleanActivityOptions")]
  boolean_activity_options: Option<::std::collections::HashMap<String, bool>>,
  /// If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.
  #[serde(rename = "loadoutRequirementIndex")]
  loadout_requirement_index: Option<i32>
}

impl DestinyDestinyActivity {
  /// Represents the \"Live\" data that we can obtain about a Character's status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information.   Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity.
  pub fn new() -> DestinyDestinyActivity {
    DestinyDestinyActivity {
      activity_hash: None,
      is_new: None,
      can_lead: None,
      can_join: None,
      is_completed: None,
      is_visible: None,
      display_level: None,
      recommended_light: None,
      difficulty_tier: None,
      challenges: None,
      modifier_hashes: None,
      boolean_activity_options: None,
      loadout_requirement_index: None
    }
  }

  pub fn set_activity_hash(&mut self, activity_hash: i32) {
    self.activity_hash = Some(activity_hash);
  }

  pub fn with_activity_hash(mut self, activity_hash: i32) -> DestinyDestinyActivity {
    self.activity_hash = Some(activity_hash);
    self
  }

  pub fn activity_hash(&self) -> Option<&i32> {
    self.activity_hash.as_ref()
  }

  pub fn reset_activity_hash(&mut self) {
    self.activity_hash = None;
  }

  pub fn set_is_new(&mut self, is_new: bool) {
    self.is_new = Some(is_new);
  }

  pub fn with_is_new(mut self, is_new: bool) -> DestinyDestinyActivity {
    self.is_new = Some(is_new);
    self
  }

  pub fn is_new(&self) -> Option<&bool> {
    self.is_new.as_ref()
  }

  pub fn reset_is_new(&mut self) {
    self.is_new = None;
  }

  pub fn set_can_lead(&mut self, can_lead: bool) {
    self.can_lead = Some(can_lead);
  }

  pub fn with_can_lead(mut self, can_lead: bool) -> DestinyDestinyActivity {
    self.can_lead = Some(can_lead);
    self
  }

  pub fn can_lead(&self) -> Option<&bool> {
    self.can_lead.as_ref()
  }

  pub fn reset_can_lead(&mut self) {
    self.can_lead = None;
  }

  pub fn set_can_join(&mut self, can_join: bool) {
    self.can_join = Some(can_join);
  }

  pub fn with_can_join(mut self, can_join: bool) -> DestinyDestinyActivity {
    self.can_join = Some(can_join);
    self
  }

  pub fn can_join(&self) -> Option<&bool> {
    self.can_join.as_ref()
  }

  pub fn reset_can_join(&mut self) {
    self.can_join = None;
  }

  pub fn set_is_completed(&mut self, is_completed: bool) {
    self.is_completed = Some(is_completed);
  }

  pub fn with_is_completed(mut self, is_completed: bool) -> DestinyDestinyActivity {
    self.is_completed = Some(is_completed);
    self
  }

  pub fn is_completed(&self) -> Option<&bool> {
    self.is_completed.as_ref()
  }

  pub fn reset_is_completed(&mut self) {
    self.is_completed = None;
  }

  pub fn set_is_visible(&mut self, is_visible: bool) {
    self.is_visible = Some(is_visible);
  }

  pub fn with_is_visible(mut self, is_visible: bool) -> DestinyDestinyActivity {
    self.is_visible = Some(is_visible);
    self
  }

  pub fn is_visible(&self) -> Option<&bool> {
    self.is_visible.as_ref()
  }

  pub fn reset_is_visible(&mut self) {
    self.is_visible = None;
  }

  pub fn set_display_level(&mut self, display_level: i32) {
    self.display_level = Some(display_level);
  }

  pub fn with_display_level(mut self, display_level: i32) -> DestinyDestinyActivity {
    self.display_level = Some(display_level);
    self
  }

  pub fn display_level(&self) -> Option<&i32> {
    self.display_level.as_ref()
  }

  pub fn reset_display_level(&mut self) {
    self.display_level = None;
  }

  pub fn set_recommended_light(&mut self, recommended_light: i32) {
    self.recommended_light = Some(recommended_light);
  }

  pub fn with_recommended_light(mut self, recommended_light: i32) -> DestinyDestinyActivity {
    self.recommended_light = Some(recommended_light);
    self
  }

  pub fn recommended_light(&self) -> Option<&i32> {
    self.recommended_light.as_ref()
  }

  pub fn reset_recommended_light(&mut self) {
    self.recommended_light = None;
  }

  pub fn set_difficulty_tier(&mut self, difficulty_tier: i32) {
    self.difficulty_tier = Some(difficulty_tier);
  }

  pub fn with_difficulty_tier(mut self, difficulty_tier: i32) -> DestinyDestinyActivity {
    self.difficulty_tier = Some(difficulty_tier);
    self
  }

  pub fn difficulty_tier(&self) -> Option<&i32> {
    self.difficulty_tier.as_ref()
  }

  pub fn reset_difficulty_tier(&mut self) {
    self.difficulty_tier = None;
  }

  pub fn set_challenges(&mut self, challenges: Vec<::models::DestinyChallengesDestinyChallengeStatus>) {
    self.challenges = Some(challenges);
  }

  pub fn with_challenges(mut self, challenges: Vec<::models::DestinyChallengesDestinyChallengeStatus>) -> DestinyDestinyActivity {
    self.challenges = Some(challenges);
    self
  }

  pub fn challenges(&self) -> Option<&Vec<::models::DestinyChallengesDestinyChallengeStatus>> {
    self.challenges.as_ref()
  }

  pub fn reset_challenges(&mut self) {
    self.challenges = None;
  }

  pub fn set_modifier_hashes(&mut self, modifier_hashes: Vec<i32>) {
    self.modifier_hashes = Some(modifier_hashes);
  }

  pub fn with_modifier_hashes(mut self, modifier_hashes: Vec<i32>) -> DestinyDestinyActivity {
    self.modifier_hashes = Some(modifier_hashes);
    self
  }

  pub fn modifier_hashes(&self) -> Option<&Vec<i32>> {
    self.modifier_hashes.as_ref()
  }

  pub fn reset_modifier_hashes(&mut self) {
    self.modifier_hashes = None;
  }

  pub fn set_boolean_activity_options(&mut self, boolean_activity_options: ::std::collections::HashMap<String, bool>) {
    self.boolean_activity_options = Some(boolean_activity_options);
  }

  pub fn with_boolean_activity_options(mut self, boolean_activity_options: ::std::collections::HashMap<String, bool>) -> DestinyDestinyActivity {
    self.boolean_activity_options = Some(boolean_activity_options);
    self
  }

  pub fn boolean_activity_options(&self) -> Option<&::std::collections::HashMap<String, bool>> {
    self.boolean_activity_options.as_ref()
  }

  pub fn reset_boolean_activity_options(&mut self) {
    self.boolean_activity_options = None;
  }

  pub fn set_loadout_requirement_index(&mut self, loadout_requirement_index: i32) {
    self.loadout_requirement_index = Some(loadout_requirement_index);
  }

  pub fn with_loadout_requirement_index(mut self, loadout_requirement_index: i32) -> DestinyDestinyActivity {
    self.loadout_requirement_index = Some(loadout_requirement_index);
    self
  }

  pub fn loadout_requirement_index(&self) -> Option<&i32> {
    self.loadout_requirement_index.as_ref()
  }

  pub fn reset_loadout_requirement_index(&mut self) {
    self.loadout_requirement_index = None;
  }

}



