/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GlobalAlert {
  #[serde(rename = "AlertKey")]
  alert_key: Option<String>,
  #[serde(rename = "AlertHtml")]
  alert_html: Option<String>,
  #[serde(rename = "AlertTimestamp")]
  alert_timestamp: Option<String>,
  #[serde(rename = "AlertLink")]
  alert_link: Option<String>,
  #[serde(rename = "AlertLevel")]
  alert_level: Option<i32>,
  #[serde(rename = "AlertType")]
  alert_type: Option<i32>,
  #[serde(rename = "StreamInfo")]
  stream_info: Option<::models::StreamInfo>
}

impl GlobalAlert {
  pub fn new() -> GlobalAlert {
    GlobalAlert {
      alert_key: None,
      alert_html: None,
      alert_timestamp: None,
      alert_link: None,
      alert_level: None,
      alert_type: None,
      stream_info: None
    }
  }

  pub fn set_alert_key(&mut self, alert_key: String) {
    self.alert_key = Some(alert_key);
  }

  pub fn with_alert_key(mut self, alert_key: String) -> GlobalAlert {
    self.alert_key = Some(alert_key);
    self
  }

  pub fn alert_key(&self) -> Option<&String> {
    self.alert_key.as_ref()
  }

  pub fn reset_alert_key(&mut self) {
    self.alert_key = None;
  }

  pub fn set_alert_html(&mut self, alert_html: String) {
    self.alert_html = Some(alert_html);
  }

  pub fn with_alert_html(mut self, alert_html: String) -> GlobalAlert {
    self.alert_html = Some(alert_html);
    self
  }

  pub fn alert_html(&self) -> Option<&String> {
    self.alert_html.as_ref()
  }

  pub fn reset_alert_html(&mut self) {
    self.alert_html = None;
  }

  pub fn set_alert_timestamp(&mut self, alert_timestamp: String) {
    self.alert_timestamp = Some(alert_timestamp);
  }

  pub fn with_alert_timestamp(mut self, alert_timestamp: String) -> GlobalAlert {
    self.alert_timestamp = Some(alert_timestamp);
    self
  }

  pub fn alert_timestamp(&self) -> Option<&String> {
    self.alert_timestamp.as_ref()
  }

  pub fn reset_alert_timestamp(&mut self) {
    self.alert_timestamp = None;
  }

  pub fn set_alert_link(&mut self, alert_link: String) {
    self.alert_link = Some(alert_link);
  }

  pub fn with_alert_link(mut self, alert_link: String) -> GlobalAlert {
    self.alert_link = Some(alert_link);
    self
  }

  pub fn alert_link(&self) -> Option<&String> {
    self.alert_link.as_ref()
  }

  pub fn reset_alert_link(&mut self) {
    self.alert_link = None;
  }

  pub fn set_alert_level(&mut self, alert_level: i32) {
    self.alert_level = Some(alert_level);
  }

  pub fn with_alert_level(mut self, alert_level: i32) -> GlobalAlert {
    self.alert_level = Some(alert_level);
    self
  }

  pub fn alert_level(&self) -> Option<&i32> {
    self.alert_level.as_ref()
  }

  pub fn reset_alert_level(&mut self) {
    self.alert_level = None;
  }

  pub fn set_alert_type(&mut self, alert_type: i32) {
    self.alert_type = Some(alert_type);
  }

  pub fn with_alert_type(mut self, alert_type: i32) -> GlobalAlert {
    self.alert_type = Some(alert_type);
    self
  }

  pub fn alert_type(&self) -> Option<&i32> {
    self.alert_type.as_ref()
  }

  pub fn reset_alert_type(&mut self) {
    self.alert_type = None;
  }

  pub fn set_stream_info(&mut self, stream_info: ::models::StreamInfo) {
    self.stream_info = Some(stream_info);
  }

  pub fn with_stream_info(mut self, stream_info: ::models::StreamInfo) -> GlobalAlert {
    self.stream_info = Some(stream_info);
    self
  }

  pub fn stream_info(&self) -> Option<&::models::StreamInfo> {
    self.stream_info.as_ref()
  }

  pub fn reset_stream_info(&mut self) {
    self.stream_info = None;
  }

}



