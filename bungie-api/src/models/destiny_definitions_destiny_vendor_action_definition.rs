/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyVendorActionDefinition : If a vendor can ever end up performing actions, these are the properties that will be related to those actions. I'm not going to bother documenting this yet, as it is unused and unclear if it will ever be used... but in case it is ever populated and someone finds it useful, it is defined here.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorActionDefinition {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "executeSeconds")]
  execute_seconds: Option<i32>,
  #[serde(rename = "icon")]
  icon: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "verb")]
  verb: Option<String>,
  #[serde(rename = "isPositive")]
  is_positive: Option<bool>,
  #[serde(rename = "actionId")]
  action_id: Option<String>,
  #[serde(rename = "actionHash")]
  action_hash: Option<i32>,
  #[serde(rename = "autoPerformAction")]
  auto_perform_action: Option<bool>
}

impl DestinyDefinitionsDestinyVendorActionDefinition {
  /// If a vendor can ever end up performing actions, these are the properties that will be related to those actions. I'm not going to bother documenting this yet, as it is unused and unclear if it will ever be used... but in case it is ever populated and someone finds it useful, it is defined here.
  pub fn new() -> DestinyDefinitionsDestinyVendorActionDefinition {
    DestinyDefinitionsDestinyVendorActionDefinition {
      description: None,
      execute_seconds: None,
      icon: None,
      name: None,
      verb: None,
      is_positive: None,
      action_id: None,
      action_hash: None,
      auto_perform_action: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_execute_seconds(&mut self, execute_seconds: i32) {
    self.execute_seconds = Some(execute_seconds);
  }

  pub fn with_execute_seconds(mut self, execute_seconds: i32) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.execute_seconds = Some(execute_seconds);
    self
  }

  pub fn execute_seconds(&self) -> Option<&i32> {
    self.execute_seconds.as_ref()
  }

  pub fn reset_execute_seconds(&mut self) {
    self.execute_seconds = None;
  }

  pub fn set_icon(&mut self, icon: String) {
    self.icon = Some(icon);
  }

  pub fn with_icon(mut self, icon: String) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.icon = Some(icon);
    self
  }

  pub fn icon(&self) -> Option<&String> {
    self.icon.as_ref()
  }

  pub fn reset_icon(&mut self) {
    self.icon = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_verb(&mut self, verb: String) {
    self.verb = Some(verb);
  }

  pub fn with_verb(mut self, verb: String) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.verb = Some(verb);
    self
  }

  pub fn verb(&self) -> Option<&String> {
    self.verb.as_ref()
  }

  pub fn reset_verb(&mut self) {
    self.verb = None;
  }

  pub fn set_is_positive(&mut self, is_positive: bool) {
    self.is_positive = Some(is_positive);
  }

  pub fn with_is_positive(mut self, is_positive: bool) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.is_positive = Some(is_positive);
    self
  }

  pub fn is_positive(&self) -> Option<&bool> {
    self.is_positive.as_ref()
  }

  pub fn reset_is_positive(&mut self) {
    self.is_positive = None;
  }

  pub fn set_action_id(&mut self, action_id: String) {
    self.action_id = Some(action_id);
  }

  pub fn with_action_id(mut self, action_id: String) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.action_id = Some(action_id);
    self
  }

  pub fn action_id(&self) -> Option<&String> {
    self.action_id.as_ref()
  }

  pub fn reset_action_id(&mut self) {
    self.action_id = None;
  }

  pub fn set_action_hash(&mut self, action_hash: i32) {
    self.action_hash = Some(action_hash);
  }

  pub fn with_action_hash(mut self, action_hash: i32) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.action_hash = Some(action_hash);
    self
  }

  pub fn action_hash(&self) -> Option<&i32> {
    self.action_hash.as_ref()
  }

  pub fn reset_action_hash(&mut self) {
    self.action_hash = None;
  }

  pub fn set_auto_perform_action(&mut self, auto_perform_action: bool) {
    self.auto_perform_action = Some(auto_perform_action);
  }

  pub fn with_auto_perform_action(mut self, auto_perform_action: bool) -> DestinyDefinitionsDestinyVendorActionDefinition {
    self.auto_perform_action = Some(auto_perform_action);
    self
  }

  pub fn auto_perform_action(&self) -> Option<&bool> {
    self.auto_perform_action.as_ref()
  }

  pub fn reset_auto_perform_action(&mut self) {
    self.auto_perform_action = None;
  }

}



