/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyRaceDefinition : In Destiny, \"Races\" are really more like \"Species\". Sort of. I mean, are the Awoken a separate species from humans? I'm not sure. But either way, they're defined here. You'll see Exo, Awoken, and Human as examples of these Species. Players will choose one for their character.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyRaceDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition.
  #[serde(rename = "raceType")]
  race_type: Option<i32>,
  /// A localized string referring to the singular form of the Race's name when referred to in gendered form. Keyed by the DestinyGender.
  #[serde(rename = "genderedRaceNames")]
  gendered_race_names: Option<::std::collections::HashMap<String, String>>,
  #[serde(rename = "genderedRaceNamesByGenderHash")]
  gendered_race_names_by_gender_hash: Option<::std::collections::HashMap<String, String>>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyRaceDefinition {
  /// In Destiny, \"Races\" are really more like \"Species\". Sort of. I mean, are the Awoken a separate species from humans? I'm not sure. But either way, they're defined here. You'll see Exo, Awoken, and Human as examples of these Species. Players will choose one for their character.
  pub fn new() -> DestinyDefinitionsDestinyRaceDefinition {
    DestinyDefinitionsDestinyRaceDefinition {
      display_properties: None,
      race_type: None,
      gendered_race_names: None,
      gendered_race_names_by_gender_hash: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsDestinyRaceDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_race_type(&mut self, race_type: i32) {
    self.race_type = Some(race_type);
  }

  pub fn with_race_type(mut self, race_type: i32) -> DestinyDefinitionsDestinyRaceDefinition {
    self.race_type = Some(race_type);
    self
  }

  pub fn race_type(&self) -> Option<&i32> {
    self.race_type.as_ref()
  }

  pub fn reset_race_type(&mut self) {
    self.race_type = None;
  }

  pub fn set_gendered_race_names(&mut self, gendered_race_names: ::std::collections::HashMap<String, String>) {
    self.gendered_race_names = Some(gendered_race_names);
  }

  pub fn with_gendered_race_names(mut self, gendered_race_names: ::std::collections::HashMap<String, String>) -> DestinyDefinitionsDestinyRaceDefinition {
    self.gendered_race_names = Some(gendered_race_names);
    self
  }

  pub fn gendered_race_names(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.gendered_race_names.as_ref()
  }

  pub fn reset_gendered_race_names(&mut self) {
    self.gendered_race_names = None;
  }

  pub fn set_gendered_race_names_by_gender_hash(&mut self, gendered_race_names_by_gender_hash: ::std::collections::HashMap<String, String>) {
    self.gendered_race_names_by_gender_hash = Some(gendered_race_names_by_gender_hash);
  }

  pub fn with_gendered_race_names_by_gender_hash(mut self, gendered_race_names_by_gender_hash: ::std::collections::HashMap<String, String>) -> DestinyDefinitionsDestinyRaceDefinition {
    self.gendered_race_names_by_gender_hash = Some(gendered_race_names_by_gender_hash);
    self
  }

  pub fn gendered_race_names_by_gender_hash(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.gendered_race_names_by_gender_hash.as_ref()
  }

  pub fn reset_gendered_race_names_by_gender_hash(&mut self) {
    self.gendered_race_names_by_gender_hash = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyRaceDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyRaceDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyRaceDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



