/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyRequestsActionsDestinyInsertPlugsRequestEntry : Represents all of the data related to a single plug to be inserted.  Note that, while you *can* point to a socket that represents infusion, you will receive an error if you attempt to do so. Come on guys, let's play nice.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
  /// The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don't point to or try to insert a plug into an infusion socket. It won't work.
  #[serde(rename = "socketIndex")]
  socket_index: Option<i32>,
  /// This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \"default\" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.
  #[serde(rename = "socketArrayType")]
  socket_array_type: Option<i32>,
  /// Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.
  #[serde(rename = "plugItemHash")]
  plug_item_hash: Option<i32>
}

impl DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
  /// Represents all of the data related to a single plug to be inserted.  Note that, while you *can* point to a socket that represents infusion, you will receive an error if you attempt to do so. Come on guys, let's play nice.
  pub fn new() -> DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
    DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
      socket_index: None,
      socket_array_type: None,
      plug_item_hash: None
    }
  }

  pub fn set_socket_index(&mut self, socket_index: i32) {
    self.socket_index = Some(socket_index);
  }

  pub fn with_socket_index(mut self, socket_index: i32) -> DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
    self.socket_index = Some(socket_index);
    self
  }

  pub fn socket_index(&self) -> Option<&i32> {
    self.socket_index.as_ref()
  }

  pub fn reset_socket_index(&mut self) {
    self.socket_index = None;
  }

  pub fn set_socket_array_type(&mut self, socket_array_type: i32) {
    self.socket_array_type = Some(socket_array_type);
  }

  pub fn with_socket_array_type(mut self, socket_array_type: i32) -> DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
    self.socket_array_type = Some(socket_array_type);
    self
  }

  pub fn socket_array_type(&self) -> Option<&i32> {
    self.socket_array_type.as_ref()
  }

  pub fn reset_socket_array_type(&mut self) {
    self.socket_array_type = None;
  }

  pub fn set_plug_item_hash(&mut self, plug_item_hash: i32) {
    self.plug_item_hash = Some(plug_item_hash);
  }

  pub fn with_plug_item_hash(mut self, plug_item_hash: i32) -> DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
    self.plug_item_hash = Some(plug_item_hash);
    self
  }

  pub fn plug_item_hash(&self) -> Option<&i32> {
    self.plug_item_hash.as_ref()
  }

  pub fn reset_plug_item_hash(&mut self) {
    self.plug_item_hash = None;
  }

}



