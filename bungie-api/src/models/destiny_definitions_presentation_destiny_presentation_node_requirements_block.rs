/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock : Presentation nodes can be restricted by various requirements. This defines the rules of those requirements, and the message(s) to be shown if these requirements aren't met.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock {
  /// If this node is not accessible due to Entitlements (for instance, you don't own the required game expansion), this is the message to show.
  #[serde(rename = "entitlementUnavailableMessage")]
  entitlement_unavailable_message: Option<String>
}

impl DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock {
  /// Presentation nodes can be restricted by various requirements. This defines the rules of those requirements, and the message(s) to be shown if these requirements aren't met.
  pub fn new() -> DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock {
    DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock {
      entitlement_unavailable_message: None
    }
  }

  pub fn set_entitlement_unavailable_message(&mut self, entitlement_unavailable_message: String) {
    self.entitlement_unavailable_message = Some(entitlement_unavailable_message);
  }

  pub fn with_entitlement_unavailable_message(mut self, entitlement_unavailable_message: String) -> DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock {
    self.entitlement_unavailable_message = Some(entitlement_unavailable_message);
    self
  }

  pub fn entitlement_unavailable_message(&self) -> Option<&String> {
    self.entitlement_unavailable_message.as_ref()
  }

  pub fn reset_entitlement_unavailable_message(&mut self) {
    self.entitlement_unavailable_message = None;
  }

}



