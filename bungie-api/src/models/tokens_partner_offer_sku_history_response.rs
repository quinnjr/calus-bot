/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TokensPartnerOfferSkuHistoryResponse {
  #[serde(rename = "SkuIdentifier")]
  sku_identifier: Option<String>,
  #[serde(rename = "LocalizedName")]
  localized_name: Option<String>,
  #[serde(rename = "LocalizedDescription")]
  localized_description: Option<String>,
  #[serde(rename = "ClaimDate")]
  claim_date: Option<String>,
  #[serde(rename = "AllOffersApplied")]
  all_offers_applied: Option<bool>,
  #[serde(rename = "TransactionId")]
  transaction_id: Option<String>,
  #[serde(rename = "SkuOffers")]
  sku_offers: Option<Vec<::models::TokensPartnerOfferHistoryResponse>>
}

impl TokensPartnerOfferSkuHistoryResponse {
  pub fn new() -> TokensPartnerOfferSkuHistoryResponse {
    TokensPartnerOfferSkuHistoryResponse {
      sku_identifier: None,
      localized_name: None,
      localized_description: None,
      claim_date: None,
      all_offers_applied: None,
      transaction_id: None,
      sku_offers: None
    }
  }

  pub fn set_sku_identifier(&mut self, sku_identifier: String) {
    self.sku_identifier = Some(sku_identifier);
  }

  pub fn with_sku_identifier(mut self, sku_identifier: String) -> TokensPartnerOfferSkuHistoryResponse {
    self.sku_identifier = Some(sku_identifier);
    self
  }

  pub fn sku_identifier(&self) -> Option<&String> {
    self.sku_identifier.as_ref()
  }

  pub fn reset_sku_identifier(&mut self) {
    self.sku_identifier = None;
  }

  pub fn set_localized_name(&mut self, localized_name: String) {
    self.localized_name = Some(localized_name);
  }

  pub fn with_localized_name(mut self, localized_name: String) -> TokensPartnerOfferSkuHistoryResponse {
    self.localized_name = Some(localized_name);
    self
  }

  pub fn localized_name(&self) -> Option<&String> {
    self.localized_name.as_ref()
  }

  pub fn reset_localized_name(&mut self) {
    self.localized_name = None;
  }

  pub fn set_localized_description(&mut self, localized_description: String) {
    self.localized_description = Some(localized_description);
  }

  pub fn with_localized_description(mut self, localized_description: String) -> TokensPartnerOfferSkuHistoryResponse {
    self.localized_description = Some(localized_description);
    self
  }

  pub fn localized_description(&self) -> Option<&String> {
    self.localized_description.as_ref()
  }

  pub fn reset_localized_description(&mut self) {
    self.localized_description = None;
  }

  pub fn set_claim_date(&mut self, claim_date: String) {
    self.claim_date = Some(claim_date);
  }

  pub fn with_claim_date(mut self, claim_date: String) -> TokensPartnerOfferSkuHistoryResponse {
    self.claim_date = Some(claim_date);
    self
  }

  pub fn claim_date(&self) -> Option<&String> {
    self.claim_date.as_ref()
  }

  pub fn reset_claim_date(&mut self) {
    self.claim_date = None;
  }

  pub fn set_all_offers_applied(&mut self, all_offers_applied: bool) {
    self.all_offers_applied = Some(all_offers_applied);
  }

  pub fn with_all_offers_applied(mut self, all_offers_applied: bool) -> TokensPartnerOfferSkuHistoryResponse {
    self.all_offers_applied = Some(all_offers_applied);
    self
  }

  pub fn all_offers_applied(&self) -> Option<&bool> {
    self.all_offers_applied.as_ref()
  }

  pub fn reset_all_offers_applied(&mut self) {
    self.all_offers_applied = None;
  }

  pub fn set_transaction_id(&mut self, transaction_id: String) {
    self.transaction_id = Some(transaction_id);
  }

  pub fn with_transaction_id(mut self, transaction_id: String) -> TokensPartnerOfferSkuHistoryResponse {
    self.transaction_id = Some(transaction_id);
    self
  }

  pub fn transaction_id(&self) -> Option<&String> {
    self.transaction_id.as_ref()
  }

  pub fn reset_transaction_id(&mut self) {
    self.transaction_id = None;
  }

  pub fn set_sku_offers(&mut self, sku_offers: Vec<::models::TokensPartnerOfferHistoryResponse>) {
    self.sku_offers = Some(sku_offers);
  }

  pub fn with_sku_offers(mut self, sku_offers: Vec<::models::TokensPartnerOfferHistoryResponse>) -> TokensPartnerOfferSkuHistoryResponse {
    self.sku_offers = Some(sku_offers);
    self
  }

  pub fn sku_offers(&self) -> Option<&Vec<::models::TokensPartnerOfferHistoryResponse>> {
    self.sku_offers.as_ref()
  }

  pub fn reset_sku_offers(&mut self) {
    self.sku_offers = None;
  }

}



