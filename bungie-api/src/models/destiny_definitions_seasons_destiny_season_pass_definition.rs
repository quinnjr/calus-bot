/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// This is the progression definition related to the progression for the initial levels 1-100 that provide item rewards for the Season pass. Further experience after you reach the limit is provided in the \"Prestige\" progression referred to by prestigeProgressionHash.
  #[serde(rename = "rewardProgressionHash")]
  reward_progression_hash: Option<i32>,
  /// I know what you're thinking, but I promise we're not going to duplicate and drown you. Instead, we're giving you sweet, sweet power bonuses.   Prestige progression is further progression that you can make on the Season pass after you gain max ranks, that will ultimately increase your power/light level over the theoretical limit.
  #[serde(rename = "prestigeProgressionHash")]
  prestige_progression_hash: Option<i32>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
  pub fn new() -> DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
    DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
      display_properties: None,
      reward_progression_hash: None,
      prestige_progression_hash: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_reward_progression_hash(&mut self, reward_progression_hash: i32) {
    self.reward_progression_hash = Some(reward_progression_hash);
  }

  pub fn with_reward_progression_hash(mut self, reward_progression_hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
    self.reward_progression_hash = Some(reward_progression_hash);
    self
  }

  pub fn reward_progression_hash(&self) -> Option<&i32> {
    self.reward_progression_hash.as_ref()
  }

  pub fn reset_reward_progression_hash(&mut self) {
    self.reward_progression_hash = None;
  }

  pub fn set_prestige_progression_hash(&mut self, prestige_progression_hash: i32) {
    self.prestige_progression_hash = Some(prestige_progression_hash);
  }

  pub fn with_prestige_progression_hash(mut self, prestige_progression_hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
    self.prestige_progression_hash = Some(prestige_progression_hash);
    self
  }

  pub fn prestige_progression_hash(&self) -> Option<&i32> {
    self.prestige_progression_hash.as_ref()
  }

  pub fn reset_prestige_progression_hash(&mut self) {
    self.prestige_progression_hash = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



