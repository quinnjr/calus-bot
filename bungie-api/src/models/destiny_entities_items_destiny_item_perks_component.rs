/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesItemsDestinyItemPerksComponent : Instanced items can have perks: benefits that the item bestows.  These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item's tooltip.  Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesItemsDestinyItemPerksComponent {
  /// The list of perks to display in an item tooltip - and whether or not they have been activated.
  #[serde(rename = "perks")]
  perks: Option<Vec<::models::DestinyPerksDestinyPerkReference>>
}

impl DestinyEntitiesItemsDestinyItemPerksComponent {
  /// Instanced items can have perks: benefits that the item bestows.  These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item's tooltip.  Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.
  pub fn new() -> DestinyEntitiesItemsDestinyItemPerksComponent {
    DestinyEntitiesItemsDestinyItemPerksComponent {
      perks: None
    }
  }

  pub fn set_perks(&mut self, perks: Vec<::models::DestinyPerksDestinyPerkReference>) {
    self.perks = Some(perks);
  }

  pub fn with_perks(mut self, perks: Vec<::models::DestinyPerksDestinyPerkReference>) -> DestinyEntitiesItemsDestinyItemPerksComponent {
    self.perks = Some(perks);
    self
  }

  pub fn perks(&self) -> Option<&Vec<::models::DestinyPerksDestinyPerkReference>> {
    self.perks.as_ref()
  }

  pub fn reset_perks(&mut self) {
    self.perks = None;
  }

}



