/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsItemsDestinyDerivedItemDefinition : This is a reference to, and summary data for, a specific item that you can get as a result of Using or Acquiring some other Item (For example, this could be summary information for an Emote that you can get by opening an an Eververse Box) See DestinyDerivedItemCategoryDefinition for more information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsItemsDestinyDerivedItemDefinition {
  /// The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won't be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself.
  #[serde(rename = "itemHash")]
  item_hash: Option<i32>,
  /// The name of the derived item.
  #[serde(rename = "itemName")]
  item_name: Option<String>,
  /// Additional details about the derived item, in addition to the description.
  #[serde(rename = "itemDetail")]
  item_detail: Option<String>,
  /// A brief description of the item.
  #[serde(rename = "itemDescription")]
  item_description: Option<String>,
  /// An icon for the item.
  #[serde(rename = "iconPath")]
  icon_path: Option<String>,
  /// If the item was derived from a \"Preview Vendor\", this will be an index into the DestinyVendorDefinition's itemList property. Otherwise, -1.
  #[serde(rename = "vendorItemIndex")]
  vendor_item_index: Option<i32>
}

impl DestinyDefinitionsItemsDestinyDerivedItemDefinition {
  /// This is a reference to, and summary data for, a specific item that you can get as a result of Using or Acquiring some other Item (For example, this could be summary information for an Emote that you can get by opening an an Eververse Box) See DestinyDerivedItemCategoryDefinition for more information.
  pub fn new() -> DestinyDefinitionsItemsDestinyDerivedItemDefinition {
    DestinyDefinitionsItemsDestinyDerivedItemDefinition {
      item_hash: None,
      item_name: None,
      item_detail: None,
      item_description: None,
      icon_path: None,
      vendor_item_index: None
    }
  }

  pub fn set_item_hash(&mut self, item_hash: i32) {
    self.item_hash = Some(item_hash);
  }

  pub fn with_item_hash(mut self, item_hash: i32) -> DestinyDefinitionsItemsDestinyDerivedItemDefinition {
    self.item_hash = Some(item_hash);
    self
  }

  pub fn item_hash(&self) -> Option<&i32> {
    self.item_hash.as_ref()
  }

  pub fn reset_item_hash(&mut self) {
    self.item_hash = None;
  }

  pub fn set_item_name(&mut self, item_name: String) {
    self.item_name = Some(item_name);
  }

  pub fn with_item_name(mut self, item_name: String) -> DestinyDefinitionsItemsDestinyDerivedItemDefinition {
    self.item_name = Some(item_name);
    self
  }

  pub fn item_name(&self) -> Option<&String> {
    self.item_name.as_ref()
  }

  pub fn reset_item_name(&mut self) {
    self.item_name = None;
  }

  pub fn set_item_detail(&mut self, item_detail: String) {
    self.item_detail = Some(item_detail);
  }

  pub fn with_item_detail(mut self, item_detail: String) -> DestinyDefinitionsItemsDestinyDerivedItemDefinition {
    self.item_detail = Some(item_detail);
    self
  }

  pub fn item_detail(&self) -> Option<&String> {
    self.item_detail.as_ref()
  }

  pub fn reset_item_detail(&mut self) {
    self.item_detail = None;
  }

  pub fn set_item_description(&mut self, item_description: String) {
    self.item_description = Some(item_description);
  }

  pub fn with_item_description(mut self, item_description: String) -> DestinyDefinitionsItemsDestinyDerivedItemDefinition {
    self.item_description = Some(item_description);
    self
  }

  pub fn item_description(&self) -> Option<&String> {
    self.item_description.as_ref()
  }

  pub fn reset_item_description(&mut self) {
    self.item_description = None;
  }

  pub fn set_icon_path(&mut self, icon_path: String) {
    self.icon_path = Some(icon_path);
  }

  pub fn with_icon_path(mut self, icon_path: String) -> DestinyDefinitionsItemsDestinyDerivedItemDefinition {
    self.icon_path = Some(icon_path);
    self
  }

  pub fn icon_path(&self) -> Option<&String> {
    self.icon_path.as_ref()
  }

  pub fn reset_icon_path(&mut self) {
    self.icon_path = None;
  }

  pub fn set_vendor_item_index(&mut self, vendor_item_index: i32) {
    self.vendor_item_index = Some(vendor_item_index);
  }

  pub fn with_vendor_item_index(mut self, vendor_item_index: i32) -> DestinyDefinitionsItemsDestinyDerivedItemDefinition {
    self.vendor_item_index = Some(vendor_item_index);
    self
  }

  pub fn vendor_item_index(&self) -> Option<&i32> {
    self.vendor_item_index.as_ref()
  }

  pub fn reset_vendor_item_index(&mut self) {
    self.vendor_item_index = None;
  }

}



