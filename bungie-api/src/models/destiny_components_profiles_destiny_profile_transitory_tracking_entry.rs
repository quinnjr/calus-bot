/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry : This represents a single \"thing\" being tracked by the player.  This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.  It's up to you to interpret what it means when various combinations of these entries have values being tracked.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
  /// OPTIONAL - If this is tracking a DestinyLocationDefinition, this is the identifier for that location.
  #[serde(rename = "locationHash")]
  location_hash: Option<i32>,
  /// OPTIONAL - If this is tracking the status of a DestinyInventoryItemDefinition, this is the identifier for that item.
  #[serde(rename = "itemHash")]
  item_hash: Option<i32>,
  /// OPTIONAL - If this is tracking the status of a DestinyObjectiveDefinition, this is the identifier for that objective.
  #[serde(rename = "objectiveHash")]
  objective_hash: Option<i32>,
  /// OPTIONAL - If this is tracking the status of a DestinyActivityDefinition, this is the identifier for that activity.
  #[serde(rename = "activityHash")]
  activity_hash: Option<i32>,
  /// OPTIONAL - If this is tracking the status of a quest, this is the identifier for the DestinyInventoryItemDefinition that containst that questline data.
  #[serde(rename = "questlineItemHash")]
  questline_item_hash: Option<i32>,
  /// OPTIONAL - I've got to level with you, I don't really know what this is. Is it when you started tracking it? Is it only populated for tracked items that have time limits?  I don't know, but we can get at it - when I get time to actually test what it is, I'll update this. In the meantime, bask in the mysterious data.
  #[serde(rename = "trackedDate")]
  tracked_date: Option<String>
}

impl DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
  /// This represents a single \"thing\" being tracked by the player.  This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.  It's up to you to interpret what it means when various combinations of these entries have values being tracked.
  pub fn new() -> DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
    DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
      location_hash: None,
      item_hash: None,
      objective_hash: None,
      activity_hash: None,
      questline_item_hash: None,
      tracked_date: None
    }
  }

  pub fn set_location_hash(&mut self, location_hash: i32) {
    self.location_hash = Some(location_hash);
  }

  pub fn with_location_hash(mut self, location_hash: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
    self.location_hash = Some(location_hash);
    self
  }

  pub fn location_hash(&self) -> Option<&i32> {
    self.location_hash.as_ref()
  }

  pub fn reset_location_hash(&mut self) {
    self.location_hash = None;
  }

  pub fn set_item_hash(&mut self, item_hash: i32) {
    self.item_hash = Some(item_hash);
  }

  pub fn with_item_hash(mut self, item_hash: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
    self.item_hash = Some(item_hash);
    self
  }

  pub fn item_hash(&self) -> Option<&i32> {
    self.item_hash.as_ref()
  }

  pub fn reset_item_hash(&mut self) {
    self.item_hash = None;
  }

  pub fn set_objective_hash(&mut self, objective_hash: i32) {
    self.objective_hash = Some(objective_hash);
  }

  pub fn with_objective_hash(mut self, objective_hash: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
    self.objective_hash = Some(objective_hash);
    self
  }

  pub fn objective_hash(&self) -> Option<&i32> {
    self.objective_hash.as_ref()
  }

  pub fn reset_objective_hash(&mut self) {
    self.objective_hash = None;
  }

  pub fn set_activity_hash(&mut self, activity_hash: i32) {
    self.activity_hash = Some(activity_hash);
  }

  pub fn with_activity_hash(mut self, activity_hash: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
    self.activity_hash = Some(activity_hash);
    self
  }

  pub fn activity_hash(&self) -> Option<&i32> {
    self.activity_hash.as_ref()
  }

  pub fn reset_activity_hash(&mut self) {
    self.activity_hash = None;
  }

  pub fn set_questline_item_hash(&mut self, questline_item_hash: i32) {
    self.questline_item_hash = Some(questline_item_hash);
  }

  pub fn with_questline_item_hash(mut self, questline_item_hash: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
    self.questline_item_hash = Some(questline_item_hash);
    self
  }

  pub fn questline_item_hash(&self) -> Option<&i32> {
    self.questline_item_hash.as_ref()
  }

  pub fn reset_questline_item_hash(&mut self) {
    self.questline_item_hash = None;
  }

  pub fn set_tracked_date(&mut self, tracked_date: String) {
    self.tracked_date = Some(tracked_date);
  }

  pub fn with_tracked_date(mut self, tracked_date: String) -> DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
    self.tracked_date = Some(tracked_date);
    self
  }

  pub fn tracked_date(&self) -> Option<&String> {
    self.tracked_date.as_ref()
  }

  pub fn reset_tracked_date(&mut self) {
    self.tracked_date = None;
  }

}



