/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyArtifactsDestinyArtifactTier {
  #[serde(rename = "tierHash")]
  tier_hash: Option<i32>,
  #[serde(rename = "isUnlocked")]
  is_unlocked: Option<bool>,
  #[serde(rename = "pointsToUnlock")]
  points_to_unlock: Option<i32>,
  #[serde(rename = "items")]
  items: Option<Vec<::models::DestinyArtifactsDestinyArtifactTierItem>>
}

impl DestinyArtifactsDestinyArtifactTier {
  pub fn new() -> DestinyArtifactsDestinyArtifactTier {
    DestinyArtifactsDestinyArtifactTier {
      tier_hash: None,
      is_unlocked: None,
      points_to_unlock: None,
      items: None
    }
  }

  pub fn set_tier_hash(&mut self, tier_hash: i32) {
    self.tier_hash = Some(tier_hash);
  }

  pub fn with_tier_hash(mut self, tier_hash: i32) -> DestinyArtifactsDestinyArtifactTier {
    self.tier_hash = Some(tier_hash);
    self
  }

  pub fn tier_hash(&self) -> Option<&i32> {
    self.tier_hash.as_ref()
  }

  pub fn reset_tier_hash(&mut self) {
    self.tier_hash = None;
  }

  pub fn set_is_unlocked(&mut self, is_unlocked: bool) {
    self.is_unlocked = Some(is_unlocked);
  }

  pub fn with_is_unlocked(mut self, is_unlocked: bool) -> DestinyArtifactsDestinyArtifactTier {
    self.is_unlocked = Some(is_unlocked);
    self
  }

  pub fn is_unlocked(&self) -> Option<&bool> {
    self.is_unlocked.as_ref()
  }

  pub fn reset_is_unlocked(&mut self) {
    self.is_unlocked = None;
  }

  pub fn set_points_to_unlock(&mut self, points_to_unlock: i32) {
    self.points_to_unlock = Some(points_to_unlock);
  }

  pub fn with_points_to_unlock(mut self, points_to_unlock: i32) -> DestinyArtifactsDestinyArtifactTier {
    self.points_to_unlock = Some(points_to_unlock);
    self
  }

  pub fn points_to_unlock(&self) -> Option<&i32> {
    self.points_to_unlock.as_ref()
  }

  pub fn reset_points_to_unlock(&mut self) {
    self.points_to_unlock = None;
  }

  pub fn set_items(&mut self, items: Vec<::models::DestinyArtifactsDestinyArtifactTierItem>) {
    self.items = Some(items);
  }

  pub fn with_items(mut self, items: Vec<::models::DestinyArtifactsDestinyArtifactTierItem>) -> DestinyArtifactsDestinyArtifactTier {
    self.items = Some(items);
    self
  }

  pub fn items(&self) -> Option<&Vec<::models::DestinyArtifactsDestinyArtifactTierItem>> {
    self.items.as_ref()
  }

  pub fn reset_items(&mut self) {
    self.items = None;
  }

}



