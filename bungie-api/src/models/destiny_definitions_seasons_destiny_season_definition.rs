/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsSeasonsDestinySeasonDefinition : Defines a canonical \"Season\" of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsSeasonsDestinySeasonDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  #[serde(rename = "backgroundImagePath")]
  background_image_path: Option<String>,
  #[serde(rename = "seasonNumber")]
  season_number: Option<i32>,
  #[serde(rename = "startDate")]
  start_date: Option<String>,
  #[serde(rename = "endDate")]
  end_date: Option<String>,
  #[serde(rename = "seasonPassHash")]
  season_pass_hash: Option<i32>,
  #[serde(rename = "seasonPassProgressionHash")]
  season_pass_progression_hash: Option<i32>,
  #[serde(rename = "artifactItemHash")]
  artifact_item_hash: Option<i32>,
  #[serde(rename = "sealPresentationNodeHash")]
  seal_presentation_node_hash: Option<i32>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsSeasonsDestinySeasonDefinition {
  /// Defines a canonical \"Season\" of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events.
  pub fn new() -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    DestinyDefinitionsSeasonsDestinySeasonDefinition {
      display_properties: None,
      background_image_path: None,
      season_number: None,
      start_date: None,
      end_date: None,
      season_pass_hash: None,
      season_pass_progression_hash: None,
      artifact_item_hash: None,
      seal_presentation_node_hash: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_background_image_path(&mut self, background_image_path: String) {
    self.background_image_path = Some(background_image_path);
  }

  pub fn with_background_image_path(mut self, background_image_path: String) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.background_image_path = Some(background_image_path);
    self
  }

  pub fn background_image_path(&self) -> Option<&String> {
    self.background_image_path.as_ref()
  }

  pub fn reset_background_image_path(&mut self) {
    self.background_image_path = None;
  }

  pub fn set_season_number(&mut self, season_number: i32) {
    self.season_number = Some(season_number);
  }

  pub fn with_season_number(mut self, season_number: i32) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.season_number = Some(season_number);
    self
  }

  pub fn season_number(&self) -> Option<&i32> {
    self.season_number.as_ref()
  }

  pub fn reset_season_number(&mut self) {
    self.season_number = None;
  }

  pub fn set_start_date(&mut self, start_date: String) {
    self.start_date = Some(start_date);
  }

  pub fn with_start_date(mut self, start_date: String) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.start_date = Some(start_date);
    self
  }

  pub fn start_date(&self) -> Option<&String> {
    self.start_date.as_ref()
  }

  pub fn reset_start_date(&mut self) {
    self.start_date = None;
  }

  pub fn set_end_date(&mut self, end_date: String) {
    self.end_date = Some(end_date);
  }

  pub fn with_end_date(mut self, end_date: String) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.end_date = Some(end_date);
    self
  }

  pub fn end_date(&self) -> Option<&String> {
    self.end_date.as_ref()
  }

  pub fn reset_end_date(&mut self) {
    self.end_date = None;
  }

  pub fn set_season_pass_hash(&mut self, season_pass_hash: i32) {
    self.season_pass_hash = Some(season_pass_hash);
  }

  pub fn with_season_pass_hash(mut self, season_pass_hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.season_pass_hash = Some(season_pass_hash);
    self
  }

  pub fn season_pass_hash(&self) -> Option<&i32> {
    self.season_pass_hash.as_ref()
  }

  pub fn reset_season_pass_hash(&mut self) {
    self.season_pass_hash = None;
  }

  pub fn set_season_pass_progression_hash(&mut self, season_pass_progression_hash: i32) {
    self.season_pass_progression_hash = Some(season_pass_progression_hash);
  }

  pub fn with_season_pass_progression_hash(mut self, season_pass_progression_hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.season_pass_progression_hash = Some(season_pass_progression_hash);
    self
  }

  pub fn season_pass_progression_hash(&self) -> Option<&i32> {
    self.season_pass_progression_hash.as_ref()
  }

  pub fn reset_season_pass_progression_hash(&mut self) {
    self.season_pass_progression_hash = None;
  }

  pub fn set_artifact_item_hash(&mut self, artifact_item_hash: i32) {
    self.artifact_item_hash = Some(artifact_item_hash);
  }

  pub fn with_artifact_item_hash(mut self, artifact_item_hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.artifact_item_hash = Some(artifact_item_hash);
    self
  }

  pub fn artifact_item_hash(&self) -> Option<&i32> {
    self.artifact_item_hash.as_ref()
  }

  pub fn reset_artifact_item_hash(&mut self) {
    self.artifact_item_hash = None;
  }

  pub fn set_seal_presentation_node_hash(&mut self, seal_presentation_node_hash: i32) {
    self.seal_presentation_node_hash = Some(seal_presentation_node_hash);
  }

  pub fn with_seal_presentation_node_hash(mut self, seal_presentation_node_hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.seal_presentation_node_hash = Some(seal_presentation_node_hash);
    self
  }

  pub fn seal_presentation_node_hash(&self) -> Option<&i32> {
    self.seal_presentation_node_hash.as_ref()
  }

  pub fn reset_seal_presentation_node_hash(&mut self) {
    self.seal_presentation_node_hash = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsSeasonsDestinySeasonDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



