/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ForumPostSearchResponse {
  #[serde(rename = "relatedPosts")]
  related_posts: Option<Vec<::models::ForumPostResponse>>,
  #[serde(rename = "authors")]
  authors: Option<Vec<::models::UserGeneralUser>>,
  #[serde(rename = "groups")]
  groups: Option<Vec<::models::GroupsV2GroupResponse>>,
  #[serde(rename = "searchedTags")]
  searched_tags: Option<Vec<::models::TagsModelsContractsTagResponse>>,
  #[serde(rename = "polls")]
  polls: Option<Vec<::models::ForumPollResponse>>,
  #[serde(rename = "recruitmentDetails")]
  recruitment_details: Option<Vec<::models::ForumForumRecruitmentDetail>>,
  #[serde(rename = "availablePages")]
  available_pages: Option<i32>,
  #[serde(rename = "results")]
  results: Option<Vec<::models::ForumPostResponse>>,
  #[serde(rename = "totalResults")]
  total_results: Option<i32>,
  #[serde(rename = "hasMore")]
  has_more: Option<bool>,
  #[serde(rename = "query")]
  query: Option<::models::QueriesPagedQuery>,
  #[serde(rename = "replacementContinuationToken")]
  replacement_continuation_token: Option<String>,
  /// If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
  #[serde(rename = "useTotalResults")]
  use_total_results: Option<bool>
}

impl ForumPostSearchResponse {
  pub fn new() -> ForumPostSearchResponse {
    ForumPostSearchResponse {
      related_posts: None,
      authors: None,
      groups: None,
      searched_tags: None,
      polls: None,
      recruitment_details: None,
      available_pages: None,
      results: None,
      total_results: None,
      has_more: None,
      query: None,
      replacement_continuation_token: None,
      use_total_results: None
    }
  }

  pub fn set_related_posts(&mut self, related_posts: Vec<::models::ForumPostResponse>) {
    self.related_posts = Some(related_posts);
  }

  pub fn with_related_posts(mut self, related_posts: Vec<::models::ForumPostResponse>) -> ForumPostSearchResponse {
    self.related_posts = Some(related_posts);
    self
  }

  pub fn related_posts(&self) -> Option<&Vec<::models::ForumPostResponse>> {
    self.related_posts.as_ref()
  }

  pub fn reset_related_posts(&mut self) {
    self.related_posts = None;
  }

  pub fn set_authors(&mut self, authors: Vec<::models::UserGeneralUser>) {
    self.authors = Some(authors);
  }

  pub fn with_authors(mut self, authors: Vec<::models::UserGeneralUser>) -> ForumPostSearchResponse {
    self.authors = Some(authors);
    self
  }

  pub fn authors(&self) -> Option<&Vec<::models::UserGeneralUser>> {
    self.authors.as_ref()
  }

  pub fn reset_authors(&mut self) {
    self.authors = None;
  }

  pub fn set_groups(&mut self, groups: Vec<::models::GroupsV2GroupResponse>) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Vec<::models::GroupsV2GroupResponse>) -> ForumPostSearchResponse {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Vec<::models::GroupsV2GroupResponse>> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_searched_tags(&mut self, searched_tags: Vec<::models::TagsModelsContractsTagResponse>) {
    self.searched_tags = Some(searched_tags);
  }

  pub fn with_searched_tags(mut self, searched_tags: Vec<::models::TagsModelsContractsTagResponse>) -> ForumPostSearchResponse {
    self.searched_tags = Some(searched_tags);
    self
  }

  pub fn searched_tags(&self) -> Option<&Vec<::models::TagsModelsContractsTagResponse>> {
    self.searched_tags.as_ref()
  }

  pub fn reset_searched_tags(&mut self) {
    self.searched_tags = None;
  }

  pub fn set_polls(&mut self, polls: Vec<::models::ForumPollResponse>) {
    self.polls = Some(polls);
  }

  pub fn with_polls(mut self, polls: Vec<::models::ForumPollResponse>) -> ForumPostSearchResponse {
    self.polls = Some(polls);
    self
  }

  pub fn polls(&self) -> Option<&Vec<::models::ForumPollResponse>> {
    self.polls.as_ref()
  }

  pub fn reset_polls(&mut self) {
    self.polls = None;
  }

  pub fn set_recruitment_details(&mut self, recruitment_details: Vec<::models::ForumForumRecruitmentDetail>) {
    self.recruitment_details = Some(recruitment_details);
  }

  pub fn with_recruitment_details(mut self, recruitment_details: Vec<::models::ForumForumRecruitmentDetail>) -> ForumPostSearchResponse {
    self.recruitment_details = Some(recruitment_details);
    self
  }

  pub fn recruitment_details(&self) -> Option<&Vec<::models::ForumForumRecruitmentDetail>> {
    self.recruitment_details.as_ref()
  }

  pub fn reset_recruitment_details(&mut self) {
    self.recruitment_details = None;
  }

  pub fn set_available_pages(&mut self, available_pages: i32) {
    self.available_pages = Some(available_pages);
  }

  pub fn with_available_pages(mut self, available_pages: i32) -> ForumPostSearchResponse {
    self.available_pages = Some(available_pages);
    self
  }

  pub fn available_pages(&self) -> Option<&i32> {
    self.available_pages.as_ref()
  }

  pub fn reset_available_pages(&mut self) {
    self.available_pages = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::ForumPostResponse>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::ForumPostResponse>) -> ForumPostSearchResponse {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::ForumPostResponse>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

  pub fn set_total_results(&mut self, total_results: i32) {
    self.total_results = Some(total_results);
  }

  pub fn with_total_results(mut self, total_results: i32) -> ForumPostSearchResponse {
    self.total_results = Some(total_results);
    self
  }

  pub fn total_results(&self) -> Option<&i32> {
    self.total_results.as_ref()
  }

  pub fn reset_total_results(&mut self) {
    self.total_results = None;
  }

  pub fn set_has_more(&mut self, has_more: bool) {
    self.has_more = Some(has_more);
  }

  pub fn with_has_more(mut self, has_more: bool) -> ForumPostSearchResponse {
    self.has_more = Some(has_more);
    self
  }

  pub fn has_more(&self) -> Option<&bool> {
    self.has_more.as_ref()
  }

  pub fn reset_has_more(&mut self) {
    self.has_more = None;
  }

  pub fn set_query(&mut self, query: ::models::QueriesPagedQuery) {
    self.query = Some(query);
  }

  pub fn with_query(mut self, query: ::models::QueriesPagedQuery) -> ForumPostSearchResponse {
    self.query = Some(query);
    self
  }

  pub fn query(&self) -> Option<&::models::QueriesPagedQuery> {
    self.query.as_ref()
  }

  pub fn reset_query(&mut self) {
    self.query = None;
  }

  pub fn set_replacement_continuation_token(&mut self, replacement_continuation_token: String) {
    self.replacement_continuation_token = Some(replacement_continuation_token);
  }

  pub fn with_replacement_continuation_token(mut self, replacement_continuation_token: String) -> ForumPostSearchResponse {
    self.replacement_continuation_token = Some(replacement_continuation_token);
    self
  }

  pub fn replacement_continuation_token(&self) -> Option<&String> {
    self.replacement_continuation_token.as_ref()
  }

  pub fn reset_replacement_continuation_token(&mut self) {
    self.replacement_continuation_token = None;
  }

  pub fn set_use_total_results(&mut self, use_total_results: bool) {
    self.use_total_results = Some(use_total_results);
  }

  pub fn with_use_total_results(mut self, use_total_results: bool) -> ForumPostSearchResponse {
    self.use_total_results = Some(use_total_results);
    self
  }

  pub fn use_total_results(&self) -> Option<&bool> {
    self.use_total_results.as_ref()
  }

  pub fn reset_use_total_results(&mut self) {
    self.use_total_results = None;
  }

}



