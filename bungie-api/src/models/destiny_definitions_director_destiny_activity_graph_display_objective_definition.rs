/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition : When a Graph needs to show active Objectives, this defines those objectives as well as an identifier.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition {
  /// $NOTE $amola 2017-01-19 This field is apparently something that CUI uses to manually wire up objectives to display info. I am unsure how it works.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// The objective being shown on the map.
  #[serde(rename = "objectiveHash")]
  objective_hash: Option<i32>
}

impl DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition {
  /// When a Graph needs to show active Objectives, this defines those objectives as well as an identifier.
  pub fn new() -> DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition {
    DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition {
      id: None,
      objective_hash: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_objective_hash(&mut self, objective_hash: i32) {
    self.objective_hash = Some(objective_hash);
  }

  pub fn with_objective_hash(mut self, objective_hash: i32) -> DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition {
    self.objective_hash = Some(objective_hash);
    self
  }

  pub fn objective_hash(&self) -> Option<&i32> {
    self.objective_hash.as_ref()
  }

  pub fn reset_objective_hash(&mut self) {
    self.objective_hash = None;
  }

}



