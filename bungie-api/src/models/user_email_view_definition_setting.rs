/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserEmailViewDefinitionSetting {
  /// The identifier for this UI Setting, which can be used to relate it to custom strings or other data as desired.
  #[serde(rename = "name")]
  name: Option<String>,
  /// A dictionary of localized text for the EMail setting, keyed by the locale.
  #[serde(rename = "localization")]
  localization: Option<::std::collections::HashMap<String, ::models::UserEMailSettingLocalization>>,
  /// If true, this setting should be set by default if the user hasn't chosen whether it's set or cleared yet.
  #[serde(rename = "setByDefault")]
  set_by_default: Option<bool>,
  /// The OptInFlags value to set or clear if this setting is set or cleared in the UI. It is the aggregate of all underlying opt-in flags related to this setting.
  #[serde(rename = "optInAggregateValue")]
  opt_in_aggregate_value: Option<i64>,
  /// The subscriptions to show as children of this setting, if any.
  #[serde(rename = "subscriptions")]
  subscriptions: Option<Vec<::models::UserEmailSubscriptionDefinition>>
}

impl UserEmailViewDefinitionSetting {
  pub fn new() -> UserEmailViewDefinitionSetting {
    UserEmailViewDefinitionSetting {
      name: None,
      localization: None,
      set_by_default: None,
      opt_in_aggregate_value: None,
      subscriptions: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> UserEmailViewDefinitionSetting {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_localization(&mut self, localization: ::std::collections::HashMap<String, ::models::UserEMailSettingLocalization>) {
    self.localization = Some(localization);
  }

  pub fn with_localization(mut self, localization: ::std::collections::HashMap<String, ::models::UserEMailSettingLocalization>) -> UserEmailViewDefinitionSetting {
    self.localization = Some(localization);
    self
  }

  pub fn localization(&self) -> Option<&::std::collections::HashMap<String, ::models::UserEMailSettingLocalization>> {
    self.localization.as_ref()
  }

  pub fn reset_localization(&mut self) {
    self.localization = None;
  }

  pub fn set_set_by_default(&mut self, set_by_default: bool) {
    self.set_by_default = Some(set_by_default);
  }

  pub fn with_set_by_default(mut self, set_by_default: bool) -> UserEmailViewDefinitionSetting {
    self.set_by_default = Some(set_by_default);
    self
  }

  pub fn set_by_default(&self) -> Option<&bool> {
    self.set_by_default.as_ref()
  }

  pub fn reset_set_by_default(&mut self) {
    self.set_by_default = None;
  }

  pub fn set_opt_in_aggregate_value(&mut self, opt_in_aggregate_value: i64) {
    self.opt_in_aggregate_value = Some(opt_in_aggregate_value);
  }

  pub fn with_opt_in_aggregate_value(mut self, opt_in_aggregate_value: i64) -> UserEmailViewDefinitionSetting {
    self.opt_in_aggregate_value = Some(opt_in_aggregate_value);
    self
  }

  pub fn opt_in_aggregate_value(&self) -> Option<&i64> {
    self.opt_in_aggregate_value.as_ref()
  }

  pub fn reset_opt_in_aggregate_value(&mut self) {
    self.opt_in_aggregate_value = None;
  }

  pub fn set_subscriptions(&mut self, subscriptions: Vec<::models::UserEmailSubscriptionDefinition>) {
    self.subscriptions = Some(subscriptions);
  }

  pub fn with_subscriptions(mut self, subscriptions: Vec<::models::UserEmailSubscriptionDefinition>) -> UserEmailViewDefinitionSetting {
    self.subscriptions = Some(subscriptions);
    self
  }

  pub fn subscriptions(&self) -> Option<&Vec<::models::UserEmailSubscriptionDefinition>> {
    self.subscriptions.as_ref()
  }

  pub fn reset_subscriptions(&mut self) {
    self.subscriptions = None;
  }

}



