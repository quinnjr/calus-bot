/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyVendorInteractionReplyDefinition : When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.  You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
  /// The rewards granted upon responding to the vendor.
  #[serde(rename = "itemRewardsSelection")]
  item_rewards_selection: Option<i32>,
  /// The localized text for the reply.
  #[serde(rename = "reply")]
  reply: Option<String>,
  /// An enum indicating the type of reply being made.
  #[serde(rename = "replyType")]
  reply_type: Option<i32>
}

impl DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
  /// When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.  You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors.
  pub fn new() -> DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
    DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
      item_rewards_selection: None,
      reply: None,
      reply_type: None
    }
  }

  pub fn set_item_rewards_selection(&mut self, item_rewards_selection: i32) {
    self.item_rewards_selection = Some(item_rewards_selection);
  }

  pub fn with_item_rewards_selection(mut self, item_rewards_selection: i32) -> DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
    self.item_rewards_selection = Some(item_rewards_selection);
    self
  }

  pub fn item_rewards_selection(&self) -> Option<&i32> {
    self.item_rewards_selection.as_ref()
  }

  pub fn reset_item_rewards_selection(&mut self) {
    self.item_rewards_selection = None;
  }

  pub fn set_reply(&mut self, reply: String) {
    self.reply = Some(reply);
  }

  pub fn with_reply(mut self, reply: String) -> DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
    self.reply = Some(reply);
    self
  }

  pub fn reply(&self) -> Option<&String> {
    self.reply.as_ref()
  }

  pub fn reset_reply(&mut self) {
    self.reply = None;
  }

  pub fn set_reply_type(&mut self, reply_type: i32) {
    self.reply_type = Some(reply_type);
  }

  pub fn with_reply_type(mut self, reply_type: i32) -> DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
    self.reply_type = Some(reply_type);
    self
  }

  pub fn reply_type(&self) -> Option<&i32> {
    self.reply_type.as_ref()
  }

  pub fn reset_reply_type(&mut self) {
    self.reply_type = None;
  }

}



