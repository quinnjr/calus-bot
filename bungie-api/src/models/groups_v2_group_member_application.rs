/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupMemberApplication {
  #[serde(rename = "groupId")]
  group_id: Option<i64>,
  #[serde(rename = "creationDate")]
  creation_date: Option<String>,
  #[serde(rename = "resolveState")]
  resolve_state: Option<i32>,
  #[serde(rename = "resolveDate")]
  resolve_date: Option<String>,
  #[serde(rename = "resolvedByMembershipId")]
  resolved_by_membership_id: Option<i64>,
  #[serde(rename = "requestMessage")]
  request_message: Option<String>,
  #[serde(rename = "resolveMessage")]
  resolve_message: Option<String>,
  #[serde(rename = "destinyUserInfo")]
  destiny_user_info: Option<::models::GroupsV2GroupUserInfoCard>,
  #[serde(rename = "bungieNetUserInfo")]
  bungie_net_user_info: Option<::models::UserUserInfoCard>
}

impl GroupsV2GroupMemberApplication {
  pub fn new() -> GroupsV2GroupMemberApplication {
    GroupsV2GroupMemberApplication {
      group_id: None,
      creation_date: None,
      resolve_state: None,
      resolve_date: None,
      resolved_by_membership_id: None,
      request_message: None,
      resolve_message: None,
      destiny_user_info: None,
      bungie_net_user_info: None
    }
  }

  pub fn set_group_id(&mut self, group_id: i64) {
    self.group_id = Some(group_id);
  }

  pub fn with_group_id(mut self, group_id: i64) -> GroupsV2GroupMemberApplication {
    self.group_id = Some(group_id);
    self
  }

  pub fn group_id(&self) -> Option<&i64> {
    self.group_id.as_ref()
  }

  pub fn reset_group_id(&mut self) {
    self.group_id = None;
  }

  pub fn set_creation_date(&mut self, creation_date: String) {
    self.creation_date = Some(creation_date);
  }

  pub fn with_creation_date(mut self, creation_date: String) -> GroupsV2GroupMemberApplication {
    self.creation_date = Some(creation_date);
    self
  }

  pub fn creation_date(&self) -> Option<&String> {
    self.creation_date.as_ref()
  }

  pub fn reset_creation_date(&mut self) {
    self.creation_date = None;
  }

  pub fn set_resolve_state(&mut self, resolve_state: i32) {
    self.resolve_state = Some(resolve_state);
  }

  pub fn with_resolve_state(mut self, resolve_state: i32) -> GroupsV2GroupMemberApplication {
    self.resolve_state = Some(resolve_state);
    self
  }

  pub fn resolve_state(&self) -> Option<&i32> {
    self.resolve_state.as_ref()
  }

  pub fn reset_resolve_state(&mut self) {
    self.resolve_state = None;
  }

  pub fn set_resolve_date(&mut self, resolve_date: String) {
    self.resolve_date = Some(resolve_date);
  }

  pub fn with_resolve_date(mut self, resolve_date: String) -> GroupsV2GroupMemberApplication {
    self.resolve_date = Some(resolve_date);
    self
  }

  pub fn resolve_date(&self) -> Option<&String> {
    self.resolve_date.as_ref()
  }

  pub fn reset_resolve_date(&mut self) {
    self.resolve_date = None;
  }

  pub fn set_resolved_by_membership_id(&mut self, resolved_by_membership_id: i64) {
    self.resolved_by_membership_id = Some(resolved_by_membership_id);
  }

  pub fn with_resolved_by_membership_id(mut self, resolved_by_membership_id: i64) -> GroupsV2GroupMemberApplication {
    self.resolved_by_membership_id = Some(resolved_by_membership_id);
    self
  }

  pub fn resolved_by_membership_id(&self) -> Option<&i64> {
    self.resolved_by_membership_id.as_ref()
  }

  pub fn reset_resolved_by_membership_id(&mut self) {
    self.resolved_by_membership_id = None;
  }

  pub fn set_request_message(&mut self, request_message: String) {
    self.request_message = Some(request_message);
  }

  pub fn with_request_message(mut self, request_message: String) -> GroupsV2GroupMemberApplication {
    self.request_message = Some(request_message);
    self
  }

  pub fn request_message(&self) -> Option<&String> {
    self.request_message.as_ref()
  }

  pub fn reset_request_message(&mut self) {
    self.request_message = None;
  }

  pub fn set_resolve_message(&mut self, resolve_message: String) {
    self.resolve_message = Some(resolve_message);
  }

  pub fn with_resolve_message(mut self, resolve_message: String) -> GroupsV2GroupMemberApplication {
    self.resolve_message = Some(resolve_message);
    self
  }

  pub fn resolve_message(&self) -> Option<&String> {
    self.resolve_message.as_ref()
  }

  pub fn reset_resolve_message(&mut self) {
    self.resolve_message = None;
  }

  pub fn set_destiny_user_info(&mut self, destiny_user_info: ::models::GroupsV2GroupUserInfoCard) {
    self.destiny_user_info = Some(destiny_user_info);
  }

  pub fn with_destiny_user_info(mut self, destiny_user_info: ::models::GroupsV2GroupUserInfoCard) -> GroupsV2GroupMemberApplication {
    self.destiny_user_info = Some(destiny_user_info);
    self
  }

  pub fn destiny_user_info(&self) -> Option<&::models::GroupsV2GroupUserInfoCard> {
    self.destiny_user_info.as_ref()
  }

  pub fn reset_destiny_user_info(&mut self) {
    self.destiny_user_info = None;
  }

  pub fn set_bungie_net_user_info(&mut self, bungie_net_user_info: ::models::UserUserInfoCard) {
    self.bungie_net_user_info = Some(bungie_net_user_info);
  }

  pub fn with_bungie_net_user_info(mut self, bungie_net_user_info: ::models::UserUserInfoCard) -> GroupsV2GroupMemberApplication {
    self.bungie_net_user_info = Some(bungie_net_user_info);
    self
  }

  pub fn bungie_net_user_info(&self) -> Option<&::models::UserUserInfoCard> {
    self.bungie_net_user_info.as_ref()
  }

  pub fn reset_bungie_net_user_info(&mut self) {
    self.bungie_net_user_info = None;
  }

}



