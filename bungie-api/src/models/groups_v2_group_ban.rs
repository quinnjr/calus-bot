/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupBan {
  #[serde(rename = "groupId")]
  group_id: Option<i64>,
  #[serde(rename = "lastModifiedBy")]
  last_modified_by: Option<::models::UserUserInfoCard>,
  #[serde(rename = "createdBy")]
  created_by: Option<::models::UserUserInfoCard>,
  #[serde(rename = "dateBanned")]
  date_banned: Option<String>,
  #[serde(rename = "dateExpires")]
  date_expires: Option<String>,
  #[serde(rename = "comment")]
  comment: Option<String>,
  #[serde(rename = "bungieNetUserInfo")]
  bungie_net_user_info: Option<::models::UserUserInfoCard>,
  #[serde(rename = "destinyUserInfo")]
  destiny_user_info: Option<::models::GroupsV2GroupUserInfoCard>
}

impl GroupsV2GroupBan {
  pub fn new() -> GroupsV2GroupBan {
    GroupsV2GroupBan {
      group_id: None,
      last_modified_by: None,
      created_by: None,
      date_banned: None,
      date_expires: None,
      comment: None,
      bungie_net_user_info: None,
      destiny_user_info: None
    }
  }

  pub fn set_group_id(&mut self, group_id: i64) {
    self.group_id = Some(group_id);
  }

  pub fn with_group_id(mut self, group_id: i64) -> GroupsV2GroupBan {
    self.group_id = Some(group_id);
    self
  }

  pub fn group_id(&self) -> Option<&i64> {
    self.group_id.as_ref()
  }

  pub fn reset_group_id(&mut self) {
    self.group_id = None;
  }

  pub fn set_last_modified_by(&mut self, last_modified_by: ::models::UserUserInfoCard) {
    self.last_modified_by = Some(last_modified_by);
  }

  pub fn with_last_modified_by(mut self, last_modified_by: ::models::UserUserInfoCard) -> GroupsV2GroupBan {
    self.last_modified_by = Some(last_modified_by);
    self
  }

  pub fn last_modified_by(&self) -> Option<&::models::UserUserInfoCard> {
    self.last_modified_by.as_ref()
  }

  pub fn reset_last_modified_by(&mut self) {
    self.last_modified_by = None;
  }

  pub fn set_created_by(&mut self, created_by: ::models::UserUserInfoCard) {
    self.created_by = Some(created_by);
  }

  pub fn with_created_by(mut self, created_by: ::models::UserUserInfoCard) -> GroupsV2GroupBan {
    self.created_by = Some(created_by);
    self
  }

  pub fn created_by(&self) -> Option<&::models::UserUserInfoCard> {
    self.created_by.as_ref()
  }

  pub fn reset_created_by(&mut self) {
    self.created_by = None;
  }

  pub fn set_date_banned(&mut self, date_banned: String) {
    self.date_banned = Some(date_banned);
  }

  pub fn with_date_banned(mut self, date_banned: String) -> GroupsV2GroupBan {
    self.date_banned = Some(date_banned);
    self
  }

  pub fn date_banned(&self) -> Option<&String> {
    self.date_banned.as_ref()
  }

  pub fn reset_date_banned(&mut self) {
    self.date_banned = None;
  }

  pub fn set_date_expires(&mut self, date_expires: String) {
    self.date_expires = Some(date_expires);
  }

  pub fn with_date_expires(mut self, date_expires: String) -> GroupsV2GroupBan {
    self.date_expires = Some(date_expires);
    self
  }

  pub fn date_expires(&self) -> Option<&String> {
    self.date_expires.as_ref()
  }

  pub fn reset_date_expires(&mut self) {
    self.date_expires = None;
  }

  pub fn set_comment(&mut self, comment: String) {
    self.comment = Some(comment);
  }

  pub fn with_comment(mut self, comment: String) -> GroupsV2GroupBan {
    self.comment = Some(comment);
    self
  }

  pub fn comment(&self) -> Option<&String> {
    self.comment.as_ref()
  }

  pub fn reset_comment(&mut self) {
    self.comment = None;
  }

  pub fn set_bungie_net_user_info(&mut self, bungie_net_user_info: ::models::UserUserInfoCard) {
    self.bungie_net_user_info = Some(bungie_net_user_info);
  }

  pub fn with_bungie_net_user_info(mut self, bungie_net_user_info: ::models::UserUserInfoCard) -> GroupsV2GroupBan {
    self.bungie_net_user_info = Some(bungie_net_user_info);
    self
  }

  pub fn bungie_net_user_info(&self) -> Option<&::models::UserUserInfoCard> {
    self.bungie_net_user_info.as_ref()
  }

  pub fn reset_bungie_net_user_info(&mut self) {
    self.bungie_net_user_info = None;
  }

  pub fn set_destiny_user_info(&mut self, destiny_user_info: ::models::GroupsV2GroupUserInfoCard) {
    self.destiny_user_info = Some(destiny_user_info);
  }

  pub fn with_destiny_user_info(mut self, destiny_user_info: ::models::GroupsV2GroupUserInfoCard) -> GroupsV2GroupBan {
    self.destiny_user_info = Some(destiny_user_info);
    self
  }

  pub fn destiny_user_info(&self) -> Option<&::models::GroupsV2GroupUserInfoCard> {
    self.destiny_user_info.as_ref()
  }

  pub fn reset_destiny_user_info(&mut self) {
    self.destiny_user_info = None;
  }

}



