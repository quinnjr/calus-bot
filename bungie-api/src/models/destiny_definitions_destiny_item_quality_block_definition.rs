/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemQualityBlockDefinition : An item's \"Quality\" determines its calculated stats. The Level at which the item spawns is combined with its \"qualityLevel\" along with some additional calculations to determine the value of those stats.  In Destiny 2, most items don't have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemQualityBlockDefinition {
  /// The \"base\" defined level of an item. This is a list because, in theory, each Expansion could define its own base level for an item.  In practice, not only was that never done in Destiny 1, but now this isn't even populated at all. When it's not populated, the level at which it spawns has to be inferred by Reward information, of which BNet receives an imperfect view and will only be reliable on instanced data as a result.
  #[serde(rename = "itemLevels")]
  item_levels: Option<Vec<i32>>,
  /// qualityLevel is used in combination with the item's level to calculate stats like Attack and Defense. It plays a role in that calculation, but not nearly as large as itemLevel does.
  #[serde(rename = "qualityLevel")]
  quality_level: Option<i32>,
  /// The string identifier for this item's \"infusability\", if any.   Items that match the same infusionCategoryName are allowed to infuse with each other.  DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
  #[serde(rename = "infusionCategoryName")]
  infusion_category_name: Option<String>,
  /// The hash identifier for the infusion. It does not map to a Definition entity.  DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
  #[serde(rename = "infusionCategoryHash")]
  infusion_category_hash: Option<i32>,
  /// If any one of these hashes matches any value in another item's infusionCategoryHashes, the two can infuse with each other.
  #[serde(rename = "infusionCategoryHashes")]
  infusion_category_hashes: Option<Vec<i32>>,
  /// An item can refer to pre-set level requirements. They are defined in DestinyProgressionLevelRequirementDefinition, and you can use this hash to find the appropriate definition.
  #[serde(rename = "progressionLevelRequirementHash")]
  progression_level_requirement_hash: Option<i32>
}

impl DestinyDefinitionsDestinyItemQualityBlockDefinition {
  /// An item's \"Quality\" determines its calculated stats. The Level at which the item spawns is combined with its \"qualityLevel\" along with some additional calculations to determine the value of those stats.  In Destiny 2, most items don't have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.
  pub fn new() -> DestinyDefinitionsDestinyItemQualityBlockDefinition {
    DestinyDefinitionsDestinyItemQualityBlockDefinition {
      item_levels: None,
      quality_level: None,
      infusion_category_name: None,
      infusion_category_hash: None,
      infusion_category_hashes: None,
      progression_level_requirement_hash: None
    }
  }

  pub fn set_item_levels(&mut self, item_levels: Vec<i32>) {
    self.item_levels = Some(item_levels);
  }

  pub fn with_item_levels(mut self, item_levels: Vec<i32>) -> DestinyDefinitionsDestinyItemQualityBlockDefinition {
    self.item_levels = Some(item_levels);
    self
  }

  pub fn item_levels(&self) -> Option<&Vec<i32>> {
    self.item_levels.as_ref()
  }

  pub fn reset_item_levels(&mut self) {
    self.item_levels = None;
  }

  pub fn set_quality_level(&mut self, quality_level: i32) {
    self.quality_level = Some(quality_level);
  }

  pub fn with_quality_level(mut self, quality_level: i32) -> DestinyDefinitionsDestinyItemQualityBlockDefinition {
    self.quality_level = Some(quality_level);
    self
  }

  pub fn quality_level(&self) -> Option<&i32> {
    self.quality_level.as_ref()
  }

  pub fn reset_quality_level(&mut self) {
    self.quality_level = None;
  }

  pub fn set_infusion_category_name(&mut self, infusion_category_name: String) {
    self.infusion_category_name = Some(infusion_category_name);
  }

  pub fn with_infusion_category_name(mut self, infusion_category_name: String) -> DestinyDefinitionsDestinyItemQualityBlockDefinition {
    self.infusion_category_name = Some(infusion_category_name);
    self
  }

  pub fn infusion_category_name(&self) -> Option<&String> {
    self.infusion_category_name.as_ref()
  }

  pub fn reset_infusion_category_name(&mut self) {
    self.infusion_category_name = None;
  }

  pub fn set_infusion_category_hash(&mut self, infusion_category_hash: i32) {
    self.infusion_category_hash = Some(infusion_category_hash);
  }

  pub fn with_infusion_category_hash(mut self, infusion_category_hash: i32) -> DestinyDefinitionsDestinyItemQualityBlockDefinition {
    self.infusion_category_hash = Some(infusion_category_hash);
    self
  }

  pub fn infusion_category_hash(&self) -> Option<&i32> {
    self.infusion_category_hash.as_ref()
  }

  pub fn reset_infusion_category_hash(&mut self) {
    self.infusion_category_hash = None;
  }

  pub fn set_infusion_category_hashes(&mut self, infusion_category_hashes: Vec<i32>) {
    self.infusion_category_hashes = Some(infusion_category_hashes);
  }

  pub fn with_infusion_category_hashes(mut self, infusion_category_hashes: Vec<i32>) -> DestinyDefinitionsDestinyItemQualityBlockDefinition {
    self.infusion_category_hashes = Some(infusion_category_hashes);
    self
  }

  pub fn infusion_category_hashes(&self) -> Option<&Vec<i32>> {
    self.infusion_category_hashes.as_ref()
  }

  pub fn reset_infusion_category_hashes(&mut self) {
    self.infusion_category_hashes = None;
  }

  pub fn set_progression_level_requirement_hash(&mut self, progression_level_requirement_hash: i32) {
    self.progression_level_requirement_hash = Some(progression_level_requirement_hash);
  }

  pub fn with_progression_level_requirement_hash(mut self, progression_level_requirement_hash: i32) -> DestinyDefinitionsDestinyItemQualityBlockDefinition {
    self.progression_level_requirement_hash = Some(progression_level_requirement_hash);
    self
  }

  pub fn progression_level_requirement_hash(&self) -> Option<&i32> {
    self.progression_level_requirement_hash.as_ref()
  }

  pub fn reset_progression_level_requirement_hash(&mut self) {
    self.progression_level_requirement_hash = None;
  }

}



