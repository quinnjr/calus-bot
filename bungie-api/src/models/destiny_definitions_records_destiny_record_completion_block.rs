/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
  /// The number of objectives that must be completed before the objective is considered \"complete\"
  #[serde(rename = "partialCompletionObjectiveCountThreshold")]
  partial_completion_objective_count_threshold: Option<i32>,
  #[serde(rename = "ScoreValue")]
  score_value: Option<i32>,
  #[serde(rename = "shouldFireToast")]
  should_fire_toast: Option<bool>,
  #[serde(rename = "toastStyle")]
  toast_style: Option<i32>
}

impl DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
  pub fn new() -> DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
    DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
      partial_completion_objective_count_threshold: None,
      score_value: None,
      should_fire_toast: None,
      toast_style: None
    }
  }

  pub fn set_partial_completion_objective_count_threshold(&mut self, partial_completion_objective_count_threshold: i32) {
    self.partial_completion_objective_count_threshold = Some(partial_completion_objective_count_threshold);
  }

  pub fn with_partial_completion_objective_count_threshold(mut self, partial_completion_objective_count_threshold: i32) -> DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
    self.partial_completion_objective_count_threshold = Some(partial_completion_objective_count_threshold);
    self
  }

  pub fn partial_completion_objective_count_threshold(&self) -> Option<&i32> {
    self.partial_completion_objective_count_threshold.as_ref()
  }

  pub fn reset_partial_completion_objective_count_threshold(&mut self) {
    self.partial_completion_objective_count_threshold = None;
  }

  pub fn set_score_value(&mut self, score_value: i32) {
    self.score_value = Some(score_value);
  }

  pub fn with_score_value(mut self, score_value: i32) -> DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
    self.score_value = Some(score_value);
    self
  }

  pub fn score_value(&self) -> Option<&i32> {
    self.score_value.as_ref()
  }

  pub fn reset_score_value(&mut self) {
    self.score_value = None;
  }

  pub fn set_should_fire_toast(&mut self, should_fire_toast: bool) {
    self.should_fire_toast = Some(should_fire_toast);
  }

  pub fn with_should_fire_toast(mut self, should_fire_toast: bool) -> DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
    self.should_fire_toast = Some(should_fire_toast);
    self
  }

  pub fn should_fire_toast(&self) -> Option<&bool> {
    self.should_fire_toast.as_ref()
  }

  pub fn reset_should_fire_toast(&mut self) {
    self.should_fire_toast = None;
  }

  pub fn set_toast_style(&mut self, toast_style: i32) {
    self.toast_style = Some(toast_style);
  }

  pub fn with_toast_style(mut self, toast_style: i32) -> DestinyDefinitionsRecordsDestinyRecordCompletionBlock {
    self.toast_style = Some(toast_style);
    self
  }

  pub fn toast_style(&self) -> Option<&i32> {
    self.toast_style.as_ref()
  }

  pub fn reset_toast_style(&mut self) {
    self.toast_style = None;
  }

}



