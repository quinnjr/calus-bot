/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupV2 {
  #[serde(rename = "groupId")]
  group_id: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "groupType")]
  group_type: Option<i32>,
  #[serde(rename = "membershipIdCreated")]
  membership_id_created: Option<i64>,
  #[serde(rename = "creationDate")]
  creation_date: Option<String>,
  #[serde(rename = "modificationDate")]
  modification_date: Option<String>,
  #[serde(rename = "about")]
  about: Option<String>,
  #[serde(rename = "tags")]
  tags: Option<Vec<String>>,
  #[serde(rename = "memberCount")]
  member_count: Option<i32>,
  #[serde(rename = "isPublic")]
  is_public: Option<bool>,
  #[serde(rename = "isPublicTopicAdminOnly")]
  is_public_topic_admin_only: Option<bool>,
  #[serde(rename = "motto")]
  motto: Option<String>,
  #[serde(rename = "allowChat")]
  allow_chat: Option<bool>,
  #[serde(rename = "isDefaultPostPublic")]
  is_default_post_public: Option<bool>,
  #[serde(rename = "chatSecurity")]
  chat_security: Option<i32>,
  #[serde(rename = "locale")]
  locale: Option<String>,
  #[serde(rename = "avatarImageIndex")]
  avatar_image_index: Option<i32>,
  #[serde(rename = "homepage")]
  homepage: Option<i32>,
  #[serde(rename = "membershipOption")]
  membership_option: Option<i32>,
  #[serde(rename = "defaultPublicity")]
  default_publicity: Option<i32>,
  #[serde(rename = "theme")]
  theme: Option<String>,
  #[serde(rename = "bannerPath")]
  banner_path: Option<String>,
  #[serde(rename = "avatarPath")]
  avatar_path: Option<String>,
  #[serde(rename = "conversationId")]
  conversation_id: Option<i64>,
  #[serde(rename = "enableInvitationMessagingForAdmins")]
  enable_invitation_messaging_for_admins: Option<bool>,
  #[serde(rename = "banExpireDate")]
  ban_expire_date: Option<String>,
  #[serde(rename = "features")]
  features: Option<::models::GroupsV2GroupFeatures>,
  #[serde(rename = "clanInfo")]
  clan_info: Option<::models::GroupsV2GroupV2ClanInfoAndInvestment>
}

impl GroupsV2GroupV2 {
  pub fn new() -> GroupsV2GroupV2 {
    GroupsV2GroupV2 {
      group_id: None,
      name: None,
      group_type: None,
      membership_id_created: None,
      creation_date: None,
      modification_date: None,
      about: None,
      tags: None,
      member_count: None,
      is_public: None,
      is_public_topic_admin_only: None,
      motto: None,
      allow_chat: None,
      is_default_post_public: None,
      chat_security: None,
      locale: None,
      avatar_image_index: None,
      homepage: None,
      membership_option: None,
      default_publicity: None,
      theme: None,
      banner_path: None,
      avatar_path: None,
      conversation_id: None,
      enable_invitation_messaging_for_admins: None,
      ban_expire_date: None,
      features: None,
      clan_info: None
    }
  }

  pub fn set_group_id(&mut self, group_id: i64) {
    self.group_id = Some(group_id);
  }

  pub fn with_group_id(mut self, group_id: i64) -> GroupsV2GroupV2 {
    self.group_id = Some(group_id);
    self
  }

  pub fn group_id(&self) -> Option<&i64> {
    self.group_id.as_ref()
  }

  pub fn reset_group_id(&mut self) {
    self.group_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GroupsV2GroupV2 {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_group_type(&mut self, group_type: i32) {
    self.group_type = Some(group_type);
  }

  pub fn with_group_type(mut self, group_type: i32) -> GroupsV2GroupV2 {
    self.group_type = Some(group_type);
    self
  }

  pub fn group_type(&self) -> Option<&i32> {
    self.group_type.as_ref()
  }

  pub fn reset_group_type(&mut self) {
    self.group_type = None;
  }

  pub fn set_membership_id_created(&mut self, membership_id_created: i64) {
    self.membership_id_created = Some(membership_id_created);
  }

  pub fn with_membership_id_created(mut self, membership_id_created: i64) -> GroupsV2GroupV2 {
    self.membership_id_created = Some(membership_id_created);
    self
  }

  pub fn membership_id_created(&self) -> Option<&i64> {
    self.membership_id_created.as_ref()
  }

  pub fn reset_membership_id_created(&mut self) {
    self.membership_id_created = None;
  }

  pub fn set_creation_date(&mut self, creation_date: String) {
    self.creation_date = Some(creation_date);
  }

  pub fn with_creation_date(mut self, creation_date: String) -> GroupsV2GroupV2 {
    self.creation_date = Some(creation_date);
    self
  }

  pub fn creation_date(&self) -> Option<&String> {
    self.creation_date.as_ref()
  }

  pub fn reset_creation_date(&mut self) {
    self.creation_date = None;
  }

  pub fn set_modification_date(&mut self, modification_date: String) {
    self.modification_date = Some(modification_date);
  }

  pub fn with_modification_date(mut self, modification_date: String) -> GroupsV2GroupV2 {
    self.modification_date = Some(modification_date);
    self
  }

  pub fn modification_date(&self) -> Option<&String> {
    self.modification_date.as_ref()
  }

  pub fn reset_modification_date(&mut self) {
    self.modification_date = None;
  }

  pub fn set_about(&mut self, about: String) {
    self.about = Some(about);
  }

  pub fn with_about(mut self, about: String) -> GroupsV2GroupV2 {
    self.about = Some(about);
    self
  }

  pub fn about(&self) -> Option<&String> {
    self.about.as_ref()
  }

  pub fn reset_about(&mut self) {
    self.about = None;
  }

  pub fn set_tags(&mut self, tags: Vec<String>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<String>) -> GroupsV2GroupV2 {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&Vec<String>> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_member_count(&mut self, member_count: i32) {
    self.member_count = Some(member_count);
  }

  pub fn with_member_count(mut self, member_count: i32) -> GroupsV2GroupV2 {
    self.member_count = Some(member_count);
    self
  }

  pub fn member_count(&self) -> Option<&i32> {
    self.member_count.as_ref()
  }

  pub fn reset_member_count(&mut self) {
    self.member_count = None;
  }

  pub fn set_is_public(&mut self, is_public: bool) {
    self.is_public = Some(is_public);
  }

  pub fn with_is_public(mut self, is_public: bool) -> GroupsV2GroupV2 {
    self.is_public = Some(is_public);
    self
  }

  pub fn is_public(&self) -> Option<&bool> {
    self.is_public.as_ref()
  }

  pub fn reset_is_public(&mut self) {
    self.is_public = None;
  }

  pub fn set_is_public_topic_admin_only(&mut self, is_public_topic_admin_only: bool) {
    self.is_public_topic_admin_only = Some(is_public_topic_admin_only);
  }

  pub fn with_is_public_topic_admin_only(mut self, is_public_topic_admin_only: bool) -> GroupsV2GroupV2 {
    self.is_public_topic_admin_only = Some(is_public_topic_admin_only);
    self
  }

  pub fn is_public_topic_admin_only(&self) -> Option<&bool> {
    self.is_public_topic_admin_only.as_ref()
  }

  pub fn reset_is_public_topic_admin_only(&mut self) {
    self.is_public_topic_admin_only = None;
  }

  pub fn set_motto(&mut self, motto: String) {
    self.motto = Some(motto);
  }

  pub fn with_motto(mut self, motto: String) -> GroupsV2GroupV2 {
    self.motto = Some(motto);
    self
  }

  pub fn motto(&self) -> Option<&String> {
    self.motto.as_ref()
  }

  pub fn reset_motto(&mut self) {
    self.motto = None;
  }

  pub fn set_allow_chat(&mut self, allow_chat: bool) {
    self.allow_chat = Some(allow_chat);
  }

  pub fn with_allow_chat(mut self, allow_chat: bool) -> GroupsV2GroupV2 {
    self.allow_chat = Some(allow_chat);
    self
  }

  pub fn allow_chat(&self) -> Option<&bool> {
    self.allow_chat.as_ref()
  }

  pub fn reset_allow_chat(&mut self) {
    self.allow_chat = None;
  }

  pub fn set_is_default_post_public(&mut self, is_default_post_public: bool) {
    self.is_default_post_public = Some(is_default_post_public);
  }

  pub fn with_is_default_post_public(mut self, is_default_post_public: bool) -> GroupsV2GroupV2 {
    self.is_default_post_public = Some(is_default_post_public);
    self
  }

  pub fn is_default_post_public(&self) -> Option<&bool> {
    self.is_default_post_public.as_ref()
  }

  pub fn reset_is_default_post_public(&mut self) {
    self.is_default_post_public = None;
  }

  pub fn set_chat_security(&mut self, chat_security: i32) {
    self.chat_security = Some(chat_security);
  }

  pub fn with_chat_security(mut self, chat_security: i32) -> GroupsV2GroupV2 {
    self.chat_security = Some(chat_security);
    self
  }

  pub fn chat_security(&self) -> Option<&i32> {
    self.chat_security.as_ref()
  }

  pub fn reset_chat_security(&mut self) {
    self.chat_security = None;
  }

  pub fn set_locale(&mut self, locale: String) {
    self.locale = Some(locale);
  }

  pub fn with_locale(mut self, locale: String) -> GroupsV2GroupV2 {
    self.locale = Some(locale);
    self
  }

  pub fn locale(&self) -> Option<&String> {
    self.locale.as_ref()
  }

  pub fn reset_locale(&mut self) {
    self.locale = None;
  }

  pub fn set_avatar_image_index(&mut self, avatar_image_index: i32) {
    self.avatar_image_index = Some(avatar_image_index);
  }

  pub fn with_avatar_image_index(mut self, avatar_image_index: i32) -> GroupsV2GroupV2 {
    self.avatar_image_index = Some(avatar_image_index);
    self
  }

  pub fn avatar_image_index(&self) -> Option<&i32> {
    self.avatar_image_index.as_ref()
  }

  pub fn reset_avatar_image_index(&mut self) {
    self.avatar_image_index = None;
  }

  pub fn set_homepage(&mut self, homepage: i32) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: i32) -> GroupsV2GroupV2 {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&i32> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_membership_option(&mut self, membership_option: i32) {
    self.membership_option = Some(membership_option);
  }

  pub fn with_membership_option(mut self, membership_option: i32) -> GroupsV2GroupV2 {
    self.membership_option = Some(membership_option);
    self
  }

  pub fn membership_option(&self) -> Option<&i32> {
    self.membership_option.as_ref()
  }

  pub fn reset_membership_option(&mut self) {
    self.membership_option = None;
  }

  pub fn set_default_publicity(&mut self, default_publicity: i32) {
    self.default_publicity = Some(default_publicity);
  }

  pub fn with_default_publicity(mut self, default_publicity: i32) -> GroupsV2GroupV2 {
    self.default_publicity = Some(default_publicity);
    self
  }

  pub fn default_publicity(&self) -> Option<&i32> {
    self.default_publicity.as_ref()
  }

  pub fn reset_default_publicity(&mut self) {
    self.default_publicity = None;
  }

  pub fn set_theme(&mut self, theme: String) {
    self.theme = Some(theme);
  }

  pub fn with_theme(mut self, theme: String) -> GroupsV2GroupV2 {
    self.theme = Some(theme);
    self
  }

  pub fn theme(&self) -> Option<&String> {
    self.theme.as_ref()
  }

  pub fn reset_theme(&mut self) {
    self.theme = None;
  }

  pub fn set_banner_path(&mut self, banner_path: String) {
    self.banner_path = Some(banner_path);
  }

  pub fn with_banner_path(mut self, banner_path: String) -> GroupsV2GroupV2 {
    self.banner_path = Some(banner_path);
    self
  }

  pub fn banner_path(&self) -> Option<&String> {
    self.banner_path.as_ref()
  }

  pub fn reset_banner_path(&mut self) {
    self.banner_path = None;
  }

  pub fn set_avatar_path(&mut self, avatar_path: String) {
    self.avatar_path = Some(avatar_path);
  }

  pub fn with_avatar_path(mut self, avatar_path: String) -> GroupsV2GroupV2 {
    self.avatar_path = Some(avatar_path);
    self
  }

  pub fn avatar_path(&self) -> Option<&String> {
    self.avatar_path.as_ref()
  }

  pub fn reset_avatar_path(&mut self) {
    self.avatar_path = None;
  }

  pub fn set_conversation_id(&mut self, conversation_id: i64) {
    self.conversation_id = Some(conversation_id);
  }

  pub fn with_conversation_id(mut self, conversation_id: i64) -> GroupsV2GroupV2 {
    self.conversation_id = Some(conversation_id);
    self
  }

  pub fn conversation_id(&self) -> Option<&i64> {
    self.conversation_id.as_ref()
  }

  pub fn reset_conversation_id(&mut self) {
    self.conversation_id = None;
  }

  pub fn set_enable_invitation_messaging_for_admins(&mut self, enable_invitation_messaging_for_admins: bool) {
    self.enable_invitation_messaging_for_admins = Some(enable_invitation_messaging_for_admins);
  }

  pub fn with_enable_invitation_messaging_for_admins(mut self, enable_invitation_messaging_for_admins: bool) -> GroupsV2GroupV2 {
    self.enable_invitation_messaging_for_admins = Some(enable_invitation_messaging_for_admins);
    self
  }

  pub fn enable_invitation_messaging_for_admins(&self) -> Option<&bool> {
    self.enable_invitation_messaging_for_admins.as_ref()
  }

  pub fn reset_enable_invitation_messaging_for_admins(&mut self) {
    self.enable_invitation_messaging_for_admins = None;
  }

  pub fn set_ban_expire_date(&mut self, ban_expire_date: String) {
    self.ban_expire_date = Some(ban_expire_date);
  }

  pub fn with_ban_expire_date(mut self, ban_expire_date: String) -> GroupsV2GroupV2 {
    self.ban_expire_date = Some(ban_expire_date);
    self
  }

  pub fn ban_expire_date(&self) -> Option<&String> {
    self.ban_expire_date.as_ref()
  }

  pub fn reset_ban_expire_date(&mut self) {
    self.ban_expire_date = None;
  }

  pub fn set_features(&mut self, features: ::models::GroupsV2GroupFeatures) {
    self.features = Some(features);
  }

  pub fn with_features(mut self, features: ::models::GroupsV2GroupFeatures) -> GroupsV2GroupV2 {
    self.features = Some(features);
    self
  }

  pub fn features(&self) -> Option<&::models::GroupsV2GroupFeatures> {
    self.features.as_ref()
  }

  pub fn reset_features(&mut self) {
    self.features = None;
  }

  pub fn set_clan_info(&mut self, clan_info: ::models::GroupsV2GroupV2ClanInfoAndInvestment) {
    self.clan_info = Some(clan_info);
  }

  pub fn with_clan_info(mut self, clan_info: ::models::GroupsV2GroupV2ClanInfoAndInvestment) -> GroupsV2GroupV2 {
    self.clan_info = Some(clan_info);
    self
  }

  pub fn clan_info(&self) -> Option<&::models::GroupsV2GroupV2ClanInfoAndInvestment> {
    self.clan_info.as_ref()
  }

  pub fn reset_clan_info(&mut self) {
    self.clan_info = None;
  }

}



