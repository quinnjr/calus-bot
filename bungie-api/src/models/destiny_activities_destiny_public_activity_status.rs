/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyActivitiesDestinyPublicActivityStatus : Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character's progress in it.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyActivitiesDestinyPublicActivityStatus {
  /// Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.
  #[serde(rename = "challengeObjectiveHashes")]
  challenge_objective_hashes: Option<Vec<i32>>,
  /// The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.
  #[serde(rename = "modifierHashes")]
  modifier_hashes: Option<Vec<i32>>,
  /// If the activity itself provides any specific \"mock\" rewards, this will be the items and their quantity.  Why \"mock\", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.  These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.
  #[serde(rename = "rewardTooltipItems")]
  reward_tooltip_items: Option<Vec<::models::DestinyDestinyItemQuantity>>
}

impl DestinyActivitiesDestinyPublicActivityStatus {
  /// Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character's progress in it.
  pub fn new() -> DestinyActivitiesDestinyPublicActivityStatus {
    DestinyActivitiesDestinyPublicActivityStatus {
      challenge_objective_hashes: None,
      modifier_hashes: None,
      reward_tooltip_items: None
    }
  }

  pub fn set_challenge_objective_hashes(&mut self, challenge_objective_hashes: Vec<i32>) {
    self.challenge_objective_hashes = Some(challenge_objective_hashes);
  }

  pub fn with_challenge_objective_hashes(mut self, challenge_objective_hashes: Vec<i32>) -> DestinyActivitiesDestinyPublicActivityStatus {
    self.challenge_objective_hashes = Some(challenge_objective_hashes);
    self
  }

  pub fn challenge_objective_hashes(&self) -> Option<&Vec<i32>> {
    self.challenge_objective_hashes.as_ref()
  }

  pub fn reset_challenge_objective_hashes(&mut self) {
    self.challenge_objective_hashes = None;
  }

  pub fn set_modifier_hashes(&mut self, modifier_hashes: Vec<i32>) {
    self.modifier_hashes = Some(modifier_hashes);
  }

  pub fn with_modifier_hashes(mut self, modifier_hashes: Vec<i32>) -> DestinyActivitiesDestinyPublicActivityStatus {
    self.modifier_hashes = Some(modifier_hashes);
    self
  }

  pub fn modifier_hashes(&self) -> Option<&Vec<i32>> {
    self.modifier_hashes.as_ref()
  }

  pub fn reset_modifier_hashes(&mut self) {
    self.modifier_hashes = None;
  }

  pub fn set_reward_tooltip_items(&mut self, reward_tooltip_items: Vec<::models::DestinyDestinyItemQuantity>) {
    self.reward_tooltip_items = Some(reward_tooltip_items);
  }

  pub fn with_reward_tooltip_items(mut self, reward_tooltip_items: Vec<::models::DestinyDestinyItemQuantity>) -> DestinyActivitiesDestinyPublicActivityStatus {
    self.reward_tooltip_items = Some(reward_tooltip_items);
    self
  }

  pub fn reward_tooltip_items(&self) -> Option<&Vec<::models::DestinyDestinyItemQuantity>> {
    self.reward_tooltip_items.as_ref()
  }

  pub fn reset_reward_tooltip_items(&mut self) {
    self.reward_tooltip_items = None;
  }

}



