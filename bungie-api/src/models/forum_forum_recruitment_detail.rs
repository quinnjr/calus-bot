/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ForumForumRecruitmentDetail {
  #[serde(rename = "topicId")]
  topic_id: Option<i64>,
  #[serde(rename = "microphoneRequired")]
  microphone_required: Option<bool>,
  #[serde(rename = "intensity")]
  intensity: Option<i32>,
  #[serde(rename = "tone")]
  tone: Option<i32>,
  #[serde(rename = "approved")]
  approved: Option<bool>,
  #[serde(rename = "conversationId")]
  conversation_id: Option<i64>,
  #[serde(rename = "playerSlotsTotal")]
  player_slots_total: Option<i32>,
  #[serde(rename = "playerSlotsRemaining")]
  player_slots_remaining: Option<i32>,
  #[serde(rename = "Fireteam")]
  fireteam: Option<Vec<::models::UserGeneralUser>>,
  #[serde(rename = "kickedPlayerIds")]
  kicked_player_ids: Option<Vec<i64>>
}

impl ForumForumRecruitmentDetail {
  pub fn new() -> ForumForumRecruitmentDetail {
    ForumForumRecruitmentDetail {
      topic_id: None,
      microphone_required: None,
      intensity: None,
      tone: None,
      approved: None,
      conversation_id: None,
      player_slots_total: None,
      player_slots_remaining: None,
      fireteam: None,
      kicked_player_ids: None
    }
  }

  pub fn set_topic_id(&mut self, topic_id: i64) {
    self.topic_id = Some(topic_id);
  }

  pub fn with_topic_id(mut self, topic_id: i64) -> ForumForumRecruitmentDetail {
    self.topic_id = Some(topic_id);
    self
  }

  pub fn topic_id(&self) -> Option<&i64> {
    self.topic_id.as_ref()
  }

  pub fn reset_topic_id(&mut self) {
    self.topic_id = None;
  }

  pub fn set_microphone_required(&mut self, microphone_required: bool) {
    self.microphone_required = Some(microphone_required);
  }

  pub fn with_microphone_required(mut self, microphone_required: bool) -> ForumForumRecruitmentDetail {
    self.microphone_required = Some(microphone_required);
    self
  }

  pub fn microphone_required(&self) -> Option<&bool> {
    self.microphone_required.as_ref()
  }

  pub fn reset_microphone_required(&mut self) {
    self.microphone_required = None;
  }

  pub fn set_intensity(&mut self, intensity: i32) {
    self.intensity = Some(intensity);
  }

  pub fn with_intensity(mut self, intensity: i32) -> ForumForumRecruitmentDetail {
    self.intensity = Some(intensity);
    self
  }

  pub fn intensity(&self) -> Option<&i32> {
    self.intensity.as_ref()
  }

  pub fn reset_intensity(&mut self) {
    self.intensity = None;
  }

  pub fn set_tone(&mut self, tone: i32) {
    self.tone = Some(tone);
  }

  pub fn with_tone(mut self, tone: i32) -> ForumForumRecruitmentDetail {
    self.tone = Some(tone);
    self
  }

  pub fn tone(&self) -> Option<&i32> {
    self.tone.as_ref()
  }

  pub fn reset_tone(&mut self) {
    self.tone = None;
  }

  pub fn set_approved(&mut self, approved: bool) {
    self.approved = Some(approved);
  }

  pub fn with_approved(mut self, approved: bool) -> ForumForumRecruitmentDetail {
    self.approved = Some(approved);
    self
  }

  pub fn approved(&self) -> Option<&bool> {
    self.approved.as_ref()
  }

  pub fn reset_approved(&mut self) {
    self.approved = None;
  }

  pub fn set_conversation_id(&mut self, conversation_id: i64) {
    self.conversation_id = Some(conversation_id);
  }

  pub fn with_conversation_id(mut self, conversation_id: i64) -> ForumForumRecruitmentDetail {
    self.conversation_id = Some(conversation_id);
    self
  }

  pub fn conversation_id(&self) -> Option<&i64> {
    self.conversation_id.as_ref()
  }

  pub fn reset_conversation_id(&mut self) {
    self.conversation_id = None;
  }

  pub fn set_player_slots_total(&mut self, player_slots_total: i32) {
    self.player_slots_total = Some(player_slots_total);
  }

  pub fn with_player_slots_total(mut self, player_slots_total: i32) -> ForumForumRecruitmentDetail {
    self.player_slots_total = Some(player_slots_total);
    self
  }

  pub fn player_slots_total(&self) -> Option<&i32> {
    self.player_slots_total.as_ref()
  }

  pub fn reset_player_slots_total(&mut self) {
    self.player_slots_total = None;
  }

  pub fn set_player_slots_remaining(&mut self, player_slots_remaining: i32) {
    self.player_slots_remaining = Some(player_slots_remaining);
  }

  pub fn with_player_slots_remaining(mut self, player_slots_remaining: i32) -> ForumForumRecruitmentDetail {
    self.player_slots_remaining = Some(player_slots_remaining);
    self
  }

  pub fn player_slots_remaining(&self) -> Option<&i32> {
    self.player_slots_remaining.as_ref()
  }

  pub fn reset_player_slots_remaining(&mut self) {
    self.player_slots_remaining = None;
  }

  pub fn set_fireteam(&mut self, fireteam: Vec<::models::UserGeneralUser>) {
    self.fireteam = Some(fireteam);
  }

  pub fn with_fireteam(mut self, fireteam: Vec<::models::UserGeneralUser>) -> ForumForumRecruitmentDetail {
    self.fireteam = Some(fireteam);
    self
  }

  pub fn fireteam(&self) -> Option<&Vec<::models::UserGeneralUser>> {
    self.fireteam.as_ref()
  }

  pub fn reset_fireteam(&mut self) {
    self.fireteam = None;
  }

  pub fn set_kicked_player_ids(&mut self, kicked_player_ids: Vec<i64>) {
    self.kicked_player_ids = Some(kicked_player_ids);
  }

  pub fn with_kicked_player_ids(mut self, kicked_player_ids: Vec<i64>) -> ForumForumRecruitmentDetail {
    self.kicked_player_ids = Some(kicked_player_ids);
    self
  }

  pub fn kicked_player_ids(&self) -> Option<&Vec<i64>> {
    self.kicked_player_ids.as_ref()
  }

  pub fn reset_kicked_player_ids(&mut self) {
    self.kicked_player_ids = None;
  }

}



