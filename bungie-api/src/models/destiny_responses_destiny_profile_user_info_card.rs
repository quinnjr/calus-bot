/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyProfileUserInfoCard {
  #[serde(rename = "dateLastPlayed")]
  date_last_played: Option<String>,
  /// If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.
  #[serde(rename = "isOverridden")]
  is_overridden: Option<bool>,
  /// If true, this account is hooked up as the \"Primary\" cross save account for one or more platforms.
  #[serde(rename = "isCrossSavePrimary")]
  is_cross_save_primary: Option<bool>,
  /// This is the silver available on this Profile across any platforms on which they have purchased silver.   This is only available if you are requesting yourself.
  #[serde(rename = "platformSilver")]
  platform_silver: Option<Value>,
  /// If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile's original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can't get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.
  #[serde(rename = "unpairedGameVersions")]
  unpaired_game_versions: Option<i32>,
  /// A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
  #[serde(rename = "supplementalDisplayName")]
  supplemental_display_name: Option<String>,
  /// URL the Icon if available.
  #[serde(rename = "iconPath")]
  icon_path: Option<String>,
  /// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
  #[serde(rename = "crossSaveOverride")]
  cross_save_override: Option<i32>,
  /// The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
  #[serde(rename = "applicableMembershipTypes")]
  applicable_membership_types: Option<Vec<i32>>,
  /// If True, this is a public user membership.
  #[serde(rename = "isPublic")]
  is_public: Option<bool>,
  /// Type of the membership. Not necessarily the native type.
  #[serde(rename = "membershipType")]
  membership_type: Option<i32>,
  /// Membership ID as they user is known in the Accounts service
  #[serde(rename = "membershipId")]
  membership_id: Option<i64>,
  /// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
  #[serde(rename = "displayName")]
  display_name: Option<String>
}

impl DestinyResponsesDestinyProfileUserInfoCard {
  pub fn new() -> DestinyResponsesDestinyProfileUserInfoCard {
    DestinyResponsesDestinyProfileUserInfoCard {
      date_last_played: None,
      is_overridden: None,
      is_cross_save_primary: None,
      platform_silver: None,
      unpaired_game_versions: None,
      supplemental_display_name: None,
      icon_path: None,
      cross_save_override: None,
      applicable_membership_types: None,
      is_public: None,
      membership_type: None,
      membership_id: None,
      display_name: None
    }
  }

  pub fn set_date_last_played(&mut self, date_last_played: String) {
    self.date_last_played = Some(date_last_played);
  }

  pub fn with_date_last_played(mut self, date_last_played: String) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.date_last_played = Some(date_last_played);
    self
  }

  pub fn date_last_played(&self) -> Option<&String> {
    self.date_last_played.as_ref()
  }

  pub fn reset_date_last_played(&mut self) {
    self.date_last_played = None;
  }

  pub fn set_is_overridden(&mut self, is_overridden: bool) {
    self.is_overridden = Some(is_overridden);
  }

  pub fn with_is_overridden(mut self, is_overridden: bool) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.is_overridden = Some(is_overridden);
    self
  }

  pub fn is_overridden(&self) -> Option<&bool> {
    self.is_overridden.as_ref()
  }

  pub fn reset_is_overridden(&mut self) {
    self.is_overridden = None;
  }

  pub fn set_is_cross_save_primary(&mut self, is_cross_save_primary: bool) {
    self.is_cross_save_primary = Some(is_cross_save_primary);
  }

  pub fn with_is_cross_save_primary(mut self, is_cross_save_primary: bool) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.is_cross_save_primary = Some(is_cross_save_primary);
    self
  }

  pub fn is_cross_save_primary(&self) -> Option<&bool> {
    self.is_cross_save_primary.as_ref()
  }

  pub fn reset_is_cross_save_primary(&mut self) {
    self.is_cross_save_primary = None;
  }

  pub fn set_platform_silver(&mut self, platform_silver: Value) {
    self.platform_silver = Some(platform_silver);
  }

  pub fn with_platform_silver(mut self, platform_silver: Value) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.platform_silver = Some(platform_silver);
    self
  }

  pub fn platform_silver(&self) -> Option<&Value> {
    self.platform_silver.as_ref()
  }

  pub fn reset_platform_silver(&mut self) {
    self.platform_silver = None;
  }

  pub fn set_unpaired_game_versions(&mut self, unpaired_game_versions: i32) {
    self.unpaired_game_versions = Some(unpaired_game_versions);
  }

  pub fn with_unpaired_game_versions(mut self, unpaired_game_versions: i32) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.unpaired_game_versions = Some(unpaired_game_versions);
    self
  }

  pub fn unpaired_game_versions(&self) -> Option<&i32> {
    self.unpaired_game_versions.as_ref()
  }

  pub fn reset_unpaired_game_versions(&mut self) {
    self.unpaired_game_versions = None;
  }

  pub fn set_supplemental_display_name(&mut self, supplemental_display_name: String) {
    self.supplemental_display_name = Some(supplemental_display_name);
  }

  pub fn with_supplemental_display_name(mut self, supplemental_display_name: String) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.supplemental_display_name = Some(supplemental_display_name);
    self
  }

  pub fn supplemental_display_name(&self) -> Option<&String> {
    self.supplemental_display_name.as_ref()
  }

  pub fn reset_supplemental_display_name(&mut self) {
    self.supplemental_display_name = None;
  }

  pub fn set_icon_path(&mut self, icon_path: String) {
    self.icon_path = Some(icon_path);
  }

  pub fn with_icon_path(mut self, icon_path: String) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.icon_path = Some(icon_path);
    self
  }

  pub fn icon_path(&self) -> Option<&String> {
    self.icon_path.as_ref()
  }

  pub fn reset_icon_path(&mut self) {
    self.icon_path = None;
  }

  pub fn set_cross_save_override(&mut self, cross_save_override: i32) {
    self.cross_save_override = Some(cross_save_override);
  }

  pub fn with_cross_save_override(mut self, cross_save_override: i32) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.cross_save_override = Some(cross_save_override);
    self
  }

  pub fn cross_save_override(&self) -> Option<&i32> {
    self.cross_save_override.as_ref()
  }

  pub fn reset_cross_save_override(&mut self) {
    self.cross_save_override = None;
  }

  pub fn set_applicable_membership_types(&mut self, applicable_membership_types: Vec<i32>) {
    self.applicable_membership_types = Some(applicable_membership_types);
  }

  pub fn with_applicable_membership_types(mut self, applicable_membership_types: Vec<i32>) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.applicable_membership_types = Some(applicable_membership_types);
    self
  }

  pub fn applicable_membership_types(&self) -> Option<&Vec<i32>> {
    self.applicable_membership_types.as_ref()
  }

  pub fn reset_applicable_membership_types(&mut self) {
    self.applicable_membership_types = None;
  }

  pub fn set_is_public(&mut self, is_public: bool) {
    self.is_public = Some(is_public);
  }

  pub fn with_is_public(mut self, is_public: bool) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.is_public = Some(is_public);
    self
  }

  pub fn is_public(&self) -> Option<&bool> {
    self.is_public.as_ref()
  }

  pub fn reset_is_public(&mut self) {
    self.is_public = None;
  }

  pub fn set_membership_type(&mut self, membership_type: i32) {
    self.membership_type = Some(membership_type);
  }

  pub fn with_membership_type(mut self, membership_type: i32) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.membership_type = Some(membership_type);
    self
  }

  pub fn membership_type(&self) -> Option<&i32> {
    self.membership_type.as_ref()
  }

  pub fn reset_membership_type(&mut self) {
    self.membership_type = None;
  }

  pub fn set_membership_id(&mut self, membership_id: i64) {
    self.membership_id = Some(membership_id);
  }

  pub fn with_membership_id(mut self, membership_id: i64) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.membership_id = Some(membership_id);
    self
  }

  pub fn membership_id(&self) -> Option<&i64> {
    self.membership_id.as_ref()
  }

  pub fn reset_membership_id(&mut self) {
    self.membership_id = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> DestinyResponsesDestinyProfileUserInfoCard {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

}



