/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ForumPostResponse {
  #[serde(rename = "lastReplyTimestamp")]
  last_reply_timestamp: Option<String>,
  #[serde(rename = "IsPinned")]
  is_pinned: Option<bool>,
  #[serde(rename = "urlMediaType")]
  url_media_type: Option<i32>,
  #[serde(rename = "thumbnail")]
  thumbnail: Option<String>,
  #[serde(rename = "popularity")]
  popularity: Option<i32>,
  #[serde(rename = "isActive")]
  is_active: Option<bool>,
  #[serde(rename = "isAnnouncement")]
  is_announcement: Option<bool>,
  #[serde(rename = "userRating")]
  user_rating: Option<i32>,
  #[serde(rename = "userHasRated")]
  user_has_rated: Option<bool>,
  #[serde(rename = "userHasMutedPost")]
  user_has_muted_post: Option<bool>,
  #[serde(rename = "latestReplyPostId")]
  latest_reply_post_id: Option<i64>,
  #[serde(rename = "latestReplyAuthorId")]
  latest_reply_author_id: Option<i64>,
  #[serde(rename = "ignoreStatus")]
  ignore_status: Option<::models::IgnoresIgnoreResponse>,
  #[serde(rename = "locale")]
  locale: Option<String>
}

impl ForumPostResponse {
  pub fn new() -> ForumPostResponse {
    ForumPostResponse {
      last_reply_timestamp: None,
      is_pinned: None,
      url_media_type: None,
      thumbnail: None,
      popularity: None,
      is_active: None,
      is_announcement: None,
      user_rating: None,
      user_has_rated: None,
      user_has_muted_post: None,
      latest_reply_post_id: None,
      latest_reply_author_id: None,
      ignore_status: None,
      locale: None
    }
  }

  pub fn set_last_reply_timestamp(&mut self, last_reply_timestamp: String) {
    self.last_reply_timestamp = Some(last_reply_timestamp);
  }

  pub fn with_last_reply_timestamp(mut self, last_reply_timestamp: String) -> ForumPostResponse {
    self.last_reply_timestamp = Some(last_reply_timestamp);
    self
  }

  pub fn last_reply_timestamp(&self) -> Option<&String> {
    self.last_reply_timestamp.as_ref()
  }

  pub fn reset_last_reply_timestamp(&mut self) {
    self.last_reply_timestamp = None;
  }

  pub fn set_is_pinned(&mut self, is_pinned: bool) {
    self.is_pinned = Some(is_pinned);
  }

  pub fn with_is_pinned(mut self, is_pinned: bool) -> ForumPostResponse {
    self.is_pinned = Some(is_pinned);
    self
  }

  pub fn is_pinned(&self) -> Option<&bool> {
    self.is_pinned.as_ref()
  }

  pub fn reset_is_pinned(&mut self) {
    self.is_pinned = None;
  }

  pub fn set_url_media_type(&mut self, url_media_type: i32) {
    self.url_media_type = Some(url_media_type);
  }

  pub fn with_url_media_type(mut self, url_media_type: i32) -> ForumPostResponse {
    self.url_media_type = Some(url_media_type);
    self
  }

  pub fn url_media_type(&self) -> Option<&i32> {
    self.url_media_type.as_ref()
  }

  pub fn reset_url_media_type(&mut self) {
    self.url_media_type = None;
  }

  pub fn set_thumbnail(&mut self, thumbnail: String) {
    self.thumbnail = Some(thumbnail);
  }

  pub fn with_thumbnail(mut self, thumbnail: String) -> ForumPostResponse {
    self.thumbnail = Some(thumbnail);
    self
  }

  pub fn thumbnail(&self) -> Option<&String> {
    self.thumbnail.as_ref()
  }

  pub fn reset_thumbnail(&mut self) {
    self.thumbnail = None;
  }

  pub fn set_popularity(&mut self, popularity: i32) {
    self.popularity = Some(popularity);
  }

  pub fn with_popularity(mut self, popularity: i32) -> ForumPostResponse {
    self.popularity = Some(popularity);
    self
  }

  pub fn popularity(&self) -> Option<&i32> {
    self.popularity.as_ref()
  }

  pub fn reset_popularity(&mut self) {
    self.popularity = None;
  }

  pub fn set_is_active(&mut self, is_active: bool) {
    self.is_active = Some(is_active);
  }

  pub fn with_is_active(mut self, is_active: bool) -> ForumPostResponse {
    self.is_active = Some(is_active);
    self
  }

  pub fn is_active(&self) -> Option<&bool> {
    self.is_active.as_ref()
  }

  pub fn reset_is_active(&mut self) {
    self.is_active = None;
  }

  pub fn set_is_announcement(&mut self, is_announcement: bool) {
    self.is_announcement = Some(is_announcement);
  }

  pub fn with_is_announcement(mut self, is_announcement: bool) -> ForumPostResponse {
    self.is_announcement = Some(is_announcement);
    self
  }

  pub fn is_announcement(&self) -> Option<&bool> {
    self.is_announcement.as_ref()
  }

  pub fn reset_is_announcement(&mut self) {
    self.is_announcement = None;
  }

  pub fn set_user_rating(&mut self, user_rating: i32) {
    self.user_rating = Some(user_rating);
  }

  pub fn with_user_rating(mut self, user_rating: i32) -> ForumPostResponse {
    self.user_rating = Some(user_rating);
    self
  }

  pub fn user_rating(&self) -> Option<&i32> {
    self.user_rating.as_ref()
  }

  pub fn reset_user_rating(&mut self) {
    self.user_rating = None;
  }

  pub fn set_user_has_rated(&mut self, user_has_rated: bool) {
    self.user_has_rated = Some(user_has_rated);
  }

  pub fn with_user_has_rated(mut self, user_has_rated: bool) -> ForumPostResponse {
    self.user_has_rated = Some(user_has_rated);
    self
  }

  pub fn user_has_rated(&self) -> Option<&bool> {
    self.user_has_rated.as_ref()
  }

  pub fn reset_user_has_rated(&mut self) {
    self.user_has_rated = None;
  }

  pub fn set_user_has_muted_post(&mut self, user_has_muted_post: bool) {
    self.user_has_muted_post = Some(user_has_muted_post);
  }

  pub fn with_user_has_muted_post(mut self, user_has_muted_post: bool) -> ForumPostResponse {
    self.user_has_muted_post = Some(user_has_muted_post);
    self
  }

  pub fn user_has_muted_post(&self) -> Option<&bool> {
    self.user_has_muted_post.as_ref()
  }

  pub fn reset_user_has_muted_post(&mut self) {
    self.user_has_muted_post = None;
  }

  pub fn set_latest_reply_post_id(&mut self, latest_reply_post_id: i64) {
    self.latest_reply_post_id = Some(latest_reply_post_id);
  }

  pub fn with_latest_reply_post_id(mut self, latest_reply_post_id: i64) -> ForumPostResponse {
    self.latest_reply_post_id = Some(latest_reply_post_id);
    self
  }

  pub fn latest_reply_post_id(&self) -> Option<&i64> {
    self.latest_reply_post_id.as_ref()
  }

  pub fn reset_latest_reply_post_id(&mut self) {
    self.latest_reply_post_id = None;
  }

  pub fn set_latest_reply_author_id(&mut self, latest_reply_author_id: i64) {
    self.latest_reply_author_id = Some(latest_reply_author_id);
  }

  pub fn with_latest_reply_author_id(mut self, latest_reply_author_id: i64) -> ForumPostResponse {
    self.latest_reply_author_id = Some(latest_reply_author_id);
    self
  }

  pub fn latest_reply_author_id(&self) -> Option<&i64> {
    self.latest_reply_author_id.as_ref()
  }

  pub fn reset_latest_reply_author_id(&mut self) {
    self.latest_reply_author_id = None;
  }

  pub fn set_ignore_status(&mut self, ignore_status: ::models::IgnoresIgnoreResponse) {
    self.ignore_status = Some(ignore_status);
  }

  pub fn with_ignore_status(mut self, ignore_status: ::models::IgnoresIgnoreResponse) -> ForumPostResponse {
    self.ignore_status = Some(ignore_status);
    self
  }

  pub fn ignore_status(&self) -> Option<&::models::IgnoresIgnoreResponse> {
    self.ignore_status.as_ref()
  }

  pub fn reset_ignore_status(&mut self) {
    self.ignore_status = None;
  }

  pub fn set_locale(&mut self, locale: String) {
    self.locale = Some(locale);
  }

  pub fn with_locale(mut self, locale: String) -> ForumPostResponse {
    self.locale = Some(locale);
    self
  }

  pub fn locale(&self) -> Option<&String> {
    self.locale.as_ref()
  }

  pub fn reset_locale(&mut self) {
    self.locale = None;
  }

}



