/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDestinyTalentNode : I see you've come to find out more about Talent Nodes. I'm so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you've gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the \"Live\" information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDestinyTalentNode {
  /// The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.
  #[serde(rename = "nodeIndex")]
  node_index: Option<i32>,
  /// The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.
  #[serde(rename = "nodeHash")]
  node_hash: Option<i32>,
  /// An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.
  #[serde(rename = "state")]
  state: Option<i32>,
  /// If true, the node is activated: it's current step then provides its benefits.
  #[serde(rename = "isActivated")]
  is_activated: Option<bool>,
  /// The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]
  #[serde(rename = "stepIndex")]
  step_index: Option<i32>,
  /// If the node has material requirements to be activated, this is the list of those requirements.
  #[serde(rename = "materialsToUpgrade")]
  materials_to_upgrade: Option<Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>>,
  /// The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.
  #[serde(rename = "activationGridLevel")]
  activation_grid_level: Option<i32>,
  /// If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.
  #[serde(rename = "progressPercent")]
  progress_percent: Option<f32>,
  /// Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.
  #[serde(rename = "hidden")]
  hidden: Option<bool>,
  /// This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.
  #[serde(rename = "nodeStatsBlock")]
  node_stats_block: Option<Value>
}

impl DestinyDestinyTalentNode {
  /// I see you've come to find out more about Talent Nodes. I'm so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you've gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the \"Live\" information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.
  pub fn new() -> DestinyDestinyTalentNode {
    DestinyDestinyTalentNode {
      node_index: None,
      node_hash: None,
      state: None,
      is_activated: None,
      step_index: None,
      materials_to_upgrade: None,
      activation_grid_level: None,
      progress_percent: None,
      hidden: None,
      node_stats_block: None
    }
  }

  pub fn set_node_index(&mut self, node_index: i32) {
    self.node_index = Some(node_index);
  }

  pub fn with_node_index(mut self, node_index: i32) -> DestinyDestinyTalentNode {
    self.node_index = Some(node_index);
    self
  }

  pub fn node_index(&self) -> Option<&i32> {
    self.node_index.as_ref()
  }

  pub fn reset_node_index(&mut self) {
    self.node_index = None;
  }

  pub fn set_node_hash(&mut self, node_hash: i32) {
    self.node_hash = Some(node_hash);
  }

  pub fn with_node_hash(mut self, node_hash: i32) -> DestinyDestinyTalentNode {
    self.node_hash = Some(node_hash);
    self
  }

  pub fn node_hash(&self) -> Option<&i32> {
    self.node_hash.as_ref()
  }

  pub fn reset_node_hash(&mut self) {
    self.node_hash = None;
  }

  pub fn set_state(&mut self, state: i32) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: i32) -> DestinyDestinyTalentNode {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&i32> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_is_activated(&mut self, is_activated: bool) {
    self.is_activated = Some(is_activated);
  }

  pub fn with_is_activated(mut self, is_activated: bool) -> DestinyDestinyTalentNode {
    self.is_activated = Some(is_activated);
    self
  }

  pub fn is_activated(&self) -> Option<&bool> {
    self.is_activated.as_ref()
  }

  pub fn reset_is_activated(&mut self) {
    self.is_activated = None;
  }

  pub fn set_step_index(&mut self, step_index: i32) {
    self.step_index = Some(step_index);
  }

  pub fn with_step_index(mut self, step_index: i32) -> DestinyDestinyTalentNode {
    self.step_index = Some(step_index);
    self
  }

  pub fn step_index(&self) -> Option<&i32> {
    self.step_index.as_ref()
  }

  pub fn reset_step_index(&mut self) {
    self.step_index = None;
  }

  pub fn set_materials_to_upgrade(&mut self, materials_to_upgrade: Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>) {
    self.materials_to_upgrade = Some(materials_to_upgrade);
  }

  pub fn with_materials_to_upgrade(mut self, materials_to_upgrade: Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>) -> DestinyDestinyTalentNode {
    self.materials_to_upgrade = Some(materials_to_upgrade);
    self
  }

  pub fn materials_to_upgrade(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>> {
    self.materials_to_upgrade.as_ref()
  }

  pub fn reset_materials_to_upgrade(&mut self) {
    self.materials_to_upgrade = None;
  }

  pub fn set_activation_grid_level(&mut self, activation_grid_level: i32) {
    self.activation_grid_level = Some(activation_grid_level);
  }

  pub fn with_activation_grid_level(mut self, activation_grid_level: i32) -> DestinyDestinyTalentNode {
    self.activation_grid_level = Some(activation_grid_level);
    self
  }

  pub fn activation_grid_level(&self) -> Option<&i32> {
    self.activation_grid_level.as_ref()
  }

  pub fn reset_activation_grid_level(&mut self) {
    self.activation_grid_level = None;
  }

  pub fn set_progress_percent(&mut self, progress_percent: f32) {
    self.progress_percent = Some(progress_percent);
  }

  pub fn with_progress_percent(mut self, progress_percent: f32) -> DestinyDestinyTalentNode {
    self.progress_percent = Some(progress_percent);
    self
  }

  pub fn progress_percent(&self) -> Option<&f32> {
    self.progress_percent.as_ref()
  }

  pub fn reset_progress_percent(&mut self) {
    self.progress_percent = None;
  }

  pub fn set_hidden(&mut self, hidden: bool) {
    self.hidden = Some(hidden);
  }

  pub fn with_hidden(mut self, hidden: bool) -> DestinyDestinyTalentNode {
    self.hidden = Some(hidden);
    self
  }

  pub fn hidden(&self) -> Option<&bool> {
    self.hidden.as_ref()
  }

  pub fn reset_hidden(&mut self) {
    self.hidden = None;
  }

  pub fn set_node_stats_block(&mut self, node_stats_block: Value) {
    self.node_stats_block = Some(node_stats_block);
  }

  pub fn with_node_stats_block(mut self, node_stats_block: Value) -> DestinyDestinyTalentNode {
    self.node_stats_block = Some(node_stats_block);
    self
  }

  pub fn node_stats_block(&self) -> Option<&Value> {
    self.node_stats_block.as_ref()
  }

  pub fn reset_node_stats_block(&mut self) {
    self.node_stats_block = None;
  }

}



