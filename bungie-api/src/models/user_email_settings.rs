/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserEmailSettings : The set of all email subscription/opt-in settings and definitions.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserEmailSettings {
  /// Keyed by the name identifier of the opt-in definition.
  #[serde(rename = "optInDefinitions")]
  opt_in_definitions: Option<::std::collections::HashMap<String, ::models::UserEmailOptInDefinition>>,
  /// Keyed by the name identifier of the Subscription definition.
  #[serde(rename = "subscriptionDefinitions")]
  subscription_definitions: Option<::std::collections::HashMap<String, ::models::UserEmailSubscriptionDefinition>>,
  /// Keyed by the name identifier of the View definition.
  #[serde(rename = "views")]
  views: Option<::std::collections::HashMap<String, ::models::UserEmailViewDefinition>>
}

impl UserEmailSettings {
  /// The set of all email subscription/opt-in settings and definitions.
  pub fn new() -> UserEmailSettings {
    UserEmailSettings {
      opt_in_definitions: None,
      subscription_definitions: None,
      views: None
    }
  }

  pub fn set_opt_in_definitions(&mut self, opt_in_definitions: ::std::collections::HashMap<String, ::models::UserEmailOptInDefinition>) {
    self.opt_in_definitions = Some(opt_in_definitions);
  }

  pub fn with_opt_in_definitions(mut self, opt_in_definitions: ::std::collections::HashMap<String, ::models::UserEmailOptInDefinition>) -> UserEmailSettings {
    self.opt_in_definitions = Some(opt_in_definitions);
    self
  }

  pub fn opt_in_definitions(&self) -> Option<&::std::collections::HashMap<String, ::models::UserEmailOptInDefinition>> {
    self.opt_in_definitions.as_ref()
  }

  pub fn reset_opt_in_definitions(&mut self) {
    self.opt_in_definitions = None;
  }

  pub fn set_subscription_definitions(&mut self, subscription_definitions: ::std::collections::HashMap<String, ::models::UserEmailSubscriptionDefinition>) {
    self.subscription_definitions = Some(subscription_definitions);
  }

  pub fn with_subscription_definitions(mut self, subscription_definitions: ::std::collections::HashMap<String, ::models::UserEmailSubscriptionDefinition>) -> UserEmailSettings {
    self.subscription_definitions = Some(subscription_definitions);
    self
  }

  pub fn subscription_definitions(&self) -> Option<&::std::collections::HashMap<String, ::models::UserEmailSubscriptionDefinition>> {
    self.subscription_definitions.as_ref()
  }

  pub fn reset_subscription_definitions(&mut self) {
    self.subscription_definitions = None;
  }

  pub fn set_views(&mut self, views: ::std::collections::HashMap<String, ::models::UserEmailViewDefinition>) {
    self.views = Some(views);
  }

  pub fn with_views(mut self, views: ::std::collections::HashMap<String, ::models::UserEmailViewDefinition>) -> UserEmailSettings {
    self.views = Some(views);
    self
  }

  pub fn views(&self) -> Option<&::std::collections::HashMap<String, ::models::UserEmailViewDefinition>> {
    self.views.as_ref()
  }

  pub fn reset_views(&mut self) {
    self.views = None;
  }

}



