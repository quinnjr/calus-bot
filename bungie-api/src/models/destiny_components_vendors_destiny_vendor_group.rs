/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyComponentsVendorsDestinyVendorGroup : Represents a specific group of vendors that can be rendered in the recommended order.  How do we figure out this order? It's a long story, and will likely get more complicated over time.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyComponentsVendorsDestinyVendorGroup {
  #[serde(rename = "vendorGroupHash")]
  vendor_group_hash: Option<i32>,
  /// The ordered list of vendors within a particular group.
  #[serde(rename = "vendorHashes")]
  vendor_hashes: Option<Vec<i32>>
}

impl DestinyComponentsVendorsDestinyVendorGroup {
  /// Represents a specific group of vendors that can be rendered in the recommended order.  How do we figure out this order? It's a long story, and will likely get more complicated over time.
  pub fn new() -> DestinyComponentsVendorsDestinyVendorGroup {
    DestinyComponentsVendorsDestinyVendorGroup {
      vendor_group_hash: None,
      vendor_hashes: None
    }
  }

  pub fn set_vendor_group_hash(&mut self, vendor_group_hash: i32) {
    self.vendor_group_hash = Some(vendor_group_hash);
  }

  pub fn with_vendor_group_hash(mut self, vendor_group_hash: i32) -> DestinyComponentsVendorsDestinyVendorGroup {
    self.vendor_group_hash = Some(vendor_group_hash);
    self
  }

  pub fn vendor_group_hash(&self) -> Option<&i32> {
    self.vendor_group_hash.as_ref()
  }

  pub fn reset_vendor_group_hash(&mut self) {
    self.vendor_group_hash = None;
  }

  pub fn set_vendor_hashes(&mut self, vendor_hashes: Vec<i32>) {
    self.vendor_hashes = Some(vendor_hashes);
  }

  pub fn with_vendor_hashes(mut self, vendor_hashes: Vec<i32>) -> DestinyComponentsVendorsDestinyVendorGroup {
    self.vendor_hashes = Some(vendor_hashes);
    self
  }

  pub fn vendor_hashes(&self) -> Option<&Vec<i32>> {
    self.vendor_hashes.as_ref()
  }

  pub fn reset_vendor_hashes(&mut self) {
    self.vendor_hashes = None;
  }

}



