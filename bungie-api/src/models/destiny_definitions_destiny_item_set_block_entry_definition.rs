/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemSetBlockEntryDefinition : Defines a particular entry in an ItemSet (AKA a particular Quest Step in a Quest)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemSetBlockEntryDefinition {
  /// Used for tracking which step a user reached. These values will be populated in the user's internal state, which we expose externally as a more usable DestinyQuestStatus object. If this item has been obtained, this value will be set in trackingUnlockValueHash.
  #[serde(rename = "trackingValue")]
  tracking_value: Option<i32>,
  /// This is the hash identifier for a DestinyInventoryItemDefinition representing this quest step.
  #[serde(rename = "itemHash")]
  item_hash: Option<i32>
}

impl DestinyDefinitionsDestinyItemSetBlockEntryDefinition {
  /// Defines a particular entry in an ItemSet (AKA a particular Quest Step in a Quest)
  pub fn new() -> DestinyDefinitionsDestinyItemSetBlockEntryDefinition {
    DestinyDefinitionsDestinyItemSetBlockEntryDefinition {
      tracking_value: None,
      item_hash: None
    }
  }

  pub fn set_tracking_value(&mut self, tracking_value: i32) {
    self.tracking_value = Some(tracking_value);
  }

  pub fn with_tracking_value(mut self, tracking_value: i32) -> DestinyDefinitionsDestinyItemSetBlockEntryDefinition {
    self.tracking_value = Some(tracking_value);
    self
  }

  pub fn tracking_value(&self) -> Option<&i32> {
    self.tracking_value.as_ref()
  }

  pub fn reset_tracking_value(&mut self) {
    self.tracking_value = None;
  }

  pub fn set_item_hash(&mut self, item_hash: i32) {
    self.item_hash = Some(item_hash);
  }

  pub fn with_item_hash(mut self, item_hash: i32) -> DestinyDefinitionsDestinyItemSetBlockEntryDefinition {
    self.item_hash = Some(item_hash);
    self
  }

  pub fn item_hash(&self) -> Option<&i32> {
    self.item_hash.as_ref()
  }

  pub fn reset_item_hash(&mut self) {
    self.item_hash = None;
  }

}



