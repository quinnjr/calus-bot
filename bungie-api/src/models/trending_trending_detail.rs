/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrendingTrendingDetail {
  #[serde(rename = "identifier")]
  identifier: Option<String>,
  #[serde(rename = "entityType")]
  entity_type: Option<i32>,
  #[serde(rename = "news")]
  news: Option<::models::TrendingTrendingEntryNews>,
  #[serde(rename = "support")]
  support: Option<::models::TrendingTrendingEntrySupportArticle>,
  #[serde(rename = "destinyItem")]
  destiny_item: Option<::models::TrendingTrendingEntryDestinyItem>,
  #[serde(rename = "destinyActivity")]
  destiny_activity: Option<::models::TrendingTrendingEntryDestinyActivity>,
  #[serde(rename = "destinyRitual")]
  destiny_ritual: Option<::models::TrendingTrendingEntryDestinyRitual>,
  #[serde(rename = "creation")]
  creation: Option<::models::TrendingTrendingEntryCommunityCreation>,
  #[serde(rename = "stream")]
  stream: Option<::models::TrendingTrendingEntryCommunityStream>
}

impl TrendingTrendingDetail {
  pub fn new() -> TrendingTrendingDetail {
    TrendingTrendingDetail {
      identifier: None,
      entity_type: None,
      news: None,
      support: None,
      destiny_item: None,
      destiny_activity: None,
      destiny_ritual: None,
      creation: None,
      stream: None
    }
  }

  pub fn set_identifier(&mut self, identifier: String) {
    self.identifier = Some(identifier);
  }

  pub fn with_identifier(mut self, identifier: String) -> TrendingTrendingDetail {
    self.identifier = Some(identifier);
    self
  }

  pub fn identifier(&self) -> Option<&String> {
    self.identifier.as_ref()
  }

  pub fn reset_identifier(&mut self) {
    self.identifier = None;
  }

  pub fn set_entity_type(&mut self, entity_type: i32) {
    self.entity_type = Some(entity_type);
  }

  pub fn with_entity_type(mut self, entity_type: i32) -> TrendingTrendingDetail {
    self.entity_type = Some(entity_type);
    self
  }

  pub fn entity_type(&self) -> Option<&i32> {
    self.entity_type.as_ref()
  }

  pub fn reset_entity_type(&mut self) {
    self.entity_type = None;
  }

  pub fn set_news(&mut self, news: ::models::TrendingTrendingEntryNews) {
    self.news = Some(news);
  }

  pub fn with_news(mut self, news: ::models::TrendingTrendingEntryNews) -> TrendingTrendingDetail {
    self.news = Some(news);
    self
  }

  pub fn news(&self) -> Option<&::models::TrendingTrendingEntryNews> {
    self.news.as_ref()
  }

  pub fn reset_news(&mut self) {
    self.news = None;
  }

  pub fn set_support(&mut self, support: ::models::TrendingTrendingEntrySupportArticle) {
    self.support = Some(support);
  }

  pub fn with_support(mut self, support: ::models::TrendingTrendingEntrySupportArticle) -> TrendingTrendingDetail {
    self.support = Some(support);
    self
  }

  pub fn support(&self) -> Option<&::models::TrendingTrendingEntrySupportArticle> {
    self.support.as_ref()
  }

  pub fn reset_support(&mut self) {
    self.support = None;
  }

  pub fn set_destiny_item(&mut self, destiny_item: ::models::TrendingTrendingEntryDestinyItem) {
    self.destiny_item = Some(destiny_item);
  }

  pub fn with_destiny_item(mut self, destiny_item: ::models::TrendingTrendingEntryDestinyItem) -> TrendingTrendingDetail {
    self.destiny_item = Some(destiny_item);
    self
  }

  pub fn destiny_item(&self) -> Option<&::models::TrendingTrendingEntryDestinyItem> {
    self.destiny_item.as_ref()
  }

  pub fn reset_destiny_item(&mut self) {
    self.destiny_item = None;
  }

  pub fn set_destiny_activity(&mut self, destiny_activity: ::models::TrendingTrendingEntryDestinyActivity) {
    self.destiny_activity = Some(destiny_activity);
  }

  pub fn with_destiny_activity(mut self, destiny_activity: ::models::TrendingTrendingEntryDestinyActivity) -> TrendingTrendingDetail {
    self.destiny_activity = Some(destiny_activity);
    self
  }

  pub fn destiny_activity(&self) -> Option<&::models::TrendingTrendingEntryDestinyActivity> {
    self.destiny_activity.as_ref()
  }

  pub fn reset_destiny_activity(&mut self) {
    self.destiny_activity = None;
  }

  pub fn set_destiny_ritual(&mut self, destiny_ritual: ::models::TrendingTrendingEntryDestinyRitual) {
    self.destiny_ritual = Some(destiny_ritual);
  }

  pub fn with_destiny_ritual(mut self, destiny_ritual: ::models::TrendingTrendingEntryDestinyRitual) -> TrendingTrendingDetail {
    self.destiny_ritual = Some(destiny_ritual);
    self
  }

  pub fn destiny_ritual(&self) -> Option<&::models::TrendingTrendingEntryDestinyRitual> {
    self.destiny_ritual.as_ref()
  }

  pub fn reset_destiny_ritual(&mut self) {
    self.destiny_ritual = None;
  }

  pub fn set_creation(&mut self, creation: ::models::TrendingTrendingEntryCommunityCreation) {
    self.creation = Some(creation);
  }

  pub fn with_creation(mut self, creation: ::models::TrendingTrendingEntryCommunityCreation) -> TrendingTrendingDetail {
    self.creation = Some(creation);
    self
  }

  pub fn creation(&self) -> Option<&::models::TrendingTrendingEntryCommunityCreation> {
    self.creation.as_ref()
  }

  pub fn reset_creation(&mut self) {
    self.creation = None;
  }

  pub fn set_stream(&mut self, stream: ::models::TrendingTrendingEntryCommunityStream) {
    self.stream = Some(stream);
  }

  pub fn with_stream(mut self, stream: ::models::TrendingTrendingEntryCommunityStream) -> TrendingTrendingDetail {
    self.stream = Some(stream);
    self
  }

  pub fn stream(&self) -> Option<&::models::TrendingTrendingEntryCommunityStream> {
    self.stream.as_ref()
  }

  pub fn reset_stream(&mut self) {
    self.stream = None;
  }

}



