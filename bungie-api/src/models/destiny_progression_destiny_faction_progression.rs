/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyProgressionDestinyFactionProgression : Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyProgressionDestinyFactionProgression {
  /// The hash identifier of the Faction related to this progression. Use it to look up the DestinyFactionDefinition for more rendering info.
  #[serde(rename = "factionHash")]
  faction_hash: Option<i32>,
  /// The index of the Faction vendor that is currently available. Will be set to -1 if no vendors are available.
  #[serde(rename = "factionVendorIndex")]
  faction_vendor_index: Option<i32>,
  /// The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
  #[serde(rename = "progressionHash")]
  progression_hash: Option<i32>,
  /// The amount of progress earned today for this progression.
  #[serde(rename = "dailyProgress")]
  daily_progress: Option<i32>,
  /// If this progression has a daily limit, this is that limit.
  #[serde(rename = "dailyLimit")]
  daily_limit: Option<i32>,
  /// The amount of progress earned toward this progression in the current week.
  #[serde(rename = "weeklyProgress")]
  weekly_progress: Option<i32>,
  /// If this progression has a weekly limit, this is that limit.
  #[serde(rename = "weeklyLimit")]
  weekly_limit: Option<i32>,
  /// This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
  #[serde(rename = "currentProgress")]
  current_progress: Option<i32>,
  /// This is the level of the progression (for instance, the Character Level).
  #[serde(rename = "level")]
  level: Option<i32>,
  /// This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
  #[serde(rename = "levelCap")]
  level_cap: Option<i32>,
  /// Progressions define their levels in \"steps\". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the \"steps\" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
  #[serde(rename = "stepIndex")]
  step_index: Option<i32>,
  /// The amount of progression (i.e. \"Experience\") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
  #[serde(rename = "progressToNextLevel")]
  progress_to_next_level: Option<i32>,
  /// The total amount of progression (i.e. \"Experience\") needed in order to reach the next level.
  #[serde(rename = "nextLevelAt")]
  next_level_at: Option<i32>,
  /// The number of resets of this progression you've executed this season, if applicable to this progression.
  #[serde(rename = "currentResetCount")]
  current_reset_count: Option<i32>,
  /// Information about historical resets of this progression, if there is any data for it.
  #[serde(rename = "seasonResets")]
  season_resets: Option<Vec<::models::DestinyDestinyProgressionResetEntry>>,
  /// Information about historical rewards for this progression, if there is any data for it.
  #[serde(rename = "rewardItemStates")]
  reward_item_states: Option<Vec<i32>>
}

impl DestinyProgressionDestinyFactionProgression {
  /// Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.
  pub fn new() -> DestinyProgressionDestinyFactionProgression {
    DestinyProgressionDestinyFactionProgression {
      faction_hash: None,
      faction_vendor_index: None,
      progression_hash: None,
      daily_progress: None,
      daily_limit: None,
      weekly_progress: None,
      weekly_limit: None,
      current_progress: None,
      level: None,
      level_cap: None,
      step_index: None,
      progress_to_next_level: None,
      next_level_at: None,
      current_reset_count: None,
      season_resets: None,
      reward_item_states: None
    }
  }

  pub fn set_faction_hash(&mut self, faction_hash: i32) {
    self.faction_hash = Some(faction_hash);
  }

  pub fn with_faction_hash(mut self, faction_hash: i32) -> DestinyProgressionDestinyFactionProgression {
    self.faction_hash = Some(faction_hash);
    self
  }

  pub fn faction_hash(&self) -> Option<&i32> {
    self.faction_hash.as_ref()
  }

  pub fn reset_faction_hash(&mut self) {
    self.faction_hash = None;
  }

  pub fn set_faction_vendor_index(&mut self, faction_vendor_index: i32) {
    self.faction_vendor_index = Some(faction_vendor_index);
  }

  pub fn with_faction_vendor_index(mut self, faction_vendor_index: i32) -> DestinyProgressionDestinyFactionProgression {
    self.faction_vendor_index = Some(faction_vendor_index);
    self
  }

  pub fn faction_vendor_index(&self) -> Option<&i32> {
    self.faction_vendor_index.as_ref()
  }

  pub fn reset_faction_vendor_index(&mut self) {
    self.faction_vendor_index = None;
  }

  pub fn set_progression_hash(&mut self, progression_hash: i32) {
    self.progression_hash = Some(progression_hash);
  }

  pub fn with_progression_hash(mut self, progression_hash: i32) -> DestinyProgressionDestinyFactionProgression {
    self.progression_hash = Some(progression_hash);
    self
  }

  pub fn progression_hash(&self) -> Option<&i32> {
    self.progression_hash.as_ref()
  }

  pub fn reset_progression_hash(&mut self) {
    self.progression_hash = None;
  }

  pub fn set_daily_progress(&mut self, daily_progress: i32) {
    self.daily_progress = Some(daily_progress);
  }

  pub fn with_daily_progress(mut self, daily_progress: i32) -> DestinyProgressionDestinyFactionProgression {
    self.daily_progress = Some(daily_progress);
    self
  }

  pub fn daily_progress(&self) -> Option<&i32> {
    self.daily_progress.as_ref()
  }

  pub fn reset_daily_progress(&mut self) {
    self.daily_progress = None;
  }

  pub fn set_daily_limit(&mut self, daily_limit: i32) {
    self.daily_limit = Some(daily_limit);
  }

  pub fn with_daily_limit(mut self, daily_limit: i32) -> DestinyProgressionDestinyFactionProgression {
    self.daily_limit = Some(daily_limit);
    self
  }

  pub fn daily_limit(&self) -> Option<&i32> {
    self.daily_limit.as_ref()
  }

  pub fn reset_daily_limit(&mut self) {
    self.daily_limit = None;
  }

  pub fn set_weekly_progress(&mut self, weekly_progress: i32) {
    self.weekly_progress = Some(weekly_progress);
  }

  pub fn with_weekly_progress(mut self, weekly_progress: i32) -> DestinyProgressionDestinyFactionProgression {
    self.weekly_progress = Some(weekly_progress);
    self
  }

  pub fn weekly_progress(&self) -> Option<&i32> {
    self.weekly_progress.as_ref()
  }

  pub fn reset_weekly_progress(&mut self) {
    self.weekly_progress = None;
  }

  pub fn set_weekly_limit(&mut self, weekly_limit: i32) {
    self.weekly_limit = Some(weekly_limit);
  }

  pub fn with_weekly_limit(mut self, weekly_limit: i32) -> DestinyProgressionDestinyFactionProgression {
    self.weekly_limit = Some(weekly_limit);
    self
  }

  pub fn weekly_limit(&self) -> Option<&i32> {
    self.weekly_limit.as_ref()
  }

  pub fn reset_weekly_limit(&mut self) {
    self.weekly_limit = None;
  }

  pub fn set_current_progress(&mut self, current_progress: i32) {
    self.current_progress = Some(current_progress);
  }

  pub fn with_current_progress(mut self, current_progress: i32) -> DestinyProgressionDestinyFactionProgression {
    self.current_progress = Some(current_progress);
    self
  }

  pub fn current_progress(&self) -> Option<&i32> {
    self.current_progress.as_ref()
  }

  pub fn reset_current_progress(&mut self) {
    self.current_progress = None;
  }

  pub fn set_level(&mut self, level: i32) {
    self.level = Some(level);
  }

  pub fn with_level(mut self, level: i32) -> DestinyProgressionDestinyFactionProgression {
    self.level = Some(level);
    self
  }

  pub fn level(&self) -> Option<&i32> {
    self.level.as_ref()
  }

  pub fn reset_level(&mut self) {
    self.level = None;
  }

  pub fn set_level_cap(&mut self, level_cap: i32) {
    self.level_cap = Some(level_cap);
  }

  pub fn with_level_cap(mut self, level_cap: i32) -> DestinyProgressionDestinyFactionProgression {
    self.level_cap = Some(level_cap);
    self
  }

  pub fn level_cap(&self) -> Option<&i32> {
    self.level_cap.as_ref()
  }

  pub fn reset_level_cap(&mut self) {
    self.level_cap = None;
  }

  pub fn set_step_index(&mut self, step_index: i32) {
    self.step_index = Some(step_index);
  }

  pub fn with_step_index(mut self, step_index: i32) -> DestinyProgressionDestinyFactionProgression {
    self.step_index = Some(step_index);
    self
  }

  pub fn step_index(&self) -> Option<&i32> {
    self.step_index.as_ref()
  }

  pub fn reset_step_index(&mut self) {
    self.step_index = None;
  }

  pub fn set_progress_to_next_level(&mut self, progress_to_next_level: i32) {
    self.progress_to_next_level = Some(progress_to_next_level);
  }

  pub fn with_progress_to_next_level(mut self, progress_to_next_level: i32) -> DestinyProgressionDestinyFactionProgression {
    self.progress_to_next_level = Some(progress_to_next_level);
    self
  }

  pub fn progress_to_next_level(&self) -> Option<&i32> {
    self.progress_to_next_level.as_ref()
  }

  pub fn reset_progress_to_next_level(&mut self) {
    self.progress_to_next_level = None;
  }

  pub fn set_next_level_at(&mut self, next_level_at: i32) {
    self.next_level_at = Some(next_level_at);
  }

  pub fn with_next_level_at(mut self, next_level_at: i32) -> DestinyProgressionDestinyFactionProgression {
    self.next_level_at = Some(next_level_at);
    self
  }

  pub fn next_level_at(&self) -> Option<&i32> {
    self.next_level_at.as_ref()
  }

  pub fn reset_next_level_at(&mut self) {
    self.next_level_at = None;
  }

  pub fn set_current_reset_count(&mut self, current_reset_count: i32) {
    self.current_reset_count = Some(current_reset_count);
  }

  pub fn with_current_reset_count(mut self, current_reset_count: i32) -> DestinyProgressionDestinyFactionProgression {
    self.current_reset_count = Some(current_reset_count);
    self
  }

  pub fn current_reset_count(&self) -> Option<&i32> {
    self.current_reset_count.as_ref()
  }

  pub fn reset_current_reset_count(&mut self) {
    self.current_reset_count = None;
  }

  pub fn set_season_resets(&mut self, season_resets: Vec<::models::DestinyDestinyProgressionResetEntry>) {
    self.season_resets = Some(season_resets);
  }

  pub fn with_season_resets(mut self, season_resets: Vec<::models::DestinyDestinyProgressionResetEntry>) -> DestinyProgressionDestinyFactionProgression {
    self.season_resets = Some(season_resets);
    self
  }

  pub fn season_resets(&self) -> Option<&Vec<::models::DestinyDestinyProgressionResetEntry>> {
    self.season_resets.as_ref()
  }

  pub fn reset_season_resets(&mut self) {
    self.season_resets = None;
  }

  pub fn set_reward_item_states(&mut self, reward_item_states: Vec<i32>) {
    self.reward_item_states = Some(reward_item_states);
  }

  pub fn with_reward_item_states(mut self, reward_item_states: Vec<i32>) -> DestinyProgressionDestinyFactionProgression {
    self.reward_item_states = Some(reward_item_states);
    self
  }

  pub fn reward_item_states(&self) -> Option<&Vec<i32>> {
    self.reward_item_states.as_ref()
  }

  pub fn reset_reward_item_states(&mut self) {
    self.reward_item_states = None;
  }

}



