/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesCharactersDestinyCharacterActivitiesComponent : This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
  /// The last date that the user started playing an activity.
  #[serde(rename = "dateActivityStarted")]
  date_activity_started: Option<String>,
  /// The list of activities that the user can play.
  #[serde(rename = "availableActivities")]
  available_activities: Option<Vec<::models::DestinyDestinyActivity>>,
  /// If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \"Activities\" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.
  #[serde(rename = "currentActivityHash")]
  current_activity_hash: Option<i32>,
  /// If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
  #[serde(rename = "currentActivityModeHash")]
  current_activity_mode_hash: Option<i32>,
  /// And the current activity's most specific mode type, if it can be found.
  #[serde(rename = "currentActivityModeType")]
  current_activity_mode_type: Option<i32>,
  /// If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
  #[serde(rename = "currentActivityModeHashes")]
  current_activity_mode_hashes: Option<Vec<i32>>,
  /// All Activity Modes that apply to the current activity being played, in enum form.
  #[serde(rename = "currentActivityModeTypes")]
  current_activity_mode_types: Option<Vec<i32>>,
  /// If the user is in a playlist, this is the hash identifier for the playlist that they chose.
  #[serde(rename = "currentPlaylistActivityHash")]
  current_playlist_activity_hash: Option<i32>,
  /// This will have the activity hash of the last completed story/campaign mission, in case you care about that.
  #[serde(rename = "lastCompletedStoryHash")]
  last_completed_story_hash: Option<i32>
}

impl DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
  /// This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.
  pub fn new() -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
      date_activity_started: None,
      available_activities: None,
      current_activity_hash: None,
      current_activity_mode_hash: None,
      current_activity_mode_type: None,
      current_activity_mode_hashes: None,
      current_activity_mode_types: None,
      current_playlist_activity_hash: None,
      last_completed_story_hash: None
    }
  }

  pub fn set_date_activity_started(&mut self, date_activity_started: String) {
    self.date_activity_started = Some(date_activity_started);
  }

  pub fn with_date_activity_started(mut self, date_activity_started: String) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.date_activity_started = Some(date_activity_started);
    self
  }

  pub fn date_activity_started(&self) -> Option<&String> {
    self.date_activity_started.as_ref()
  }

  pub fn reset_date_activity_started(&mut self) {
    self.date_activity_started = None;
  }

  pub fn set_available_activities(&mut self, available_activities: Vec<::models::DestinyDestinyActivity>) {
    self.available_activities = Some(available_activities);
  }

  pub fn with_available_activities(mut self, available_activities: Vec<::models::DestinyDestinyActivity>) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.available_activities = Some(available_activities);
    self
  }

  pub fn available_activities(&self) -> Option<&Vec<::models::DestinyDestinyActivity>> {
    self.available_activities.as_ref()
  }

  pub fn reset_available_activities(&mut self) {
    self.available_activities = None;
  }

  pub fn set_current_activity_hash(&mut self, current_activity_hash: i32) {
    self.current_activity_hash = Some(current_activity_hash);
  }

  pub fn with_current_activity_hash(mut self, current_activity_hash: i32) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.current_activity_hash = Some(current_activity_hash);
    self
  }

  pub fn current_activity_hash(&self) -> Option<&i32> {
    self.current_activity_hash.as_ref()
  }

  pub fn reset_current_activity_hash(&mut self) {
    self.current_activity_hash = None;
  }

  pub fn set_current_activity_mode_hash(&mut self, current_activity_mode_hash: i32) {
    self.current_activity_mode_hash = Some(current_activity_mode_hash);
  }

  pub fn with_current_activity_mode_hash(mut self, current_activity_mode_hash: i32) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.current_activity_mode_hash = Some(current_activity_mode_hash);
    self
  }

  pub fn current_activity_mode_hash(&self) -> Option<&i32> {
    self.current_activity_mode_hash.as_ref()
  }

  pub fn reset_current_activity_mode_hash(&mut self) {
    self.current_activity_mode_hash = None;
  }

  pub fn set_current_activity_mode_type(&mut self, current_activity_mode_type: i32) {
    self.current_activity_mode_type = Some(current_activity_mode_type);
  }

  pub fn with_current_activity_mode_type(mut self, current_activity_mode_type: i32) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.current_activity_mode_type = Some(current_activity_mode_type);
    self
  }

  pub fn current_activity_mode_type(&self) -> Option<&i32> {
    self.current_activity_mode_type.as_ref()
  }

  pub fn reset_current_activity_mode_type(&mut self) {
    self.current_activity_mode_type = None;
  }

  pub fn set_current_activity_mode_hashes(&mut self, current_activity_mode_hashes: Vec<i32>) {
    self.current_activity_mode_hashes = Some(current_activity_mode_hashes);
  }

  pub fn with_current_activity_mode_hashes(mut self, current_activity_mode_hashes: Vec<i32>) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.current_activity_mode_hashes = Some(current_activity_mode_hashes);
    self
  }

  pub fn current_activity_mode_hashes(&self) -> Option<&Vec<i32>> {
    self.current_activity_mode_hashes.as_ref()
  }

  pub fn reset_current_activity_mode_hashes(&mut self) {
    self.current_activity_mode_hashes = None;
  }

  pub fn set_current_activity_mode_types(&mut self, current_activity_mode_types: Vec<i32>) {
    self.current_activity_mode_types = Some(current_activity_mode_types);
  }

  pub fn with_current_activity_mode_types(mut self, current_activity_mode_types: Vec<i32>) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.current_activity_mode_types = Some(current_activity_mode_types);
    self
  }

  pub fn current_activity_mode_types(&self) -> Option<&Vec<i32>> {
    self.current_activity_mode_types.as_ref()
  }

  pub fn reset_current_activity_mode_types(&mut self) {
    self.current_activity_mode_types = None;
  }

  pub fn set_current_playlist_activity_hash(&mut self, current_playlist_activity_hash: i32) {
    self.current_playlist_activity_hash = Some(current_playlist_activity_hash);
  }

  pub fn with_current_playlist_activity_hash(mut self, current_playlist_activity_hash: i32) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.current_playlist_activity_hash = Some(current_playlist_activity_hash);
    self
  }

  pub fn current_playlist_activity_hash(&self) -> Option<&i32> {
    self.current_playlist_activity_hash.as_ref()
  }

  pub fn reset_current_playlist_activity_hash(&mut self) {
    self.current_playlist_activity_hash = None;
  }

  pub fn set_last_completed_story_hash(&mut self, last_completed_story_hash: i32) {
    self.last_completed_story_hash = Some(last_completed_story_hash);
  }

  pub fn with_last_completed_story_hash(mut self, last_completed_story_hash: i32) -> DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
    self.last_completed_story_hash = Some(last_completed_story_hash);
    self
  }

  pub fn last_completed_story_hash(&self) -> Option<&i32> {
    self.last_completed_story_hash.as_ref()
  }

  pub fn reset_last_completed_story_hash(&mut self) {
    self.last_completed_story_hash = None;
  }

}



