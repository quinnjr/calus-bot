/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentModelsContentTypeDescription {
  #[serde(rename = "cType")]
  c_type: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "contentDescription")]
  content_description: Option<String>,
  #[serde(rename = "previewImage")]
  preview_image: Option<String>,
  #[serde(rename = "priority")]
  priority: Option<i32>,
  #[serde(rename = "reminder")]
  reminder: Option<String>,
  #[serde(rename = "properties")]
  properties: Option<Vec<::models::ContentModelsContentTypeProperty>>,
  #[serde(rename = "tagMetadata")]
  tag_metadata: Option<Vec<::models::ContentModelsTagMetadataDefinition>>,
  #[serde(rename = "tagMetadataItems")]
  tag_metadata_items: Option<::std::collections::HashMap<String, ::models::ContentModelsTagMetadataItem>>,
  #[serde(rename = "usageExamples")]
  usage_examples: Option<Vec<String>>,
  #[serde(rename = "showInContentEditor")]
  show_in_content_editor: Option<bool>,
  #[serde(rename = "typeOf")]
  type_of: Option<String>,
  #[serde(rename = "bindIdentifierToProperty")]
  bind_identifier_to_property: Option<String>,
  #[serde(rename = "boundRegex")]
  bound_regex: Option<String>,
  #[serde(rename = "forceIdentifierBinding")]
  force_identifier_binding: Option<bool>,
  #[serde(rename = "allowComments")]
  allow_comments: Option<bool>,
  #[serde(rename = "autoEnglishPropertyFallback")]
  auto_english_property_fallback: Option<bool>,
  #[serde(rename = "bulkUploadable")]
  bulk_uploadable: Option<bool>,
  #[serde(rename = "previews")]
  previews: Option<Vec<::models::ContentModelsContentPreview>>,
  #[serde(rename = "suppressCmsPath")]
  suppress_cms_path: Option<bool>,
  #[serde(rename = "propertySections")]
  property_sections: Option<Vec<::models::ContentModelsContentTypePropertySection>>
}

impl ContentModelsContentTypeDescription {
  pub fn new() -> ContentModelsContentTypeDescription {
    ContentModelsContentTypeDescription {
      c_type: None,
      name: None,
      content_description: None,
      preview_image: None,
      priority: None,
      reminder: None,
      properties: None,
      tag_metadata: None,
      tag_metadata_items: None,
      usage_examples: None,
      show_in_content_editor: None,
      type_of: None,
      bind_identifier_to_property: None,
      bound_regex: None,
      force_identifier_binding: None,
      allow_comments: None,
      auto_english_property_fallback: None,
      bulk_uploadable: None,
      previews: None,
      suppress_cms_path: None,
      property_sections: None
    }
  }

  pub fn set_c_type(&mut self, c_type: String) {
    self.c_type = Some(c_type);
  }

  pub fn with_c_type(mut self, c_type: String) -> ContentModelsContentTypeDescription {
    self.c_type = Some(c_type);
    self
  }

  pub fn c_type(&self) -> Option<&String> {
    self.c_type.as_ref()
  }

  pub fn reset_c_type(&mut self) {
    self.c_type = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ContentModelsContentTypeDescription {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_content_description(&mut self, content_description: String) {
    self.content_description = Some(content_description);
  }

  pub fn with_content_description(mut self, content_description: String) -> ContentModelsContentTypeDescription {
    self.content_description = Some(content_description);
    self
  }

  pub fn content_description(&self) -> Option<&String> {
    self.content_description.as_ref()
  }

  pub fn reset_content_description(&mut self) {
    self.content_description = None;
  }

  pub fn set_preview_image(&mut self, preview_image: String) {
    self.preview_image = Some(preview_image);
  }

  pub fn with_preview_image(mut self, preview_image: String) -> ContentModelsContentTypeDescription {
    self.preview_image = Some(preview_image);
    self
  }

  pub fn preview_image(&self) -> Option<&String> {
    self.preview_image.as_ref()
  }

  pub fn reset_preview_image(&mut self) {
    self.preview_image = None;
  }

  pub fn set_priority(&mut self, priority: i32) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: i32) -> ContentModelsContentTypeDescription {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&i32> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_reminder(&mut self, reminder: String) {
    self.reminder = Some(reminder);
  }

  pub fn with_reminder(mut self, reminder: String) -> ContentModelsContentTypeDescription {
    self.reminder = Some(reminder);
    self
  }

  pub fn reminder(&self) -> Option<&String> {
    self.reminder.as_ref()
  }

  pub fn reset_reminder(&mut self) {
    self.reminder = None;
  }

  pub fn set_properties(&mut self, properties: Vec<::models::ContentModelsContentTypeProperty>) {
    self.properties = Some(properties);
  }

  pub fn with_properties(mut self, properties: Vec<::models::ContentModelsContentTypeProperty>) -> ContentModelsContentTypeDescription {
    self.properties = Some(properties);
    self
  }

  pub fn properties(&self) -> Option<&Vec<::models::ContentModelsContentTypeProperty>> {
    self.properties.as_ref()
  }

  pub fn reset_properties(&mut self) {
    self.properties = None;
  }

  pub fn set_tag_metadata(&mut self, tag_metadata: Vec<::models::ContentModelsTagMetadataDefinition>) {
    self.tag_metadata = Some(tag_metadata);
  }

  pub fn with_tag_metadata(mut self, tag_metadata: Vec<::models::ContentModelsTagMetadataDefinition>) -> ContentModelsContentTypeDescription {
    self.tag_metadata = Some(tag_metadata);
    self
  }

  pub fn tag_metadata(&self) -> Option<&Vec<::models::ContentModelsTagMetadataDefinition>> {
    self.tag_metadata.as_ref()
  }

  pub fn reset_tag_metadata(&mut self) {
    self.tag_metadata = None;
  }

  pub fn set_tag_metadata_items(&mut self, tag_metadata_items: ::std::collections::HashMap<String, ::models::ContentModelsTagMetadataItem>) {
    self.tag_metadata_items = Some(tag_metadata_items);
  }

  pub fn with_tag_metadata_items(mut self, tag_metadata_items: ::std::collections::HashMap<String, ::models::ContentModelsTagMetadataItem>) -> ContentModelsContentTypeDescription {
    self.tag_metadata_items = Some(tag_metadata_items);
    self
  }

  pub fn tag_metadata_items(&self) -> Option<&::std::collections::HashMap<String, ::models::ContentModelsTagMetadataItem>> {
    self.tag_metadata_items.as_ref()
  }

  pub fn reset_tag_metadata_items(&mut self) {
    self.tag_metadata_items = None;
  }

  pub fn set_usage_examples(&mut self, usage_examples: Vec<String>) {
    self.usage_examples = Some(usage_examples);
  }

  pub fn with_usage_examples(mut self, usage_examples: Vec<String>) -> ContentModelsContentTypeDescription {
    self.usage_examples = Some(usage_examples);
    self
  }

  pub fn usage_examples(&self) -> Option<&Vec<String>> {
    self.usage_examples.as_ref()
  }

  pub fn reset_usage_examples(&mut self) {
    self.usage_examples = None;
  }

  pub fn set_show_in_content_editor(&mut self, show_in_content_editor: bool) {
    self.show_in_content_editor = Some(show_in_content_editor);
  }

  pub fn with_show_in_content_editor(mut self, show_in_content_editor: bool) -> ContentModelsContentTypeDescription {
    self.show_in_content_editor = Some(show_in_content_editor);
    self
  }

  pub fn show_in_content_editor(&self) -> Option<&bool> {
    self.show_in_content_editor.as_ref()
  }

  pub fn reset_show_in_content_editor(&mut self) {
    self.show_in_content_editor = None;
  }

  pub fn set_type_of(&mut self, type_of: String) {
    self.type_of = Some(type_of);
  }

  pub fn with_type_of(mut self, type_of: String) -> ContentModelsContentTypeDescription {
    self.type_of = Some(type_of);
    self
  }

  pub fn type_of(&self) -> Option<&String> {
    self.type_of.as_ref()
  }

  pub fn reset_type_of(&mut self) {
    self.type_of = None;
  }

  pub fn set_bind_identifier_to_property(&mut self, bind_identifier_to_property: String) {
    self.bind_identifier_to_property = Some(bind_identifier_to_property);
  }

  pub fn with_bind_identifier_to_property(mut self, bind_identifier_to_property: String) -> ContentModelsContentTypeDescription {
    self.bind_identifier_to_property = Some(bind_identifier_to_property);
    self
  }

  pub fn bind_identifier_to_property(&self) -> Option<&String> {
    self.bind_identifier_to_property.as_ref()
  }

  pub fn reset_bind_identifier_to_property(&mut self) {
    self.bind_identifier_to_property = None;
  }

  pub fn set_bound_regex(&mut self, bound_regex: String) {
    self.bound_regex = Some(bound_regex);
  }

  pub fn with_bound_regex(mut self, bound_regex: String) -> ContentModelsContentTypeDescription {
    self.bound_regex = Some(bound_regex);
    self
  }

  pub fn bound_regex(&self) -> Option<&String> {
    self.bound_regex.as_ref()
  }

  pub fn reset_bound_regex(&mut self) {
    self.bound_regex = None;
  }

  pub fn set_force_identifier_binding(&mut self, force_identifier_binding: bool) {
    self.force_identifier_binding = Some(force_identifier_binding);
  }

  pub fn with_force_identifier_binding(mut self, force_identifier_binding: bool) -> ContentModelsContentTypeDescription {
    self.force_identifier_binding = Some(force_identifier_binding);
    self
  }

  pub fn force_identifier_binding(&self) -> Option<&bool> {
    self.force_identifier_binding.as_ref()
  }

  pub fn reset_force_identifier_binding(&mut self) {
    self.force_identifier_binding = None;
  }

  pub fn set_allow_comments(&mut self, allow_comments: bool) {
    self.allow_comments = Some(allow_comments);
  }

  pub fn with_allow_comments(mut self, allow_comments: bool) -> ContentModelsContentTypeDescription {
    self.allow_comments = Some(allow_comments);
    self
  }

  pub fn allow_comments(&self) -> Option<&bool> {
    self.allow_comments.as_ref()
  }

  pub fn reset_allow_comments(&mut self) {
    self.allow_comments = None;
  }

  pub fn set_auto_english_property_fallback(&mut self, auto_english_property_fallback: bool) {
    self.auto_english_property_fallback = Some(auto_english_property_fallback);
  }

  pub fn with_auto_english_property_fallback(mut self, auto_english_property_fallback: bool) -> ContentModelsContentTypeDescription {
    self.auto_english_property_fallback = Some(auto_english_property_fallback);
    self
  }

  pub fn auto_english_property_fallback(&self) -> Option<&bool> {
    self.auto_english_property_fallback.as_ref()
  }

  pub fn reset_auto_english_property_fallback(&mut self) {
    self.auto_english_property_fallback = None;
  }

  pub fn set_bulk_uploadable(&mut self, bulk_uploadable: bool) {
    self.bulk_uploadable = Some(bulk_uploadable);
  }

  pub fn with_bulk_uploadable(mut self, bulk_uploadable: bool) -> ContentModelsContentTypeDescription {
    self.bulk_uploadable = Some(bulk_uploadable);
    self
  }

  pub fn bulk_uploadable(&self) -> Option<&bool> {
    self.bulk_uploadable.as_ref()
  }

  pub fn reset_bulk_uploadable(&mut self) {
    self.bulk_uploadable = None;
  }

  pub fn set_previews(&mut self, previews: Vec<::models::ContentModelsContentPreview>) {
    self.previews = Some(previews);
  }

  pub fn with_previews(mut self, previews: Vec<::models::ContentModelsContentPreview>) -> ContentModelsContentTypeDescription {
    self.previews = Some(previews);
    self
  }

  pub fn previews(&self) -> Option<&Vec<::models::ContentModelsContentPreview>> {
    self.previews.as_ref()
  }

  pub fn reset_previews(&mut self) {
    self.previews = None;
  }

  pub fn set_suppress_cms_path(&mut self, suppress_cms_path: bool) {
    self.suppress_cms_path = Some(suppress_cms_path);
  }

  pub fn with_suppress_cms_path(mut self, suppress_cms_path: bool) -> ContentModelsContentTypeDescription {
    self.suppress_cms_path = Some(suppress_cms_path);
    self
  }

  pub fn suppress_cms_path(&self) -> Option<&bool> {
    self.suppress_cms_path.as_ref()
  }

  pub fn reset_suppress_cms_path(&mut self) {
    self.suppress_cms_path = None;
  }

  pub fn set_property_sections(&mut self, property_sections: Vec<::models::ContentModelsContentTypePropertySection>) {
    self.property_sections = Some(property_sections);
  }

  pub fn with_property_sections(mut self, property_sections: Vec<::models::ContentModelsContentTypePropertySection>) -> ContentModelsContentTypeDescription {
    self.property_sections = Some(property_sections);
    self
  }

  pub fn property_sections(&self) -> Option<&Vec<::models::ContentModelsContentTypePropertySection>> {
    self.property_sections.as_ref()
  }

  pub fn reset_property_sections(&mut self) {
    self.property_sections = None;
  }

}



