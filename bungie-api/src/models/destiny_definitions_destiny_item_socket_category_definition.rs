/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemSocketCategoryDefinition : Sockets are grouped into categories in the UI. These define which category and which sockets are under that category.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemSocketCategoryDefinition {
  /// The hash for the Socket Category: a quick way to go get the header display information for the category. Use it to look up DestinySocketCategoryDefinition info.
  #[serde(rename = "socketCategoryHash")]
  socket_category_hash: Option<i32>,
  /// Use these indexes to look up the sockets in the \"sockets.socketEntries\" property on the item definition. These are the indexes under the category, in game-rendered order.
  #[serde(rename = "socketIndexes")]
  socket_indexes: Option<Vec<i32>>
}

impl DestinyDefinitionsDestinyItemSocketCategoryDefinition {
  /// Sockets are grouped into categories in the UI. These define which category and which sockets are under that category.
  pub fn new() -> DestinyDefinitionsDestinyItemSocketCategoryDefinition {
    DestinyDefinitionsDestinyItemSocketCategoryDefinition {
      socket_category_hash: None,
      socket_indexes: None
    }
  }

  pub fn set_socket_category_hash(&mut self, socket_category_hash: i32) {
    self.socket_category_hash = Some(socket_category_hash);
  }

  pub fn with_socket_category_hash(mut self, socket_category_hash: i32) -> DestinyDefinitionsDestinyItemSocketCategoryDefinition {
    self.socket_category_hash = Some(socket_category_hash);
    self
  }

  pub fn socket_category_hash(&self) -> Option<&i32> {
    self.socket_category_hash.as_ref()
  }

  pub fn reset_socket_category_hash(&mut self) {
    self.socket_category_hash = None;
  }

  pub fn set_socket_indexes(&mut self, socket_indexes: Vec<i32>) {
    self.socket_indexes = Some(socket_indexes);
  }

  pub fn with_socket_indexes(mut self, socket_indexes: Vec<i32>) -> DestinyDefinitionsDestinyItemSocketCategoryDefinition {
    self.socket_indexes = Some(socket_indexes);
    self
  }

  pub fn socket_indexes(&self) -> Option<&Vec<i32>> {
    self.socket_indexes.as_ref()
  }

  pub fn reset_socket_indexes(&mut self) {
    self.socket_indexes = None;
  }

}



