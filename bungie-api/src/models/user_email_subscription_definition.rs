/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserEmailSubscriptionDefinition : Defines a single subscription: permission to send emails for a specific, focused subject (generally timeboxed, such as for a specific release of a product or feature).

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserEmailSubscriptionDefinition {
  /// The unique identifier for this subscription.
  #[serde(rename = "name")]
  name: Option<String>,
  /// A dictionary of localized text for the EMail Opt-in setting, keyed by the locale.
  #[serde(rename = "localization")]
  localization: Option<::std::collections::HashMap<String, ::models::UserEMailSettingSubscriptionLocalization>>,
  /// The bitflag value for this subscription. Should be a unique power of two value.
  #[serde(rename = "value")]
  value: Option<i64>
}

impl UserEmailSubscriptionDefinition {
  /// Defines a single subscription: permission to send emails for a specific, focused subject (generally timeboxed, such as for a specific release of a product or feature).
  pub fn new() -> UserEmailSubscriptionDefinition {
    UserEmailSubscriptionDefinition {
      name: None,
      localization: None,
      value: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> UserEmailSubscriptionDefinition {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_localization(&mut self, localization: ::std::collections::HashMap<String, ::models::UserEMailSettingSubscriptionLocalization>) {
    self.localization = Some(localization);
  }

  pub fn with_localization(mut self, localization: ::std::collections::HashMap<String, ::models::UserEMailSettingSubscriptionLocalization>) -> UserEmailSubscriptionDefinition {
    self.localization = Some(localization);
    self
  }

  pub fn localization(&self) -> Option<&::std::collections::HashMap<String, ::models::UserEMailSettingSubscriptionLocalization>> {
    self.localization.as_ref()
  }

  pub fn reset_localization(&mut self) {
    self.localization = None;
  }

  pub fn set_value(&mut self, value: i64) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: i64) -> UserEmailSubscriptionDefinition {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&i64> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



