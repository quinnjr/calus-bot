/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyMiscDestinyColor : Represents a color whose RGBA values are all represented as values between 0 and 255.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMiscDestinyColor {
  #[serde(rename = "red")]
  red: Option<String>,
  #[serde(rename = "green")]
  green: Option<String>,
  #[serde(rename = "blue")]
  blue: Option<String>,
  #[serde(rename = "alpha")]
  alpha: Option<String>
}

impl DestinyMiscDestinyColor {
  /// Represents a color whose RGBA values are all represented as values between 0 and 255.
  pub fn new() -> DestinyMiscDestinyColor {
    DestinyMiscDestinyColor {
      red: None,
      green: None,
      blue: None,
      alpha: None
    }
  }

  pub fn set_red(&mut self, red: String) {
    self.red = Some(red);
  }

  pub fn with_red(mut self, red: String) -> DestinyMiscDestinyColor {
    self.red = Some(red);
    self
  }

  pub fn red(&self) -> Option<&String> {
    self.red.as_ref()
  }

  pub fn reset_red(&mut self) {
    self.red = None;
  }

  pub fn set_green(&mut self, green: String) {
    self.green = Some(green);
  }

  pub fn with_green(mut self, green: String) -> DestinyMiscDestinyColor {
    self.green = Some(green);
    self
  }

  pub fn green(&self) -> Option<&String> {
    self.green.as_ref()
  }

  pub fn reset_green(&mut self) {
    self.green = None;
  }

  pub fn set_blue(&mut self, blue: String) {
    self.blue = Some(blue);
  }

  pub fn with_blue(mut self, blue: String) -> DestinyMiscDestinyColor {
    self.blue = Some(blue);
    self
  }

  pub fn blue(&self) -> Option<&String> {
    self.blue.as_ref()
  }

  pub fn reset_blue(&mut self) {
    self.blue = None;
  }

  pub fn set_alpha(&mut self, alpha: String) {
    self.alpha = Some(alpha);
  }

  pub fn with_alpha(mut self, alpha: String) -> DestinyMiscDestinyColor {
    self.alpha = Some(alpha);
    self
  }

  pub fn alpha(&self) -> Option<&String> {
    self.alpha.as_ref()
  }

  pub fn reset_alpha(&mut self) {
    self.alpha = None;
  }

}



