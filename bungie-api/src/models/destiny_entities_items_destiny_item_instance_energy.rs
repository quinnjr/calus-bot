/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesItemsDestinyItemInstanceEnergy {
  /// The type of energy for this item. Plugs that require Energy can only be inserted if they have the \"Any\" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.
  #[serde(rename = "energyTypeHash")]
  energy_type_hash: Option<i32>,
  /// This is the enum version of the Energy Type value, for convenience.
  #[serde(rename = "energyType")]
  energy_type: Option<i32>,
  /// The total capacity of Energy that the item currently has, regardless of if it is currently being used.
  #[serde(rename = "energyCapacity")]
  energy_capacity: Option<i32>,
  /// The amount of Energy currently in use by inserted plugs.
  #[serde(rename = "energyUsed")]
  energy_used: Option<i32>,
  /// The amount of energy still available for inserting new plugs.
  #[serde(rename = "energyUnused")]
  energy_unused: Option<i32>
}

impl DestinyEntitiesItemsDestinyItemInstanceEnergy {
  pub fn new() -> DestinyEntitiesItemsDestinyItemInstanceEnergy {
    DestinyEntitiesItemsDestinyItemInstanceEnergy {
      energy_type_hash: None,
      energy_type: None,
      energy_capacity: None,
      energy_used: None,
      energy_unused: None
    }
  }

  pub fn set_energy_type_hash(&mut self, energy_type_hash: i32) {
    self.energy_type_hash = Some(energy_type_hash);
  }

  pub fn with_energy_type_hash(mut self, energy_type_hash: i32) -> DestinyEntitiesItemsDestinyItemInstanceEnergy {
    self.energy_type_hash = Some(energy_type_hash);
    self
  }

  pub fn energy_type_hash(&self) -> Option<&i32> {
    self.energy_type_hash.as_ref()
  }

  pub fn reset_energy_type_hash(&mut self) {
    self.energy_type_hash = None;
  }

  pub fn set_energy_type(&mut self, energy_type: i32) {
    self.energy_type = Some(energy_type);
  }

  pub fn with_energy_type(mut self, energy_type: i32) -> DestinyEntitiesItemsDestinyItemInstanceEnergy {
    self.energy_type = Some(energy_type);
    self
  }

  pub fn energy_type(&self) -> Option<&i32> {
    self.energy_type.as_ref()
  }

  pub fn reset_energy_type(&mut self) {
    self.energy_type = None;
  }

  pub fn set_energy_capacity(&mut self, energy_capacity: i32) {
    self.energy_capacity = Some(energy_capacity);
  }

  pub fn with_energy_capacity(mut self, energy_capacity: i32) -> DestinyEntitiesItemsDestinyItemInstanceEnergy {
    self.energy_capacity = Some(energy_capacity);
    self
  }

  pub fn energy_capacity(&self) -> Option<&i32> {
    self.energy_capacity.as_ref()
  }

  pub fn reset_energy_capacity(&mut self) {
    self.energy_capacity = None;
  }

  pub fn set_energy_used(&mut self, energy_used: i32) {
    self.energy_used = Some(energy_used);
  }

  pub fn with_energy_used(mut self, energy_used: i32) -> DestinyEntitiesItemsDestinyItemInstanceEnergy {
    self.energy_used = Some(energy_used);
    self
  }

  pub fn energy_used(&self) -> Option<&i32> {
    self.energy_used.as_ref()
  }

  pub fn reset_energy_used(&mut self) {
    self.energy_used = None;
  }

  pub fn set_energy_unused(&mut self, energy_unused: i32) {
    self.energy_unused = Some(energy_unused);
  }

  pub fn with_energy_unused(mut self, energy_unused: i32) -> DestinyEntitiesItemsDestinyItemInstanceEnergy {
    self.energy_unused = Some(energy_unused);
    self
  }

  pub fn energy_unused(&self) -> Option<&i32> {
    self.energy_unused.as_ref()
  }

  pub fn reset_energy_unused(&mut self) {
    self.energy_unused = None;
  }

}



