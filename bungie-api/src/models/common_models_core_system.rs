/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CommonModelsCoreSystem {
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  #[serde(rename = "parameters")]
  parameters: Option<::std::collections::HashMap<String, String>>
}

impl CommonModelsCoreSystem {
  pub fn new() -> CommonModelsCoreSystem {
    CommonModelsCoreSystem {
      enabled: None,
      parameters: None
    }
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> CommonModelsCoreSystem {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_parameters(&mut self, parameters: ::std::collections::HashMap<String, String>) {
    self.parameters = Some(parameters);
  }

  pub fn with_parameters(mut self, parameters: ::std::collections::HashMap<String, String>) -> CommonModelsCoreSystem {
    self.parameters = Some(parameters);
    self
  }

  pub fn parameters(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.parameters.as_ref()
  }

  pub fn reset_parameters(&mut self) {
    self.parameters = None;
  }

}



