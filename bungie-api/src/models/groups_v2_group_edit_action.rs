/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupEditAction {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "about")]
  about: Option<String>,
  #[serde(rename = "motto")]
  motto: Option<String>,
  #[serde(rename = "theme")]
  theme: Option<String>,
  #[serde(rename = "avatarImageIndex")]
  avatar_image_index: Option<i32>,
  #[serde(rename = "tags")]
  tags: Option<String>,
  #[serde(rename = "isPublic")]
  is_public: Option<bool>,
  #[serde(rename = "membershipOption")]
  membership_option: Option<i32>,
  #[serde(rename = "isPublicTopicAdminOnly")]
  is_public_topic_admin_only: Option<bool>,
  #[serde(rename = "allowChat")]
  allow_chat: Option<bool>,
  #[serde(rename = "chatSecurity")]
  chat_security: Option<i32>,
  #[serde(rename = "callsign")]
  callsign: Option<String>,
  #[serde(rename = "locale")]
  locale: Option<String>,
  #[serde(rename = "homepage")]
  homepage: Option<i32>,
  #[serde(rename = "enableInvitationMessagingForAdmins")]
  enable_invitation_messaging_for_admins: Option<bool>,
  #[serde(rename = "defaultPublicity")]
  default_publicity: Option<i32>
}

impl GroupsV2GroupEditAction {
  pub fn new() -> GroupsV2GroupEditAction {
    GroupsV2GroupEditAction {
      name: None,
      about: None,
      motto: None,
      theme: None,
      avatar_image_index: None,
      tags: None,
      is_public: None,
      membership_option: None,
      is_public_topic_admin_only: None,
      allow_chat: None,
      chat_security: None,
      callsign: None,
      locale: None,
      homepage: None,
      enable_invitation_messaging_for_admins: None,
      default_publicity: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GroupsV2GroupEditAction {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_about(&mut self, about: String) {
    self.about = Some(about);
  }

  pub fn with_about(mut self, about: String) -> GroupsV2GroupEditAction {
    self.about = Some(about);
    self
  }

  pub fn about(&self) -> Option<&String> {
    self.about.as_ref()
  }

  pub fn reset_about(&mut self) {
    self.about = None;
  }

  pub fn set_motto(&mut self, motto: String) {
    self.motto = Some(motto);
  }

  pub fn with_motto(mut self, motto: String) -> GroupsV2GroupEditAction {
    self.motto = Some(motto);
    self
  }

  pub fn motto(&self) -> Option<&String> {
    self.motto.as_ref()
  }

  pub fn reset_motto(&mut self) {
    self.motto = None;
  }

  pub fn set_theme(&mut self, theme: String) {
    self.theme = Some(theme);
  }

  pub fn with_theme(mut self, theme: String) -> GroupsV2GroupEditAction {
    self.theme = Some(theme);
    self
  }

  pub fn theme(&self) -> Option<&String> {
    self.theme.as_ref()
  }

  pub fn reset_theme(&mut self) {
    self.theme = None;
  }

  pub fn set_avatar_image_index(&mut self, avatar_image_index: i32) {
    self.avatar_image_index = Some(avatar_image_index);
  }

  pub fn with_avatar_image_index(mut self, avatar_image_index: i32) -> GroupsV2GroupEditAction {
    self.avatar_image_index = Some(avatar_image_index);
    self
  }

  pub fn avatar_image_index(&self) -> Option<&i32> {
    self.avatar_image_index.as_ref()
  }

  pub fn reset_avatar_image_index(&mut self) {
    self.avatar_image_index = None;
  }

  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> GroupsV2GroupEditAction {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_is_public(&mut self, is_public: bool) {
    self.is_public = Some(is_public);
  }

  pub fn with_is_public(mut self, is_public: bool) -> GroupsV2GroupEditAction {
    self.is_public = Some(is_public);
    self
  }

  pub fn is_public(&self) -> Option<&bool> {
    self.is_public.as_ref()
  }

  pub fn reset_is_public(&mut self) {
    self.is_public = None;
  }

  pub fn set_membership_option(&mut self, membership_option: i32) {
    self.membership_option = Some(membership_option);
  }

  pub fn with_membership_option(mut self, membership_option: i32) -> GroupsV2GroupEditAction {
    self.membership_option = Some(membership_option);
    self
  }

  pub fn membership_option(&self) -> Option<&i32> {
    self.membership_option.as_ref()
  }

  pub fn reset_membership_option(&mut self) {
    self.membership_option = None;
  }

  pub fn set_is_public_topic_admin_only(&mut self, is_public_topic_admin_only: bool) {
    self.is_public_topic_admin_only = Some(is_public_topic_admin_only);
  }

  pub fn with_is_public_topic_admin_only(mut self, is_public_topic_admin_only: bool) -> GroupsV2GroupEditAction {
    self.is_public_topic_admin_only = Some(is_public_topic_admin_only);
    self
  }

  pub fn is_public_topic_admin_only(&self) -> Option<&bool> {
    self.is_public_topic_admin_only.as_ref()
  }

  pub fn reset_is_public_topic_admin_only(&mut self) {
    self.is_public_topic_admin_only = None;
  }

  pub fn set_allow_chat(&mut self, allow_chat: bool) {
    self.allow_chat = Some(allow_chat);
  }

  pub fn with_allow_chat(mut self, allow_chat: bool) -> GroupsV2GroupEditAction {
    self.allow_chat = Some(allow_chat);
    self
  }

  pub fn allow_chat(&self) -> Option<&bool> {
    self.allow_chat.as_ref()
  }

  pub fn reset_allow_chat(&mut self) {
    self.allow_chat = None;
  }

  pub fn set_chat_security(&mut self, chat_security: i32) {
    self.chat_security = Some(chat_security);
  }

  pub fn with_chat_security(mut self, chat_security: i32) -> GroupsV2GroupEditAction {
    self.chat_security = Some(chat_security);
    self
  }

  pub fn chat_security(&self) -> Option<&i32> {
    self.chat_security.as_ref()
  }

  pub fn reset_chat_security(&mut self) {
    self.chat_security = None;
  }

  pub fn set_callsign(&mut self, callsign: String) {
    self.callsign = Some(callsign);
  }

  pub fn with_callsign(mut self, callsign: String) -> GroupsV2GroupEditAction {
    self.callsign = Some(callsign);
    self
  }

  pub fn callsign(&self) -> Option<&String> {
    self.callsign.as_ref()
  }

  pub fn reset_callsign(&mut self) {
    self.callsign = None;
  }

  pub fn set_locale(&mut self, locale: String) {
    self.locale = Some(locale);
  }

  pub fn with_locale(mut self, locale: String) -> GroupsV2GroupEditAction {
    self.locale = Some(locale);
    self
  }

  pub fn locale(&self) -> Option<&String> {
    self.locale.as_ref()
  }

  pub fn reset_locale(&mut self) {
    self.locale = None;
  }

  pub fn set_homepage(&mut self, homepage: i32) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: i32) -> GroupsV2GroupEditAction {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&i32> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_enable_invitation_messaging_for_admins(&mut self, enable_invitation_messaging_for_admins: bool) {
    self.enable_invitation_messaging_for_admins = Some(enable_invitation_messaging_for_admins);
  }

  pub fn with_enable_invitation_messaging_for_admins(mut self, enable_invitation_messaging_for_admins: bool) -> GroupsV2GroupEditAction {
    self.enable_invitation_messaging_for_admins = Some(enable_invitation_messaging_for_admins);
    self
  }

  pub fn enable_invitation_messaging_for_admins(&self) -> Option<&bool> {
    self.enable_invitation_messaging_for_admins.as_ref()
  }

  pub fn reset_enable_invitation_messaging_for_admins(&mut self) {
    self.enable_invitation_messaging_for_admins = None;
  }

  pub fn set_default_publicity(&mut self, default_publicity: i32) {
    self.default_publicity = Some(default_publicity);
  }

  pub fn with_default_publicity(mut self, default_publicity: i32) -> GroupsV2GroupEditAction {
    self.default_publicity = Some(default_publicity);
    self
  }

  pub fn default_publicity(&self) -> Option<&i32> {
    self.default_publicity.as_ref()
  }

  pub fn reset_default_publicity(&mut self) {
    self.default_publicity = None;
  }

}



