/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyActivityPlaylistItemDefinition : If the activity is a playlist, this is the definition for a specific entry in the playlist: a single possible combination of Activity and Activity Mode that can be chosen.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
  /// The hash identifier of the Activity that can be played. Use it to look up the DestinyActivityDefinition.
  #[serde(rename = "activityHash")]
  activity_hash: Option<i32>,
  /// If this playlist entry had an activity mode directly defined on it, this will be the hash of that mode.
  #[serde(rename = "directActivityModeHash")]
  direct_activity_mode_hash: Option<i32>,
  /// If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.
  #[serde(rename = "directActivityModeType")]
  direct_activity_mode_type: Option<i32>,
  /// The hash identifiers for Activity Modes relevant to this entry.
  #[serde(rename = "activityModeHashes")]
  activity_mode_hashes: Option<Vec<i32>>,
  /// The activity modes - if any - in enum form. Because we can't seem to escape the enums.
  #[serde(rename = "activityModeTypes")]
  activity_mode_types: Option<Vec<i32>>
}

impl DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
  /// If the activity is a playlist, this is the definition for a specific entry in the playlist: a single possible combination of Activity and Activity Mode that can be chosen.
  pub fn new() -> DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
    DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
      activity_hash: None,
      direct_activity_mode_hash: None,
      direct_activity_mode_type: None,
      activity_mode_hashes: None,
      activity_mode_types: None
    }
  }

  pub fn set_activity_hash(&mut self, activity_hash: i32) {
    self.activity_hash = Some(activity_hash);
  }

  pub fn with_activity_hash(mut self, activity_hash: i32) -> DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
    self.activity_hash = Some(activity_hash);
    self
  }

  pub fn activity_hash(&self) -> Option<&i32> {
    self.activity_hash.as_ref()
  }

  pub fn reset_activity_hash(&mut self) {
    self.activity_hash = None;
  }

  pub fn set_direct_activity_mode_hash(&mut self, direct_activity_mode_hash: i32) {
    self.direct_activity_mode_hash = Some(direct_activity_mode_hash);
  }

  pub fn with_direct_activity_mode_hash(mut self, direct_activity_mode_hash: i32) -> DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
    self.direct_activity_mode_hash = Some(direct_activity_mode_hash);
    self
  }

  pub fn direct_activity_mode_hash(&self) -> Option<&i32> {
    self.direct_activity_mode_hash.as_ref()
  }

  pub fn reset_direct_activity_mode_hash(&mut self) {
    self.direct_activity_mode_hash = None;
  }

  pub fn set_direct_activity_mode_type(&mut self, direct_activity_mode_type: i32) {
    self.direct_activity_mode_type = Some(direct_activity_mode_type);
  }

  pub fn with_direct_activity_mode_type(mut self, direct_activity_mode_type: i32) -> DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
    self.direct_activity_mode_type = Some(direct_activity_mode_type);
    self
  }

  pub fn direct_activity_mode_type(&self) -> Option<&i32> {
    self.direct_activity_mode_type.as_ref()
  }

  pub fn reset_direct_activity_mode_type(&mut self) {
    self.direct_activity_mode_type = None;
  }

  pub fn set_activity_mode_hashes(&mut self, activity_mode_hashes: Vec<i32>) {
    self.activity_mode_hashes = Some(activity_mode_hashes);
  }

  pub fn with_activity_mode_hashes(mut self, activity_mode_hashes: Vec<i32>) -> DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
    self.activity_mode_hashes = Some(activity_mode_hashes);
    self
  }

  pub fn activity_mode_hashes(&self) -> Option<&Vec<i32>> {
    self.activity_mode_hashes.as_ref()
  }

  pub fn reset_activity_mode_hashes(&mut self) {
    self.activity_mode_hashes = None;
  }

  pub fn set_activity_mode_types(&mut self, activity_mode_types: Vec<i32>) {
    self.activity_mode_types = Some(activity_mode_types);
  }

  pub fn with_activity_mode_types(mut self, activity_mode_types: Vec<i32>) -> DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
    self.activity_mode_types = Some(activity_mode_types);
    self
  }

  pub fn activity_mode_types(&self) -> Option<&Vec<i32>> {
    self.activity_mode_types.as_ref()
  }

  pub fn reset_activity_mode_types(&mut self) {
    self.activity_mode_types = None;
  }

}



