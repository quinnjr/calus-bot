/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsPresentationDestinyPresentationChildBlock {
  #[serde(rename = "presentationNodeType")]
  presentation_node_type: Option<i32>,
  #[serde(rename = "parentPresentationNodeHashes")]
  parent_presentation_node_hashes: Option<Vec<i32>>,
  #[serde(rename = "displayStyle")]
  display_style: Option<i32>
}

impl DestinyDefinitionsPresentationDestinyPresentationChildBlock {
  pub fn new() -> DestinyDefinitionsPresentationDestinyPresentationChildBlock {
    DestinyDefinitionsPresentationDestinyPresentationChildBlock {
      presentation_node_type: None,
      parent_presentation_node_hashes: None,
      display_style: None
    }
  }

  pub fn set_presentation_node_type(&mut self, presentation_node_type: i32) {
    self.presentation_node_type = Some(presentation_node_type);
  }

  pub fn with_presentation_node_type(mut self, presentation_node_type: i32) -> DestinyDefinitionsPresentationDestinyPresentationChildBlock {
    self.presentation_node_type = Some(presentation_node_type);
    self
  }

  pub fn presentation_node_type(&self) -> Option<&i32> {
    self.presentation_node_type.as_ref()
  }

  pub fn reset_presentation_node_type(&mut self) {
    self.presentation_node_type = None;
  }

  pub fn set_parent_presentation_node_hashes(&mut self, parent_presentation_node_hashes: Vec<i32>) {
    self.parent_presentation_node_hashes = Some(parent_presentation_node_hashes);
  }

  pub fn with_parent_presentation_node_hashes(mut self, parent_presentation_node_hashes: Vec<i32>) -> DestinyDefinitionsPresentationDestinyPresentationChildBlock {
    self.parent_presentation_node_hashes = Some(parent_presentation_node_hashes);
    self
  }

  pub fn parent_presentation_node_hashes(&self) -> Option<&Vec<i32>> {
    self.parent_presentation_node_hashes.as_ref()
  }

  pub fn reset_parent_presentation_node_hashes(&mut self) {
    self.parent_presentation_node_hashes = None;
  }

  pub fn set_display_style(&mut self, display_style: i32) {
    self.display_style = Some(display_style);
  }

  pub fn with_display_style(mut self, display_style: i32) -> DestinyDefinitionsPresentationDestinyPresentationChildBlock {
    self.display_style = Some(display_style);
    self
  }

  pub fn display_style(&self) -> Option<&i32> {
    self.display_style.as_ref()
  }

  pub fn reset_display_style(&mut self) {
    self.display_style = None;
  }

}



