/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyEntitySearchResult : The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyEntitySearchResult {
  /// A list of suggested words that might make for better search results, based on the text searched for.
  #[serde(rename = "suggestedWords")]
  suggested_words: Option<Vec<String>>,
  /// The items found that are matches/near matches for the searched-for term, sorted by something vaguely resembling \"relevance\". Hopefully this will get better in the future.
  #[serde(rename = "results")]
  results: Option<Value>
}

impl DestinyDefinitionsDestinyEntitySearchResult {
  /// The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful.
  pub fn new() -> DestinyDefinitionsDestinyEntitySearchResult {
    DestinyDefinitionsDestinyEntitySearchResult {
      suggested_words: None,
      results: None
    }
  }

  pub fn set_suggested_words(&mut self, suggested_words: Vec<String>) {
    self.suggested_words = Some(suggested_words);
  }

  pub fn with_suggested_words(mut self, suggested_words: Vec<String>) -> DestinyDefinitionsDestinyEntitySearchResult {
    self.suggested_words = Some(suggested_words);
    self
  }

  pub fn suggested_words(&self) -> Option<&Vec<String>> {
    self.suggested_words.as_ref()
  }

  pub fn reset_suggested_words(&mut self) {
    self.suggested_words = None;
  }

  pub fn set_results(&mut self, results: Value) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Value) -> DestinyDefinitionsDestinyEntitySearchResult {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Value> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

}



