/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyCharacterDestinyCharacterCustomization : Raw data about the customization options chosen for a character's face and appearance.  You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyCharacterDestinyCharacterCustomization {
  #[serde(rename = "personality")]
  personality: Option<i32>,
  #[serde(rename = "face")]
  face: Option<i32>,
  #[serde(rename = "skinColor")]
  skin_color: Option<i32>,
  #[serde(rename = "lipColor")]
  lip_color: Option<i32>,
  #[serde(rename = "eyeColor")]
  eye_color: Option<i32>,
  #[serde(rename = "hairColors")]
  hair_colors: Option<Vec<i32>>,
  #[serde(rename = "featureColors")]
  feature_colors: Option<Vec<i32>>,
  #[serde(rename = "decalColor")]
  decal_color: Option<i32>,
  #[serde(rename = "wearHelmet")]
  wear_helmet: Option<bool>,
  #[serde(rename = "hairIndex")]
  hair_index: Option<i32>,
  #[serde(rename = "featureIndex")]
  feature_index: Option<i32>,
  #[serde(rename = "decalIndex")]
  decal_index: Option<i32>
}

impl DestinyCharacterDestinyCharacterCustomization {
  /// Raw data about the customization options chosen for a character's face and appearance.  You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)
  pub fn new() -> DestinyCharacterDestinyCharacterCustomization {
    DestinyCharacterDestinyCharacterCustomization {
      personality: None,
      face: None,
      skin_color: None,
      lip_color: None,
      eye_color: None,
      hair_colors: None,
      feature_colors: None,
      decal_color: None,
      wear_helmet: None,
      hair_index: None,
      feature_index: None,
      decal_index: None
    }
  }

  pub fn set_personality(&mut self, personality: i32) {
    self.personality = Some(personality);
  }

  pub fn with_personality(mut self, personality: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.personality = Some(personality);
    self
  }

  pub fn personality(&self) -> Option<&i32> {
    self.personality.as_ref()
  }

  pub fn reset_personality(&mut self) {
    self.personality = None;
  }

  pub fn set_face(&mut self, face: i32) {
    self.face = Some(face);
  }

  pub fn with_face(mut self, face: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.face = Some(face);
    self
  }

  pub fn face(&self) -> Option<&i32> {
    self.face.as_ref()
  }

  pub fn reset_face(&mut self) {
    self.face = None;
  }

  pub fn set_skin_color(&mut self, skin_color: i32) {
    self.skin_color = Some(skin_color);
  }

  pub fn with_skin_color(mut self, skin_color: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.skin_color = Some(skin_color);
    self
  }

  pub fn skin_color(&self) -> Option<&i32> {
    self.skin_color.as_ref()
  }

  pub fn reset_skin_color(&mut self) {
    self.skin_color = None;
  }

  pub fn set_lip_color(&mut self, lip_color: i32) {
    self.lip_color = Some(lip_color);
  }

  pub fn with_lip_color(mut self, lip_color: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.lip_color = Some(lip_color);
    self
  }

  pub fn lip_color(&self) -> Option<&i32> {
    self.lip_color.as_ref()
  }

  pub fn reset_lip_color(&mut self) {
    self.lip_color = None;
  }

  pub fn set_eye_color(&mut self, eye_color: i32) {
    self.eye_color = Some(eye_color);
  }

  pub fn with_eye_color(mut self, eye_color: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.eye_color = Some(eye_color);
    self
  }

  pub fn eye_color(&self) -> Option<&i32> {
    self.eye_color.as_ref()
  }

  pub fn reset_eye_color(&mut self) {
    self.eye_color = None;
  }

  pub fn set_hair_colors(&mut self, hair_colors: Vec<i32>) {
    self.hair_colors = Some(hair_colors);
  }

  pub fn with_hair_colors(mut self, hair_colors: Vec<i32>) -> DestinyCharacterDestinyCharacterCustomization {
    self.hair_colors = Some(hair_colors);
    self
  }

  pub fn hair_colors(&self) -> Option<&Vec<i32>> {
    self.hair_colors.as_ref()
  }

  pub fn reset_hair_colors(&mut self) {
    self.hair_colors = None;
  }

  pub fn set_feature_colors(&mut self, feature_colors: Vec<i32>) {
    self.feature_colors = Some(feature_colors);
  }

  pub fn with_feature_colors(mut self, feature_colors: Vec<i32>) -> DestinyCharacterDestinyCharacterCustomization {
    self.feature_colors = Some(feature_colors);
    self
  }

  pub fn feature_colors(&self) -> Option<&Vec<i32>> {
    self.feature_colors.as_ref()
  }

  pub fn reset_feature_colors(&mut self) {
    self.feature_colors = None;
  }

  pub fn set_decal_color(&mut self, decal_color: i32) {
    self.decal_color = Some(decal_color);
  }

  pub fn with_decal_color(mut self, decal_color: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.decal_color = Some(decal_color);
    self
  }

  pub fn decal_color(&self) -> Option<&i32> {
    self.decal_color.as_ref()
  }

  pub fn reset_decal_color(&mut self) {
    self.decal_color = None;
  }

  pub fn set_wear_helmet(&mut self, wear_helmet: bool) {
    self.wear_helmet = Some(wear_helmet);
  }

  pub fn with_wear_helmet(mut self, wear_helmet: bool) -> DestinyCharacterDestinyCharacterCustomization {
    self.wear_helmet = Some(wear_helmet);
    self
  }

  pub fn wear_helmet(&self) -> Option<&bool> {
    self.wear_helmet.as_ref()
  }

  pub fn reset_wear_helmet(&mut self) {
    self.wear_helmet = None;
  }

  pub fn set_hair_index(&mut self, hair_index: i32) {
    self.hair_index = Some(hair_index);
  }

  pub fn with_hair_index(mut self, hair_index: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.hair_index = Some(hair_index);
    self
  }

  pub fn hair_index(&self) -> Option<&i32> {
    self.hair_index.as_ref()
  }

  pub fn reset_hair_index(&mut self) {
    self.hair_index = None;
  }

  pub fn set_feature_index(&mut self, feature_index: i32) {
    self.feature_index = Some(feature_index);
  }

  pub fn with_feature_index(mut self, feature_index: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.feature_index = Some(feature_index);
    self
  }

  pub fn feature_index(&self) -> Option<&i32> {
    self.feature_index.as_ref()
  }

  pub fn reset_feature_index(&mut self) {
    self.feature_index = None;
  }

  pub fn set_decal_index(&mut self, decal_index: i32) {
    self.decal_index = Some(decal_index);
  }

  pub fn with_decal_index(mut self, decal_index: i32) -> DestinyCharacterDestinyCharacterCustomization {
    self.decal_index = Some(decal_index);
    self
  }

  pub fn decal_index(&self) -> Option<&i32> {
    self.decal_index.as_ref()
  }

  pub fn reset_decal_index(&mut self) {
    self.decal_index = None;
  }

}



