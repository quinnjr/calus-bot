/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyItemResponse : The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an \"itemInstanceId\": for those, get your information from the DestinyInventoryDefinition.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyItemResponse {
  /// If the item is on a character, this will return the ID of the character that is holding the item.
  #[serde(rename = "characterId")]
  character_id: Option<i64>,
  /// Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData
  #[serde(rename = "item")]
  item: Option<Value>,
  /// Basic instance data for the item.  COMPONENT TYPE: ItemInstances
  #[serde(rename = "instance")]
  instance: Option<Value>,
  /// Information specifically about the item's objectives.  COMPONENT TYPE: ItemObjectives
  #[serde(rename = "objectives")]
  objectives: Option<Value>,
  /// Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks
  #[serde(rename = "perks")]
  perks: Option<Value>,
  /// Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData
  #[serde(rename = "renderData")]
  render_data: Option<Value>,
  /// Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats
  #[serde(rename = "stats")]
  stats: Option<Value>,
  /// Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's \"Builds\".  COMPONENT TYPE: ItemTalentGrids
  #[serde(rename = "talentGrid")]
  talent_grid: Option<Value>,
  /// Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets
  #[serde(rename = "sockets")]
  sockets: Option<Value>,
  /// Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs
  #[serde(rename = "reusablePlugs")]
  reusable_plugs: Option<Value>,
  /// Information about objectives on Plugs for a given item. See the component's documentation for more info.  COMPONENT TYPE: ItemPlugObjectives
  #[serde(rename = "plugObjectives")]
  plug_objectives: Option<Value>
}

impl DestinyResponsesDestinyItemResponse {
  /// The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an \"itemInstanceId\": for those, get your information from the DestinyInventoryDefinition.
  pub fn new() -> DestinyResponsesDestinyItemResponse {
    DestinyResponsesDestinyItemResponse {
      character_id: None,
      item: None,
      instance: None,
      objectives: None,
      perks: None,
      render_data: None,
      stats: None,
      talent_grid: None,
      sockets: None,
      reusable_plugs: None,
      plug_objectives: None
    }
  }

  pub fn set_character_id(&mut self, character_id: i64) {
    self.character_id = Some(character_id);
  }

  pub fn with_character_id(mut self, character_id: i64) -> DestinyResponsesDestinyItemResponse {
    self.character_id = Some(character_id);
    self
  }

  pub fn character_id(&self) -> Option<&i64> {
    self.character_id.as_ref()
  }

  pub fn reset_character_id(&mut self) {
    self.character_id = None;
  }

  pub fn set_item(&mut self, item: Value) {
    self.item = Some(item);
  }

  pub fn with_item(mut self, item: Value) -> DestinyResponsesDestinyItemResponse {
    self.item = Some(item);
    self
  }

  pub fn item(&self) -> Option<&Value> {
    self.item.as_ref()
  }

  pub fn reset_item(&mut self) {
    self.item = None;
  }

  pub fn set_instance(&mut self, instance: Value) {
    self.instance = Some(instance);
  }

  pub fn with_instance(mut self, instance: Value) -> DestinyResponsesDestinyItemResponse {
    self.instance = Some(instance);
    self
  }

  pub fn instance(&self) -> Option<&Value> {
    self.instance.as_ref()
  }

  pub fn reset_instance(&mut self) {
    self.instance = None;
  }

  pub fn set_objectives(&mut self, objectives: Value) {
    self.objectives = Some(objectives);
  }

  pub fn with_objectives(mut self, objectives: Value) -> DestinyResponsesDestinyItemResponse {
    self.objectives = Some(objectives);
    self
  }

  pub fn objectives(&self) -> Option<&Value> {
    self.objectives.as_ref()
  }

  pub fn reset_objectives(&mut self) {
    self.objectives = None;
  }

  pub fn set_perks(&mut self, perks: Value) {
    self.perks = Some(perks);
  }

  pub fn with_perks(mut self, perks: Value) -> DestinyResponsesDestinyItemResponse {
    self.perks = Some(perks);
    self
  }

  pub fn perks(&self) -> Option<&Value> {
    self.perks.as_ref()
  }

  pub fn reset_perks(&mut self) {
    self.perks = None;
  }

  pub fn set_render_data(&mut self, render_data: Value) {
    self.render_data = Some(render_data);
  }

  pub fn with_render_data(mut self, render_data: Value) -> DestinyResponsesDestinyItemResponse {
    self.render_data = Some(render_data);
    self
  }

  pub fn render_data(&self) -> Option<&Value> {
    self.render_data.as_ref()
  }

  pub fn reset_render_data(&mut self) {
    self.render_data = None;
  }

  pub fn set_stats(&mut self, stats: Value) {
    self.stats = Some(stats);
  }

  pub fn with_stats(mut self, stats: Value) -> DestinyResponsesDestinyItemResponse {
    self.stats = Some(stats);
    self
  }

  pub fn stats(&self) -> Option<&Value> {
    self.stats.as_ref()
  }

  pub fn reset_stats(&mut self) {
    self.stats = None;
  }

  pub fn set_talent_grid(&mut self, talent_grid: Value) {
    self.talent_grid = Some(talent_grid);
  }

  pub fn with_talent_grid(mut self, talent_grid: Value) -> DestinyResponsesDestinyItemResponse {
    self.talent_grid = Some(talent_grid);
    self
  }

  pub fn talent_grid(&self) -> Option<&Value> {
    self.talent_grid.as_ref()
  }

  pub fn reset_talent_grid(&mut self) {
    self.talent_grid = None;
  }

  pub fn set_sockets(&mut self, sockets: Value) {
    self.sockets = Some(sockets);
  }

  pub fn with_sockets(mut self, sockets: Value) -> DestinyResponsesDestinyItemResponse {
    self.sockets = Some(sockets);
    self
  }

  pub fn sockets(&self) -> Option<&Value> {
    self.sockets.as_ref()
  }

  pub fn reset_sockets(&mut self) {
    self.sockets = None;
  }

  pub fn set_reusable_plugs(&mut self, reusable_plugs: Value) {
    self.reusable_plugs = Some(reusable_plugs);
  }

  pub fn with_reusable_plugs(mut self, reusable_plugs: Value) -> DestinyResponsesDestinyItemResponse {
    self.reusable_plugs = Some(reusable_plugs);
    self
  }

  pub fn reusable_plugs(&self) -> Option<&Value> {
    self.reusable_plugs.as_ref()
  }

  pub fn reset_reusable_plugs(&mut self) {
    self.reusable_plugs = None;
  }

  pub fn set_plug_objectives(&mut self, plug_objectives: Value) {
    self.plug_objectives = Some(plug_objectives);
  }

  pub fn with_plug_objectives(mut self, plug_objectives: Value) -> DestinyResponsesDestinyItemResponse {
    self.plug_objectives = Some(plug_objectives);
    self
  }

  pub fn plug_objectives(&self) -> Option<&Value> {
    self.plug_objectives.as_ref()
  }

  pub fn reset_plug_objectives(&mut self) {
    self.plug_objectives = None;
  }

}



