/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyCharacterDestinyItemPeerView : Bare minimum summary information for an item, for the sake of 3D rendering the item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyCharacterDestinyItemPeerView {
  /// The hash identifier of the item in question. Use it to look up the DestinyInventoryItemDefinition of the item for static rendering data.
  #[serde(rename = "itemHash")]
  item_hash: Option<i32>,
  /// The list of dyes that have been applied to this item.
  #[serde(rename = "dyes")]
  dyes: Option<Vec<::models::DestinyDyeReference>>
}

impl DestinyCharacterDestinyItemPeerView {
  /// Bare minimum summary information for an item, for the sake of 3D rendering the item.
  pub fn new() -> DestinyCharacterDestinyItemPeerView {
    DestinyCharacterDestinyItemPeerView {
      item_hash: None,
      dyes: None
    }
  }

  pub fn set_item_hash(&mut self, item_hash: i32) {
    self.item_hash = Some(item_hash);
  }

  pub fn with_item_hash(mut self, item_hash: i32) -> DestinyCharacterDestinyItemPeerView {
    self.item_hash = Some(item_hash);
    self
  }

  pub fn item_hash(&self) -> Option<&i32> {
    self.item_hash.as_ref()
  }

  pub fn reset_item_hash(&mut self) {
    self.item_hash = None;
  }

  pub fn set_dyes(&mut self, dyes: Vec<::models::DestinyDyeReference>) {
    self.dyes = Some(dyes);
  }

  pub fn with_dyes(mut self, dyes: Vec<::models::DestinyDyeReference>) -> DestinyCharacterDestinyItemPeerView {
    self.dyes = Some(dyes);
    self
  }

  pub fn dyes(&self) -> Option<&Vec<::models::DestinyDyeReference>> {
    self.dyes.as_ref()
  }

  pub fn reset_dyes(&mut self) {
    self.dyes = None;
  }

}



