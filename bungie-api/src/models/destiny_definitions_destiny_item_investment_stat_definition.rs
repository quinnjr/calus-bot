/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemInvestmentStatDefinition : Represents a \"raw\" investment stat, before calculated stats are calculated and before any DestinyStatGroupDefinition is applied to transform the stat into something closer to what you see in-game.  Because these won't match what you see in-game, consider carefully whether you really want to use these stats. I have left them in case someone can do something useful or interesting with the pre-processed statistics.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemInvestmentStatDefinition {
  /// The hash identifier for the DestinyStatDefinition defining this stat.
  #[serde(rename = "statTypeHash")]
  stat_type_hash: Option<i32>,
  /// The raw \"Investment\" value for the stat, before transformations are performed to turn this raw stat into stats that are displayed in the game UI.
  #[serde(rename = "value")]
  value: Option<i32>,
  /// If this is true, the stat will only be applied on the item in certain game state conditions, and we can't know statically whether or not this stat will be applied. Check the \"live\" API data instead for whether this value is being applied on a specific instance of the item in question, and you can use this to decide whether you want to show the stat on the generic view of the item, or whether you want to show some kind of caveat or warning about the stat value being conditional on game state.
  #[serde(rename = "isConditionallyActive")]
  is_conditionally_active: Option<bool>
}

impl DestinyDefinitionsDestinyItemInvestmentStatDefinition {
  /// Represents a \"raw\" investment stat, before calculated stats are calculated and before any DestinyStatGroupDefinition is applied to transform the stat into something closer to what you see in-game.  Because these won't match what you see in-game, consider carefully whether you really want to use these stats. I have left them in case someone can do something useful or interesting with the pre-processed statistics.
  pub fn new() -> DestinyDefinitionsDestinyItemInvestmentStatDefinition {
    DestinyDefinitionsDestinyItemInvestmentStatDefinition {
      stat_type_hash: None,
      value: None,
      is_conditionally_active: None
    }
  }

  pub fn set_stat_type_hash(&mut self, stat_type_hash: i32) {
    self.stat_type_hash = Some(stat_type_hash);
  }

  pub fn with_stat_type_hash(mut self, stat_type_hash: i32) -> DestinyDefinitionsDestinyItemInvestmentStatDefinition {
    self.stat_type_hash = Some(stat_type_hash);
    self
  }

  pub fn stat_type_hash(&self) -> Option<&i32> {
    self.stat_type_hash.as_ref()
  }

  pub fn reset_stat_type_hash(&mut self) {
    self.stat_type_hash = None;
  }

  pub fn set_value(&mut self, value: i32) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: i32) -> DestinyDefinitionsDestinyItemInvestmentStatDefinition {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&i32> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

  pub fn set_is_conditionally_active(&mut self, is_conditionally_active: bool) {
    self.is_conditionally_active = Some(is_conditionally_active);
  }

  pub fn with_is_conditionally_active(mut self, is_conditionally_active: bool) -> DestinyDefinitionsDestinyItemInvestmentStatDefinition {
    self.is_conditionally_active = Some(is_conditionally_active);
    self
  }

  pub fn is_conditionally_active(&self) -> Option<&bool> {
    self.is_conditionally_active.as_ref()
  }

  pub fn reset_is_conditionally_active(&mut self) {
    self.is_conditionally_active = None;
  }

}



