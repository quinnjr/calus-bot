/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyReportingRequestsDestinyReportOffensePgcrRequest : If you want to report a player causing trouble in a game, this request will let you report that player and the specific PGCR in which the trouble was caused, along with why.  Please don't do this just because you dislike the person! I mean, I know people will do it anyways, but can you like take a good walk, or put a curse on them or something? Do me a solid and reconsider.  Note that this request object doesn't have the actual PGCR ID nor your Account/Character ID in it. We will infer that information from your authentication information and the PGCR ID that you pass into the URL of the reporting endpoint itself.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyReportingRequestsDestinyReportOffensePgcrRequest {
  /// So you've decided to report someone instead of cursing them and their descendants. Well, okay then. This is the category or categorie(s) of infractions for which you are reporting the user. These are hash identifiers that map to DestinyReportReasonCategoryDefinition entries.
  #[serde(rename = "reasonCategoryHashes")]
  reason_category_hashes: Option<Vec<i32>>,
  /// If applicable, provide a more specific reason(s) within the general category of problems provided by the reasonHash. This is also an identifier for a reason. All reasonHashes provided must be children of at least one the reasonCategoryHashes provided.
  #[serde(rename = "reasonHashes")]
  reason_hashes: Option<Vec<i32>>,
  /// Within the PGCR provided when calling the Reporting endpoint, this should be the character ID of the user that you thought was violating terms of use. They must exist in the PGCR provided.
  #[serde(rename = "offendingCharacterId")]
  offending_character_id: Option<i64>
}

impl DestinyReportingRequestsDestinyReportOffensePgcrRequest {
  /// If you want to report a player causing trouble in a game, this request will let you report that player and the specific PGCR in which the trouble was caused, along with why.  Please don't do this just because you dislike the person! I mean, I know people will do it anyways, but can you like take a good walk, or put a curse on them or something? Do me a solid and reconsider.  Note that this request object doesn't have the actual PGCR ID nor your Account/Character ID in it. We will infer that information from your authentication information and the PGCR ID that you pass into the URL of the reporting endpoint itself.
  pub fn new() -> DestinyReportingRequestsDestinyReportOffensePgcrRequest {
    DestinyReportingRequestsDestinyReportOffensePgcrRequest {
      reason_category_hashes: None,
      reason_hashes: None,
      offending_character_id: None
    }
  }

  pub fn set_reason_category_hashes(&mut self, reason_category_hashes: Vec<i32>) {
    self.reason_category_hashes = Some(reason_category_hashes);
  }

  pub fn with_reason_category_hashes(mut self, reason_category_hashes: Vec<i32>) -> DestinyReportingRequestsDestinyReportOffensePgcrRequest {
    self.reason_category_hashes = Some(reason_category_hashes);
    self
  }

  pub fn reason_category_hashes(&self) -> Option<&Vec<i32>> {
    self.reason_category_hashes.as_ref()
  }

  pub fn reset_reason_category_hashes(&mut self) {
    self.reason_category_hashes = None;
  }

  pub fn set_reason_hashes(&mut self, reason_hashes: Vec<i32>) {
    self.reason_hashes = Some(reason_hashes);
  }

  pub fn with_reason_hashes(mut self, reason_hashes: Vec<i32>) -> DestinyReportingRequestsDestinyReportOffensePgcrRequest {
    self.reason_hashes = Some(reason_hashes);
    self
  }

  pub fn reason_hashes(&self) -> Option<&Vec<i32>> {
    self.reason_hashes.as_ref()
  }

  pub fn reset_reason_hashes(&mut self) {
    self.reason_hashes = None;
  }

  pub fn set_offending_character_id(&mut self, offending_character_id: i64) {
    self.offending_character_id = Some(offending_character_id);
  }

  pub fn with_offending_character_id(mut self, offending_character_id: i64) -> DestinyReportingRequestsDestinyReportOffensePgcrRequest {
    self.offending_character_id = Some(offending_character_id);
    self
  }

  pub fn offending_character_id(&self) -> Option<&i64> {
    self.offending_character_id.as_ref()
  }

  pub fn reset_offending_character_id(&mut self) {
    self.offending_character_id = None;
  }

}



