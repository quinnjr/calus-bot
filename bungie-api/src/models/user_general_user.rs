/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserGeneralUser {
  #[serde(rename = "membershipId")]
  membership_id: Option<i64>,
  #[serde(rename = "uniqueName")]
  unique_name: Option<String>,
  #[serde(rename = "normalizedName")]
  normalized_name: Option<String>,
  #[serde(rename = "displayName")]
  display_name: Option<String>,
  #[serde(rename = "profilePicture")]
  profile_picture: Option<i32>,
  #[serde(rename = "profileTheme")]
  profile_theme: Option<i32>,
  #[serde(rename = "userTitle")]
  user_title: Option<i32>,
  #[serde(rename = "successMessageFlags")]
  success_message_flags: Option<i64>,
  #[serde(rename = "isDeleted")]
  is_deleted: Option<bool>,
  #[serde(rename = "about")]
  about: Option<String>,
  #[serde(rename = "firstAccess")]
  first_access: Option<String>,
  #[serde(rename = "lastUpdate")]
  last_update: Option<String>,
  #[serde(rename = "legacyPortalUID")]
  legacy_portal_uid: Option<i64>,
  #[serde(rename = "context")]
  context: Option<::models::UserUserToUserContext>,
  #[serde(rename = "psnDisplayName")]
  psn_display_name: Option<String>,
  #[serde(rename = "xboxDisplayName")]
  xbox_display_name: Option<String>,
  #[serde(rename = "fbDisplayName")]
  fb_display_name: Option<String>,
  #[serde(rename = "showActivity")]
  show_activity: Option<bool>,
  #[serde(rename = "locale")]
  locale: Option<String>,
  #[serde(rename = "localeInheritDefault")]
  locale_inherit_default: Option<bool>,
  #[serde(rename = "lastBanReportId")]
  last_ban_report_id: Option<i64>,
  #[serde(rename = "showGroupMessaging")]
  show_group_messaging: Option<bool>,
  #[serde(rename = "profilePicturePath")]
  profile_picture_path: Option<String>,
  #[serde(rename = "profilePictureWidePath")]
  profile_picture_wide_path: Option<String>,
  #[serde(rename = "profileThemeName")]
  profile_theme_name: Option<String>,
  #[serde(rename = "userTitleDisplay")]
  user_title_display: Option<String>,
  #[serde(rename = "statusText")]
  status_text: Option<String>,
  #[serde(rename = "statusDate")]
  status_date: Option<String>,
  #[serde(rename = "profileBanExpire")]
  profile_ban_expire: Option<String>,
  #[serde(rename = "blizzardDisplayName")]
  blizzard_display_name: Option<String>,
  #[serde(rename = "steamDisplayName")]
  steam_display_name: Option<String>,
  #[serde(rename = "stadiaDisplayName")]
  stadia_display_name: Option<String>
}

impl UserGeneralUser {
  pub fn new() -> UserGeneralUser {
    UserGeneralUser {
      membership_id: None,
      unique_name: None,
      normalized_name: None,
      display_name: None,
      profile_picture: None,
      profile_theme: None,
      user_title: None,
      success_message_flags: None,
      is_deleted: None,
      about: None,
      first_access: None,
      last_update: None,
      legacy_portal_uid: None,
      context: None,
      psn_display_name: None,
      xbox_display_name: None,
      fb_display_name: None,
      show_activity: None,
      locale: None,
      locale_inherit_default: None,
      last_ban_report_id: None,
      show_group_messaging: None,
      profile_picture_path: None,
      profile_picture_wide_path: None,
      profile_theme_name: None,
      user_title_display: None,
      status_text: None,
      status_date: None,
      profile_ban_expire: None,
      blizzard_display_name: None,
      steam_display_name: None,
      stadia_display_name: None
    }
  }

  pub fn set_membership_id(&mut self, membership_id: i64) {
    self.membership_id = Some(membership_id);
  }

  pub fn with_membership_id(mut self, membership_id: i64) -> UserGeneralUser {
    self.membership_id = Some(membership_id);
    self
  }

  pub fn membership_id(&self) -> Option<&i64> {
    self.membership_id.as_ref()
  }

  pub fn reset_membership_id(&mut self) {
    self.membership_id = None;
  }

  pub fn set_unique_name(&mut self, unique_name: String) {
    self.unique_name = Some(unique_name);
  }

  pub fn with_unique_name(mut self, unique_name: String) -> UserGeneralUser {
    self.unique_name = Some(unique_name);
    self
  }

  pub fn unique_name(&self) -> Option<&String> {
    self.unique_name.as_ref()
  }

  pub fn reset_unique_name(&mut self) {
    self.unique_name = None;
  }

  pub fn set_normalized_name(&mut self, normalized_name: String) {
    self.normalized_name = Some(normalized_name);
  }

  pub fn with_normalized_name(mut self, normalized_name: String) -> UserGeneralUser {
    self.normalized_name = Some(normalized_name);
    self
  }

  pub fn normalized_name(&self) -> Option<&String> {
    self.normalized_name.as_ref()
  }

  pub fn reset_normalized_name(&mut self) {
    self.normalized_name = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> UserGeneralUser {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_profile_picture(&mut self, profile_picture: i32) {
    self.profile_picture = Some(profile_picture);
  }

  pub fn with_profile_picture(mut self, profile_picture: i32) -> UserGeneralUser {
    self.profile_picture = Some(profile_picture);
    self
  }

  pub fn profile_picture(&self) -> Option<&i32> {
    self.profile_picture.as_ref()
  }

  pub fn reset_profile_picture(&mut self) {
    self.profile_picture = None;
  }

  pub fn set_profile_theme(&mut self, profile_theme: i32) {
    self.profile_theme = Some(profile_theme);
  }

  pub fn with_profile_theme(mut self, profile_theme: i32) -> UserGeneralUser {
    self.profile_theme = Some(profile_theme);
    self
  }

  pub fn profile_theme(&self) -> Option<&i32> {
    self.profile_theme.as_ref()
  }

  pub fn reset_profile_theme(&mut self) {
    self.profile_theme = None;
  }

  pub fn set_user_title(&mut self, user_title: i32) {
    self.user_title = Some(user_title);
  }

  pub fn with_user_title(mut self, user_title: i32) -> UserGeneralUser {
    self.user_title = Some(user_title);
    self
  }

  pub fn user_title(&self) -> Option<&i32> {
    self.user_title.as_ref()
  }

  pub fn reset_user_title(&mut self) {
    self.user_title = None;
  }

  pub fn set_success_message_flags(&mut self, success_message_flags: i64) {
    self.success_message_flags = Some(success_message_flags);
  }

  pub fn with_success_message_flags(mut self, success_message_flags: i64) -> UserGeneralUser {
    self.success_message_flags = Some(success_message_flags);
    self
  }

  pub fn success_message_flags(&self) -> Option<&i64> {
    self.success_message_flags.as_ref()
  }

  pub fn reset_success_message_flags(&mut self) {
    self.success_message_flags = None;
  }

  pub fn set_is_deleted(&mut self, is_deleted: bool) {
    self.is_deleted = Some(is_deleted);
  }

  pub fn with_is_deleted(mut self, is_deleted: bool) -> UserGeneralUser {
    self.is_deleted = Some(is_deleted);
    self
  }

  pub fn is_deleted(&self) -> Option<&bool> {
    self.is_deleted.as_ref()
  }

  pub fn reset_is_deleted(&mut self) {
    self.is_deleted = None;
  }

  pub fn set_about(&mut self, about: String) {
    self.about = Some(about);
  }

  pub fn with_about(mut self, about: String) -> UserGeneralUser {
    self.about = Some(about);
    self
  }

  pub fn about(&self) -> Option<&String> {
    self.about.as_ref()
  }

  pub fn reset_about(&mut self) {
    self.about = None;
  }

  pub fn set_first_access(&mut self, first_access: String) {
    self.first_access = Some(first_access);
  }

  pub fn with_first_access(mut self, first_access: String) -> UserGeneralUser {
    self.first_access = Some(first_access);
    self
  }

  pub fn first_access(&self) -> Option<&String> {
    self.first_access.as_ref()
  }

  pub fn reset_first_access(&mut self) {
    self.first_access = None;
  }

  pub fn set_last_update(&mut self, last_update: String) {
    self.last_update = Some(last_update);
  }

  pub fn with_last_update(mut self, last_update: String) -> UserGeneralUser {
    self.last_update = Some(last_update);
    self
  }

  pub fn last_update(&self) -> Option<&String> {
    self.last_update.as_ref()
  }

  pub fn reset_last_update(&mut self) {
    self.last_update = None;
  }

  pub fn set_legacy_portal_uid(&mut self, legacy_portal_uid: i64) {
    self.legacy_portal_uid = Some(legacy_portal_uid);
  }

  pub fn with_legacy_portal_uid(mut self, legacy_portal_uid: i64) -> UserGeneralUser {
    self.legacy_portal_uid = Some(legacy_portal_uid);
    self
  }

  pub fn legacy_portal_uid(&self) -> Option<&i64> {
    self.legacy_portal_uid.as_ref()
  }

  pub fn reset_legacy_portal_uid(&mut self) {
    self.legacy_portal_uid = None;
  }

  pub fn set_context(&mut self, context: ::models::UserUserToUserContext) {
    self.context = Some(context);
  }

  pub fn with_context(mut self, context: ::models::UserUserToUserContext) -> UserGeneralUser {
    self.context = Some(context);
    self
  }

  pub fn context(&self) -> Option<&::models::UserUserToUserContext> {
    self.context.as_ref()
  }

  pub fn reset_context(&mut self) {
    self.context = None;
  }

  pub fn set_psn_display_name(&mut self, psn_display_name: String) {
    self.psn_display_name = Some(psn_display_name);
  }

  pub fn with_psn_display_name(mut self, psn_display_name: String) -> UserGeneralUser {
    self.psn_display_name = Some(psn_display_name);
    self
  }

  pub fn psn_display_name(&self) -> Option<&String> {
    self.psn_display_name.as_ref()
  }

  pub fn reset_psn_display_name(&mut self) {
    self.psn_display_name = None;
  }

  pub fn set_xbox_display_name(&mut self, xbox_display_name: String) {
    self.xbox_display_name = Some(xbox_display_name);
  }

  pub fn with_xbox_display_name(mut self, xbox_display_name: String) -> UserGeneralUser {
    self.xbox_display_name = Some(xbox_display_name);
    self
  }

  pub fn xbox_display_name(&self) -> Option<&String> {
    self.xbox_display_name.as_ref()
  }

  pub fn reset_xbox_display_name(&mut self) {
    self.xbox_display_name = None;
  }

  pub fn set_fb_display_name(&mut self, fb_display_name: String) {
    self.fb_display_name = Some(fb_display_name);
  }

  pub fn with_fb_display_name(mut self, fb_display_name: String) -> UserGeneralUser {
    self.fb_display_name = Some(fb_display_name);
    self
  }

  pub fn fb_display_name(&self) -> Option<&String> {
    self.fb_display_name.as_ref()
  }

  pub fn reset_fb_display_name(&mut self) {
    self.fb_display_name = None;
  }

  pub fn set_show_activity(&mut self, show_activity: bool) {
    self.show_activity = Some(show_activity);
  }

  pub fn with_show_activity(mut self, show_activity: bool) -> UserGeneralUser {
    self.show_activity = Some(show_activity);
    self
  }

  pub fn show_activity(&self) -> Option<&bool> {
    self.show_activity.as_ref()
  }

  pub fn reset_show_activity(&mut self) {
    self.show_activity = None;
  }

  pub fn set_locale(&mut self, locale: String) {
    self.locale = Some(locale);
  }

  pub fn with_locale(mut self, locale: String) -> UserGeneralUser {
    self.locale = Some(locale);
    self
  }

  pub fn locale(&self) -> Option<&String> {
    self.locale.as_ref()
  }

  pub fn reset_locale(&mut self) {
    self.locale = None;
  }

  pub fn set_locale_inherit_default(&mut self, locale_inherit_default: bool) {
    self.locale_inherit_default = Some(locale_inherit_default);
  }

  pub fn with_locale_inherit_default(mut self, locale_inherit_default: bool) -> UserGeneralUser {
    self.locale_inherit_default = Some(locale_inherit_default);
    self
  }

  pub fn locale_inherit_default(&self) -> Option<&bool> {
    self.locale_inherit_default.as_ref()
  }

  pub fn reset_locale_inherit_default(&mut self) {
    self.locale_inherit_default = None;
  }

  pub fn set_last_ban_report_id(&mut self, last_ban_report_id: i64) {
    self.last_ban_report_id = Some(last_ban_report_id);
  }

  pub fn with_last_ban_report_id(mut self, last_ban_report_id: i64) -> UserGeneralUser {
    self.last_ban_report_id = Some(last_ban_report_id);
    self
  }

  pub fn last_ban_report_id(&self) -> Option<&i64> {
    self.last_ban_report_id.as_ref()
  }

  pub fn reset_last_ban_report_id(&mut self) {
    self.last_ban_report_id = None;
  }

  pub fn set_show_group_messaging(&mut self, show_group_messaging: bool) {
    self.show_group_messaging = Some(show_group_messaging);
  }

  pub fn with_show_group_messaging(mut self, show_group_messaging: bool) -> UserGeneralUser {
    self.show_group_messaging = Some(show_group_messaging);
    self
  }

  pub fn show_group_messaging(&self) -> Option<&bool> {
    self.show_group_messaging.as_ref()
  }

  pub fn reset_show_group_messaging(&mut self) {
    self.show_group_messaging = None;
  }

  pub fn set_profile_picture_path(&mut self, profile_picture_path: String) {
    self.profile_picture_path = Some(profile_picture_path);
  }

  pub fn with_profile_picture_path(mut self, profile_picture_path: String) -> UserGeneralUser {
    self.profile_picture_path = Some(profile_picture_path);
    self
  }

  pub fn profile_picture_path(&self) -> Option<&String> {
    self.profile_picture_path.as_ref()
  }

  pub fn reset_profile_picture_path(&mut self) {
    self.profile_picture_path = None;
  }

  pub fn set_profile_picture_wide_path(&mut self, profile_picture_wide_path: String) {
    self.profile_picture_wide_path = Some(profile_picture_wide_path);
  }

  pub fn with_profile_picture_wide_path(mut self, profile_picture_wide_path: String) -> UserGeneralUser {
    self.profile_picture_wide_path = Some(profile_picture_wide_path);
    self
  }

  pub fn profile_picture_wide_path(&self) -> Option<&String> {
    self.profile_picture_wide_path.as_ref()
  }

  pub fn reset_profile_picture_wide_path(&mut self) {
    self.profile_picture_wide_path = None;
  }

  pub fn set_profile_theme_name(&mut self, profile_theme_name: String) {
    self.profile_theme_name = Some(profile_theme_name);
  }

  pub fn with_profile_theme_name(mut self, profile_theme_name: String) -> UserGeneralUser {
    self.profile_theme_name = Some(profile_theme_name);
    self
  }

  pub fn profile_theme_name(&self) -> Option<&String> {
    self.profile_theme_name.as_ref()
  }

  pub fn reset_profile_theme_name(&mut self) {
    self.profile_theme_name = None;
  }

  pub fn set_user_title_display(&mut self, user_title_display: String) {
    self.user_title_display = Some(user_title_display);
  }

  pub fn with_user_title_display(mut self, user_title_display: String) -> UserGeneralUser {
    self.user_title_display = Some(user_title_display);
    self
  }

  pub fn user_title_display(&self) -> Option<&String> {
    self.user_title_display.as_ref()
  }

  pub fn reset_user_title_display(&mut self) {
    self.user_title_display = None;
  }

  pub fn set_status_text(&mut self, status_text: String) {
    self.status_text = Some(status_text);
  }

  pub fn with_status_text(mut self, status_text: String) -> UserGeneralUser {
    self.status_text = Some(status_text);
    self
  }

  pub fn status_text(&self) -> Option<&String> {
    self.status_text.as_ref()
  }

  pub fn reset_status_text(&mut self) {
    self.status_text = None;
  }

  pub fn set_status_date(&mut self, status_date: String) {
    self.status_date = Some(status_date);
  }

  pub fn with_status_date(mut self, status_date: String) -> UserGeneralUser {
    self.status_date = Some(status_date);
    self
  }

  pub fn status_date(&self) -> Option<&String> {
    self.status_date.as_ref()
  }

  pub fn reset_status_date(&mut self) {
    self.status_date = None;
  }

  pub fn set_profile_ban_expire(&mut self, profile_ban_expire: String) {
    self.profile_ban_expire = Some(profile_ban_expire);
  }

  pub fn with_profile_ban_expire(mut self, profile_ban_expire: String) -> UserGeneralUser {
    self.profile_ban_expire = Some(profile_ban_expire);
    self
  }

  pub fn profile_ban_expire(&self) -> Option<&String> {
    self.profile_ban_expire.as_ref()
  }

  pub fn reset_profile_ban_expire(&mut self) {
    self.profile_ban_expire = None;
  }

  pub fn set_blizzard_display_name(&mut self, blizzard_display_name: String) {
    self.blizzard_display_name = Some(blizzard_display_name);
  }

  pub fn with_blizzard_display_name(mut self, blizzard_display_name: String) -> UserGeneralUser {
    self.blizzard_display_name = Some(blizzard_display_name);
    self
  }

  pub fn blizzard_display_name(&self) -> Option<&String> {
    self.blizzard_display_name.as_ref()
  }

  pub fn reset_blizzard_display_name(&mut self) {
    self.blizzard_display_name = None;
  }

  pub fn set_steam_display_name(&mut self, steam_display_name: String) {
    self.steam_display_name = Some(steam_display_name);
  }

  pub fn with_steam_display_name(mut self, steam_display_name: String) -> UserGeneralUser {
    self.steam_display_name = Some(steam_display_name);
    self
  }

  pub fn steam_display_name(&self) -> Option<&String> {
    self.steam_display_name.as_ref()
  }

  pub fn reset_steam_display_name(&mut self) {
    self.steam_display_name = None;
  }

  pub fn set_stadia_display_name(&mut self, stadia_display_name: String) {
    self.stadia_display_name = Some(stadia_display_name);
  }

  pub fn with_stadia_display_name(mut self, stadia_display_name: String) -> UserGeneralUser {
    self.stadia_display_name = Some(stadia_display_name);
    self
  }

  pub fn stadia_display_name(&self) -> Option<&String> {
    self.stadia_display_name.as_ref()
  }

  pub fn reset_stadia_display_name(&mut self) {
    self.stadia_display_name = None;
  }

}



