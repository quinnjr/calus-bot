/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyActivityLoadoutRequirementSet {
  /// The set of requirements that will be applied on the activity if this requirement set is active.
  #[serde(rename = "requirements")]
  requirements: Option<Vec<::models::DestinyDefinitionsDestinyActivityLoadoutRequirement>>
}

impl DestinyDefinitionsDestinyActivityLoadoutRequirementSet {
  pub fn new() -> DestinyDefinitionsDestinyActivityLoadoutRequirementSet {
    DestinyDefinitionsDestinyActivityLoadoutRequirementSet {
      requirements: None
    }
  }

  pub fn set_requirements(&mut self, requirements: Vec<::models::DestinyDefinitionsDestinyActivityLoadoutRequirement>) {
    self.requirements = Some(requirements);
  }

  pub fn with_requirements(mut self, requirements: Vec<::models::DestinyDefinitionsDestinyActivityLoadoutRequirement>) -> DestinyDefinitionsDestinyActivityLoadoutRequirementSet {
    self.requirements = Some(requirements);
    self
  }

  pub fn requirements(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyActivityLoadoutRequirement>> {
    self.requirements.as_ref()
  }

  pub fn reset_requirements(&mut self) {
    self.requirements = None;
  }

}



