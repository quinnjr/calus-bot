/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemSocketEntryDefinition : The definition information for a specific socket on an item. This will determine how the socket behaves in-game.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemSocketEntryDefinition {
  /// All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.
  #[serde(rename = "socketTypeHash")]
  socket_type_hash: Option<i32>,
  /// If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.
  #[serde(rename = "singleInitialItemHash")]
  single_initial_item_hash: Option<i32>,
  /// This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
  #[serde(rename = "reusablePlugItems")]
  reusable_plug_items: Option<Vec<::models::DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition>>,
  /// If this is true, then the socket will not be initialized with a plug if the item is purchased from a Vendor.  Remember that Vendors are much more than conceptual vendors: they include \"Collection Kiosks\" and other entities. See DestinyVendorDefinition for more information.
  #[serde(rename = "preventInitializationOnVendorPurchase")]
  prevent_initialization_on_vendor_purchase: Option<bool>,
  /// If this is true, the perks provided by this socket shouldn't be shown in the item's tooltip. This might be useful if it's providing a hidden bonus, or if the bonus is less important than other benefits on the item.
  #[serde(rename = "hidePerksInItemTooltip")]
  hide_perks_in_item_tooltip: Option<bool>,
  /// Indicates where you should go to get plugs for this socket. This will affect how you populate your UI, as well as what plugs are valid for this socket. It's an alternative to having to check for the existence of certain properties (reusablePlugItems for example) to infer where plugs should come from.
  #[serde(rename = "plugSources")]
  plug_sources: Option<i32>,
  /// If this socket's plugs come from a reusable DestinyPlugSetDefinition, this is the identifier for that set. We added this concept to reduce some major duplication that's going to come from sockets as replacements for what was once implemented as large sets of items and kiosks (like Emotes).   As of Shadowkeep, these will come up much more frequently and be driven by game content rather than custom curation.
  #[serde(rename = "reusablePlugSetHash")]
  reusable_plug_set_hash: Option<i32>,
  /// This field replaces \"randomizedPlugItems\" as of Shadowkeep launch. If a socket has randomized plugs, this is a pointer to the set of plugs that could be used, as defined in DestinyPlugSetDefinition.   If null, the item has no randomized plugs.
  #[serde(rename = "randomizedPlugSetHash")]
  randomized_plug_set_hash: Option<i32>,
  /// If true, then this socket is visible in the item's \"default\" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.
  #[serde(rename = "defaultVisible")]
  default_visible: Option<bool>
}

impl DestinyDefinitionsDestinyItemSocketEntryDefinition {
  /// The definition information for a specific socket on an item. This will determine how the socket behaves in-game.
  pub fn new() -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    DestinyDefinitionsDestinyItemSocketEntryDefinition {
      socket_type_hash: None,
      single_initial_item_hash: None,
      reusable_plug_items: None,
      prevent_initialization_on_vendor_purchase: None,
      hide_perks_in_item_tooltip: None,
      plug_sources: None,
      reusable_plug_set_hash: None,
      randomized_plug_set_hash: None,
      default_visible: None
    }
  }

  pub fn set_socket_type_hash(&mut self, socket_type_hash: i32) {
    self.socket_type_hash = Some(socket_type_hash);
  }

  pub fn with_socket_type_hash(mut self, socket_type_hash: i32) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.socket_type_hash = Some(socket_type_hash);
    self
  }

  pub fn socket_type_hash(&self) -> Option<&i32> {
    self.socket_type_hash.as_ref()
  }

  pub fn reset_socket_type_hash(&mut self) {
    self.socket_type_hash = None;
  }

  pub fn set_single_initial_item_hash(&mut self, single_initial_item_hash: i32) {
    self.single_initial_item_hash = Some(single_initial_item_hash);
  }

  pub fn with_single_initial_item_hash(mut self, single_initial_item_hash: i32) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.single_initial_item_hash = Some(single_initial_item_hash);
    self
  }

  pub fn single_initial_item_hash(&self) -> Option<&i32> {
    self.single_initial_item_hash.as_ref()
  }

  pub fn reset_single_initial_item_hash(&mut self) {
    self.single_initial_item_hash = None;
  }

  pub fn set_reusable_plug_items(&mut self, reusable_plug_items: Vec<::models::DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition>) {
    self.reusable_plug_items = Some(reusable_plug_items);
  }

  pub fn with_reusable_plug_items(mut self, reusable_plug_items: Vec<::models::DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition>) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.reusable_plug_items = Some(reusable_plug_items);
    self
  }

  pub fn reusable_plug_items(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition>> {
    self.reusable_plug_items.as_ref()
  }

  pub fn reset_reusable_plug_items(&mut self) {
    self.reusable_plug_items = None;
  }

  pub fn set_prevent_initialization_on_vendor_purchase(&mut self, prevent_initialization_on_vendor_purchase: bool) {
    self.prevent_initialization_on_vendor_purchase = Some(prevent_initialization_on_vendor_purchase);
  }

  pub fn with_prevent_initialization_on_vendor_purchase(mut self, prevent_initialization_on_vendor_purchase: bool) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.prevent_initialization_on_vendor_purchase = Some(prevent_initialization_on_vendor_purchase);
    self
  }

  pub fn prevent_initialization_on_vendor_purchase(&self) -> Option<&bool> {
    self.prevent_initialization_on_vendor_purchase.as_ref()
  }

  pub fn reset_prevent_initialization_on_vendor_purchase(&mut self) {
    self.prevent_initialization_on_vendor_purchase = None;
  }

  pub fn set_hide_perks_in_item_tooltip(&mut self, hide_perks_in_item_tooltip: bool) {
    self.hide_perks_in_item_tooltip = Some(hide_perks_in_item_tooltip);
  }

  pub fn with_hide_perks_in_item_tooltip(mut self, hide_perks_in_item_tooltip: bool) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.hide_perks_in_item_tooltip = Some(hide_perks_in_item_tooltip);
    self
  }

  pub fn hide_perks_in_item_tooltip(&self) -> Option<&bool> {
    self.hide_perks_in_item_tooltip.as_ref()
  }

  pub fn reset_hide_perks_in_item_tooltip(&mut self) {
    self.hide_perks_in_item_tooltip = None;
  }

  pub fn set_plug_sources(&mut self, plug_sources: i32) {
    self.plug_sources = Some(plug_sources);
  }

  pub fn with_plug_sources(mut self, plug_sources: i32) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.plug_sources = Some(plug_sources);
    self
  }

  pub fn plug_sources(&self) -> Option<&i32> {
    self.plug_sources.as_ref()
  }

  pub fn reset_plug_sources(&mut self) {
    self.plug_sources = None;
  }

  pub fn set_reusable_plug_set_hash(&mut self, reusable_plug_set_hash: i32) {
    self.reusable_plug_set_hash = Some(reusable_plug_set_hash);
  }

  pub fn with_reusable_plug_set_hash(mut self, reusable_plug_set_hash: i32) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.reusable_plug_set_hash = Some(reusable_plug_set_hash);
    self
  }

  pub fn reusable_plug_set_hash(&self) -> Option<&i32> {
    self.reusable_plug_set_hash.as_ref()
  }

  pub fn reset_reusable_plug_set_hash(&mut self) {
    self.reusable_plug_set_hash = None;
  }

  pub fn set_randomized_plug_set_hash(&mut self, randomized_plug_set_hash: i32) {
    self.randomized_plug_set_hash = Some(randomized_plug_set_hash);
  }

  pub fn with_randomized_plug_set_hash(mut self, randomized_plug_set_hash: i32) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.randomized_plug_set_hash = Some(randomized_plug_set_hash);
    self
  }

  pub fn randomized_plug_set_hash(&self) -> Option<&i32> {
    self.randomized_plug_set_hash.as_ref()
  }

  pub fn reset_randomized_plug_set_hash(&mut self) {
    self.randomized_plug_set_hash = None;
  }

  pub fn set_default_visible(&mut self, default_visible: bool) {
    self.default_visible = Some(default_visible);
  }

  pub fn with_default_visible(mut self, default_visible: bool) -> DestinyDefinitionsDestinyItemSocketEntryDefinition {
    self.default_visible = Some(default_visible);
    self
  }

  pub fn default_visible(&self) -> Option<&bool> {
    self.default_visible.as_ref()
  }

  pub fn reset_default_visible(&mut self) {
    self.default_visible = None;
  }

}



