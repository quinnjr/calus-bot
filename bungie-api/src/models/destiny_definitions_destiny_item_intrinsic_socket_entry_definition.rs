/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition : Represents a socket that has a plug associated with it intrinsically. This is useful for situations where the weapon needs to have a visual plug/Mod on it, but that plug/Mod should never change.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition {
  /// Indicates the plug that is intrinsically inserted into this socket.
  #[serde(rename = "plugItemHash")]
  plug_item_hash: Option<i32>,
  /// Indicates the type of this intrinsic socket.
  #[serde(rename = "socketTypeHash")]
  socket_type_hash: Option<i32>,
  /// If true, then this socket is visible in the item's \"default\" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.
  #[serde(rename = "defaultVisible")]
  default_visible: Option<bool>
}

impl DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition {
  /// Represents a socket that has a plug associated with it intrinsically. This is useful for situations where the weapon needs to have a visual plug/Mod on it, but that plug/Mod should never change.
  pub fn new() -> DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition {
    DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition {
      plug_item_hash: None,
      socket_type_hash: None,
      default_visible: None
    }
  }

  pub fn set_plug_item_hash(&mut self, plug_item_hash: i32) {
    self.plug_item_hash = Some(plug_item_hash);
  }

  pub fn with_plug_item_hash(mut self, plug_item_hash: i32) -> DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition {
    self.plug_item_hash = Some(plug_item_hash);
    self
  }

  pub fn plug_item_hash(&self) -> Option<&i32> {
    self.plug_item_hash.as_ref()
  }

  pub fn reset_plug_item_hash(&mut self) {
    self.plug_item_hash = None;
  }

  pub fn set_socket_type_hash(&mut self, socket_type_hash: i32) {
    self.socket_type_hash = Some(socket_type_hash);
  }

  pub fn with_socket_type_hash(mut self, socket_type_hash: i32) -> DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition {
    self.socket_type_hash = Some(socket_type_hash);
    self
  }

  pub fn socket_type_hash(&self) -> Option<&i32> {
    self.socket_type_hash.as_ref()
  }

  pub fn reset_socket_type_hash(&mut self) {
    self.socket_type_hash = None;
  }

  pub fn set_default_visible(&mut self, default_visible: bool) {
    self.default_visible = Some(default_visible);
  }

  pub fn with_default_visible(mut self, default_visible: bool) -> DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition {
    self.default_visible = Some(default_visible);
    self
  }

  pub fn default_visible(&self) -> Option<&bool> {
    self.default_visible.as_ref()
  }

  pub fn reset_default_visible(&mut self) {
    self.default_visible = None;
  }

}



