/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {
  /// Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is 'all time'.
  #[serde(rename = "period")]
  period: Option<String>,
  /// If the period group is for a specific activity, this property will be set.
  #[serde(rename = "activityDetails")]
  activity_details: Option<Value>,
  /// Collection of stats for the period.
  #[serde(rename = "values")]
  values: Option<::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>>
}

impl DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {
  pub fn new() -> DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {
    DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {
      period: None,
      activity_details: None,
      values: None
    }
  }

  pub fn set_period(&mut self, period: String) {
    self.period = Some(period);
  }

  pub fn with_period(mut self, period: String) -> DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {
    self.period = Some(period);
    self
  }

  pub fn period(&self) -> Option<&String> {
    self.period.as_ref()
  }

  pub fn reset_period(&mut self) {
    self.period = None;
  }

  pub fn set_activity_details(&mut self, activity_details: Value) {
    self.activity_details = Some(activity_details);
  }

  pub fn with_activity_details(mut self, activity_details: Value) -> DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {
    self.activity_details = Some(activity_details);
    self
  }

  pub fn activity_details(&self) -> Option<&Value> {
    self.activity_details.as_ref()
  }

  pub fn reset_activity_details(&mut self) {
    self.activity_details = None;
  }

  pub fn set_values(&mut self, values: ::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>) {
    self.values = Some(values);
  }

  pub fn with_values(mut self, values: ::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>) -> DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {
    self.values = Some(values);
    self
  }

  pub fn values(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>> {
    self.values.as_ref()
  }

  pub fn reset_values(&mut self) {
    self.values = None;
  }

}



