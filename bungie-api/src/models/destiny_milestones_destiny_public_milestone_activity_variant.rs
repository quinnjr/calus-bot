/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyMilestonesDestinyPublicMilestoneActivityVariant : Represents a variant of an activity that's relevant to a milestone.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyPublicMilestoneActivityVariant {
  /// The hash identifier of this activity variant. Examine the activity's definition in the Manifest database to determine what makes it a distinct variant. Usually it will be difficulty level or whether or not it is a guided game variant of the activity, but theoretically it could be distinguished in any arbitrary way.
  #[serde(rename = "activityHash")]
  activity_hash: Option<i32>,
  /// The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
  #[serde(rename = "activityModeHash")]
  activity_mode_hash: Option<i32>,
  /// The enumeration equivalent of the most specific Activity Mode under which this activity is played.
  #[serde(rename = "activityModeType")]
  activity_mode_type: Option<i32>
}

impl DestinyMilestonesDestinyPublicMilestoneActivityVariant {
  /// Represents a variant of an activity that's relevant to a milestone.
  pub fn new() -> DestinyMilestonesDestinyPublicMilestoneActivityVariant {
    DestinyMilestonesDestinyPublicMilestoneActivityVariant {
      activity_hash: None,
      activity_mode_hash: None,
      activity_mode_type: None
    }
  }

  pub fn set_activity_hash(&mut self, activity_hash: i32) {
    self.activity_hash = Some(activity_hash);
  }

  pub fn with_activity_hash(mut self, activity_hash: i32) -> DestinyMilestonesDestinyPublicMilestoneActivityVariant {
    self.activity_hash = Some(activity_hash);
    self
  }

  pub fn activity_hash(&self) -> Option<&i32> {
    self.activity_hash.as_ref()
  }

  pub fn reset_activity_hash(&mut self) {
    self.activity_hash = None;
  }

  pub fn set_activity_mode_hash(&mut self, activity_mode_hash: i32) {
    self.activity_mode_hash = Some(activity_mode_hash);
  }

  pub fn with_activity_mode_hash(mut self, activity_mode_hash: i32) -> DestinyMilestonesDestinyPublicMilestoneActivityVariant {
    self.activity_mode_hash = Some(activity_mode_hash);
    self
  }

  pub fn activity_mode_hash(&self) -> Option<&i32> {
    self.activity_mode_hash.as_ref()
  }

  pub fn reset_activity_mode_hash(&mut self) {
    self.activity_mode_hash = None;
  }

  pub fn set_activity_mode_type(&mut self, activity_mode_type: i32) {
    self.activity_mode_type = Some(activity_mode_type);
  }

  pub fn with_activity_mode_type(mut self, activity_mode_type: i32) -> DestinyMilestonesDestinyPublicMilestoneActivityVariant {
    self.activity_mode_type = Some(activity_mode_type);
    self
  }

  pub fn activity_mode_type(&self) -> Option<&i32> {
    self.activity_mode_type.as_ref()
  }

  pub fn reset_activity_mode_type(&mut self) {
    self.activity_mode_type = None;
  }

}



