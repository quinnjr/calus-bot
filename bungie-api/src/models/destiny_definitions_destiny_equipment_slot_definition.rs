/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyEquipmentSlotDefinition : Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.  The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.  An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyEquipmentSlotDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// These technically point to \"Equipment Category Definitions\". But don't get excited. There's nothing of significant value in those definitions, so I didn't bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed.
  #[serde(rename = "equipmentCategoryHash")]
  equipment_category_hash: Option<i32>,
  /// The inventory bucket that owns this equipment slot.
  #[serde(rename = "bucketTypeHash")]
  bucket_type_hash: Option<i32>,
  /// If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot.
  #[serde(rename = "applyCustomArtDyes")]
  apply_custom_art_dyes: Option<bool>,
  /// The Art Dye Channels that apply to this equipment slot.
  #[serde(rename = "artDyeChannels")]
  art_dye_channels: Option<Vec<::models::DestinyDefinitionsDestinyArtDyeReference>>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyEquipmentSlotDefinition {
  /// Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.  The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.  An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots.
  pub fn new() -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    DestinyDefinitionsDestinyEquipmentSlotDefinition {
      display_properties: None,
      equipment_category_hash: None,
      bucket_type_hash: None,
      apply_custom_art_dyes: None,
      art_dye_channels: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_equipment_category_hash(&mut self, equipment_category_hash: i32) {
    self.equipment_category_hash = Some(equipment_category_hash);
  }

  pub fn with_equipment_category_hash(mut self, equipment_category_hash: i32) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.equipment_category_hash = Some(equipment_category_hash);
    self
  }

  pub fn equipment_category_hash(&self) -> Option<&i32> {
    self.equipment_category_hash.as_ref()
  }

  pub fn reset_equipment_category_hash(&mut self) {
    self.equipment_category_hash = None;
  }

  pub fn set_bucket_type_hash(&mut self, bucket_type_hash: i32) {
    self.bucket_type_hash = Some(bucket_type_hash);
  }

  pub fn with_bucket_type_hash(mut self, bucket_type_hash: i32) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.bucket_type_hash = Some(bucket_type_hash);
    self
  }

  pub fn bucket_type_hash(&self) -> Option<&i32> {
    self.bucket_type_hash.as_ref()
  }

  pub fn reset_bucket_type_hash(&mut self) {
    self.bucket_type_hash = None;
  }

  pub fn set_apply_custom_art_dyes(&mut self, apply_custom_art_dyes: bool) {
    self.apply_custom_art_dyes = Some(apply_custom_art_dyes);
  }

  pub fn with_apply_custom_art_dyes(mut self, apply_custom_art_dyes: bool) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.apply_custom_art_dyes = Some(apply_custom_art_dyes);
    self
  }

  pub fn apply_custom_art_dyes(&self) -> Option<&bool> {
    self.apply_custom_art_dyes.as_ref()
  }

  pub fn reset_apply_custom_art_dyes(&mut self) {
    self.apply_custom_art_dyes = None;
  }

  pub fn set_art_dye_channels(&mut self, art_dye_channels: Vec<::models::DestinyDefinitionsDestinyArtDyeReference>) {
    self.art_dye_channels = Some(art_dye_channels);
  }

  pub fn with_art_dye_channels(mut self, art_dye_channels: Vec<::models::DestinyDefinitionsDestinyArtDyeReference>) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.art_dye_channels = Some(art_dye_channels);
    self
  }

  pub fn art_dye_channels(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyArtDyeReference>> {
    self.art_dye_channels.as_ref()
  }

  pub fn reset_art_dye_channels(&mut self) {
    self.art_dye_channels = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyEquipmentSlotDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



