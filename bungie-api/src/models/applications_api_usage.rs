/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationsApiUsage {
  /// The date range for the data being reported.
  #[serde(rename = "range")]
  range: Option<Value>,
  /// Counts for on API calls made for the time range.
  #[serde(rename = "apiCalls")]
  api_calls: Option<Vec<::models::ApplicationsSeries>>,
  /// Instances of blocked requests or requests that crossed the warn threshold during the time range.
  #[serde(rename = "throttledRequests")]
  throttled_requests: Option<Vec<::models::ApplicationsSeries>>
}

impl ApplicationsApiUsage {
  pub fn new() -> ApplicationsApiUsage {
    ApplicationsApiUsage {
      range: None,
      api_calls: None,
      throttled_requests: None
    }
  }

  pub fn set_range(&mut self, range: Value) {
    self.range = Some(range);
  }

  pub fn with_range(mut self, range: Value) -> ApplicationsApiUsage {
    self.range = Some(range);
    self
  }

  pub fn range(&self) -> Option<&Value> {
    self.range.as_ref()
  }

  pub fn reset_range(&mut self) {
    self.range = None;
  }

  pub fn set_api_calls(&mut self, api_calls: Vec<::models::ApplicationsSeries>) {
    self.api_calls = Some(api_calls);
  }

  pub fn with_api_calls(mut self, api_calls: Vec<::models::ApplicationsSeries>) -> ApplicationsApiUsage {
    self.api_calls = Some(api_calls);
    self
  }

  pub fn api_calls(&self) -> Option<&Vec<::models::ApplicationsSeries>> {
    self.api_calls.as_ref()
  }

  pub fn reset_api_calls(&mut self) {
    self.api_calls = None;
  }

  pub fn set_throttled_requests(&mut self, throttled_requests: Vec<::models::ApplicationsSeries>) {
    self.throttled_requests = Some(throttled_requests);
  }

  pub fn with_throttled_requests(mut self, throttled_requests: Vec<::models::ApplicationsSeries>) -> ApplicationsApiUsage {
    self.throttled_requests = Some(throttled_requests);
    self
  }

  pub fn throttled_requests(&self) -> Option<&Vec<::models::ApplicationsSeries>> {
    self.throttled_requests.as_ref()
  }

  pub fn reset_throttled_requests(&mut self) {
    self.throttled_requests = None;
  }

}



