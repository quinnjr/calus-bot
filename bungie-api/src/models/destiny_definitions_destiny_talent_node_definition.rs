/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyTalentNodeDefinition : Talent Grids on items have Nodes. These nodes have positions in the talent grid's UI, and contain \"Steps\" (DestinyTalentNodeStepDefinition), one of whom will be the \"Current\" step.  The Current Step determines the visual properties of the node, as well as what the node grants when it is activated.  See DestinyTalentGridDefinition for a more complete overview of how Talent Grids work, and how they are used in Destiny 2 (and how they were used in Destiny 1).

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyTalentNodeDefinition {
  /// The index into the DestinyTalentGridDefinition's \"nodes\" property where this node is located. Used to uniquely identify the node within the Talent Grid. Note that this is content version dependent: make sure you have the latest version of content before trying to use these properties.
  #[serde(rename = "nodeIndex")]
  node_index: Option<i32>,
  /// The hash identifier for the node, which unfortunately is also content version dependent but can be (and ideally, should be) used instead of the nodeIndex to uniquely identify the node.  The two exist side-by-side for backcompat reasons due to the Great Talent Node Restructuring of Destiny 1, and I ran out of time to remove one of them and standardize on the other. Sorry!
  #[serde(rename = "nodeHash")]
  node_hash: Option<i32>,
  /// The visual \"row\" where the node should be shown in the UI. If negative, then the node is hidden.
  #[serde(rename = "row")]
  row: Option<i32>,
  /// The visual \"column\" where the node should be shown in the UI. If negative, the node is hidden.
  #[serde(rename = "column")]
  column: Option<i32>,
  /// Indexes into the DestinyTalentGridDefinition.nodes property for any nodes that must be activated before this one is allowed to be activated.  I would have liked to change this to hashes for Destiny 2, but we have run out of time.
  #[serde(rename = "prerequisiteNodeIndexes")]
  prerequisite_node_indexes: Option<Vec<i32>>,
  /// At one point, Talent Nodes supported the idea of \"Binary Pairs\": nodes that overlapped each other visually, and where activating one deactivated the other. They ended up not being used, mostly because Exclusive Sets are *almost* a superset of this concept, but the potential for it to be used still exists in theory.  If this is ever used, this will be the index into the DestinyTalentGridDefinition.nodes property for the node that is the binary pair match to this node. Activating one deactivates the other.
  #[serde(rename = "binaryPairNodeIndex")]
  binary_pair_node_index: Option<i32>,
  /// If true, this node will automatically unlock when the Talent Grid's level reaches the required level of the current step of this node.
  #[serde(rename = "autoUnlocks")]
  auto_unlocks: Option<bool>,
  /// At one point, Nodes were going to be able to be activated multiple times, changing the current step and potentially piling on multiple effects from the previously activated steps. This property would indicate if the last step could be activated multiple times.   This is not currently used, but it isn't out of the question that this could end up being used again in a theoretical future.
  #[serde(rename = "lastStepRepeats")]
  last_step_repeats: Option<bool>,
  /// If this is true, the node's step is determined randomly rather than the first step being chosen.
  #[serde(rename = "isRandom")]
  is_random: Option<bool>,
  /// At one point, you were going to be able to repurchase talent nodes that had random steps, to \"re-roll\" the current step of the node (and thus change the properties of your item). This was to be the activation requirement for performing that re-roll.  The system still exists to do this, as far as I know, so it may yet come back around!
  #[serde(rename = "randomActivationRequirement")]
  random_activation_requirement: Option<Value>,
  /// If this is true, the node can be \"re-rolled\" to acquire a different random current step. This is not used, but still exists for a theoretical future of talent grids.
  #[serde(rename = "isRandomRepurchasable")]
  is_random_repurchasable: Option<bool>,
  /// At this point, \"steps\" have been obfuscated into conceptual entities, aggregating the underlying notions of \"properties\" and \"true steps\".  If you need to know a step as it truly exists - such as when recreating Node logic when processing Vendor data - you'll have to use the \"realSteps\" property below.
  #[serde(rename = "steps")]
  steps: Option<Vec<::models::DestinyDefinitionsDestinyNodeStepDefinition>>,
  /// The nodeHash values for nodes that are in an Exclusive Set with this node.  See DestinyTalentGridDefinition.exclusiveSets for more info about exclusive sets.  Again, note that these are nodeHashes and *not* nodeIndexes.
  #[serde(rename = "exclusiveWithNodeHashes")]
  exclusive_with_node_hashes: Option<Vec<i32>>,
  /// If the node's step is randomly selected, this is the amount of the Talent Grid's progression experience at which the progression bar for the node should be shown.
  #[serde(rename = "randomStartProgressionBarAtProgression")]
  random_start_progression_bar_at_progression: Option<i32>,
  /// A string identifier for a custom visual layout to apply to this talent node. Unfortunately, we do not have any data for rendering these custom layouts. It will be up to you to interpret these strings and change your UI if you want to have custom UI matching these layouts.
  #[serde(rename = "layoutIdentifier")]
  layout_identifier: Option<String>,
  /// As of Destiny 2, nodes can exist as part of \"Exclusive Groups\". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause \"opposing\" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.  See DestinyTalentExclusiveGroup for more information on the details. This is an identifier for this node's group, if it is part of one.
  #[serde(rename = "groupHash")]
  group_hash: Option<i32>,
  /// Talent nodes can be associated with a piece of Lore, generally rendered in a tooltip. This is the hash identifier of the lore element to show, if there is one to be show.
  #[serde(rename = "loreHash")]
  lore_hash: Option<i32>,
  /// Comes from the talent grid node style: this identifier should be used to determine how to render the node in the UI.
  #[serde(rename = "nodeStyleIdentifier")]
  node_style_identifier: Option<String>,
  /// Comes from the talent grid node style: if true, then this node should be ignored for determining whether the grid is complete.
  #[serde(rename = "ignoreForCompletion")]
  ignore_for_completion: Option<bool>
}

impl DestinyDefinitionsDestinyTalentNodeDefinition {
  /// Talent Grids on items have Nodes. These nodes have positions in the talent grid's UI, and contain \"Steps\" (DestinyTalentNodeStepDefinition), one of whom will be the \"Current\" step.  The Current Step determines the visual properties of the node, as well as what the node grants when it is activated.  See DestinyTalentGridDefinition for a more complete overview of how Talent Grids work, and how they are used in Destiny 2 (and how they were used in Destiny 1).
  pub fn new() -> DestinyDefinitionsDestinyTalentNodeDefinition {
    DestinyDefinitionsDestinyTalentNodeDefinition {
      node_index: None,
      node_hash: None,
      row: None,
      column: None,
      prerequisite_node_indexes: None,
      binary_pair_node_index: None,
      auto_unlocks: None,
      last_step_repeats: None,
      is_random: None,
      random_activation_requirement: None,
      is_random_repurchasable: None,
      steps: None,
      exclusive_with_node_hashes: None,
      random_start_progression_bar_at_progression: None,
      layout_identifier: None,
      group_hash: None,
      lore_hash: None,
      node_style_identifier: None,
      ignore_for_completion: None
    }
  }

  pub fn set_node_index(&mut self, node_index: i32) {
    self.node_index = Some(node_index);
  }

  pub fn with_node_index(mut self, node_index: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.node_index = Some(node_index);
    self
  }

  pub fn node_index(&self) -> Option<&i32> {
    self.node_index.as_ref()
  }

  pub fn reset_node_index(&mut self) {
    self.node_index = None;
  }

  pub fn set_node_hash(&mut self, node_hash: i32) {
    self.node_hash = Some(node_hash);
  }

  pub fn with_node_hash(mut self, node_hash: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.node_hash = Some(node_hash);
    self
  }

  pub fn node_hash(&self) -> Option<&i32> {
    self.node_hash.as_ref()
  }

  pub fn reset_node_hash(&mut self) {
    self.node_hash = None;
  }

  pub fn set_row(&mut self, row: i32) {
    self.row = Some(row);
  }

  pub fn with_row(mut self, row: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.row = Some(row);
    self
  }

  pub fn row(&self) -> Option<&i32> {
    self.row.as_ref()
  }

  pub fn reset_row(&mut self) {
    self.row = None;
  }

  pub fn set_column(&mut self, column: i32) {
    self.column = Some(column);
  }

  pub fn with_column(mut self, column: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.column = Some(column);
    self
  }

  pub fn column(&self) -> Option<&i32> {
    self.column.as_ref()
  }

  pub fn reset_column(&mut self) {
    self.column = None;
  }

  pub fn set_prerequisite_node_indexes(&mut self, prerequisite_node_indexes: Vec<i32>) {
    self.prerequisite_node_indexes = Some(prerequisite_node_indexes);
  }

  pub fn with_prerequisite_node_indexes(mut self, prerequisite_node_indexes: Vec<i32>) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.prerequisite_node_indexes = Some(prerequisite_node_indexes);
    self
  }

  pub fn prerequisite_node_indexes(&self) -> Option<&Vec<i32>> {
    self.prerequisite_node_indexes.as_ref()
  }

  pub fn reset_prerequisite_node_indexes(&mut self) {
    self.prerequisite_node_indexes = None;
  }

  pub fn set_binary_pair_node_index(&mut self, binary_pair_node_index: i32) {
    self.binary_pair_node_index = Some(binary_pair_node_index);
  }

  pub fn with_binary_pair_node_index(mut self, binary_pair_node_index: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.binary_pair_node_index = Some(binary_pair_node_index);
    self
  }

  pub fn binary_pair_node_index(&self) -> Option<&i32> {
    self.binary_pair_node_index.as_ref()
  }

  pub fn reset_binary_pair_node_index(&mut self) {
    self.binary_pair_node_index = None;
  }

  pub fn set_auto_unlocks(&mut self, auto_unlocks: bool) {
    self.auto_unlocks = Some(auto_unlocks);
  }

  pub fn with_auto_unlocks(mut self, auto_unlocks: bool) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.auto_unlocks = Some(auto_unlocks);
    self
  }

  pub fn auto_unlocks(&self) -> Option<&bool> {
    self.auto_unlocks.as_ref()
  }

  pub fn reset_auto_unlocks(&mut self) {
    self.auto_unlocks = None;
  }

  pub fn set_last_step_repeats(&mut self, last_step_repeats: bool) {
    self.last_step_repeats = Some(last_step_repeats);
  }

  pub fn with_last_step_repeats(mut self, last_step_repeats: bool) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.last_step_repeats = Some(last_step_repeats);
    self
  }

  pub fn last_step_repeats(&self) -> Option<&bool> {
    self.last_step_repeats.as_ref()
  }

  pub fn reset_last_step_repeats(&mut self) {
    self.last_step_repeats = None;
  }

  pub fn set_is_random(&mut self, is_random: bool) {
    self.is_random = Some(is_random);
  }

  pub fn with_is_random(mut self, is_random: bool) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.is_random = Some(is_random);
    self
  }

  pub fn is_random(&self) -> Option<&bool> {
    self.is_random.as_ref()
  }

  pub fn reset_is_random(&mut self) {
    self.is_random = None;
  }

  pub fn set_random_activation_requirement(&mut self, random_activation_requirement: Value) {
    self.random_activation_requirement = Some(random_activation_requirement);
  }

  pub fn with_random_activation_requirement(mut self, random_activation_requirement: Value) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.random_activation_requirement = Some(random_activation_requirement);
    self
  }

  pub fn random_activation_requirement(&self) -> Option<&Value> {
    self.random_activation_requirement.as_ref()
  }

  pub fn reset_random_activation_requirement(&mut self) {
    self.random_activation_requirement = None;
  }

  pub fn set_is_random_repurchasable(&mut self, is_random_repurchasable: bool) {
    self.is_random_repurchasable = Some(is_random_repurchasable);
  }

  pub fn with_is_random_repurchasable(mut self, is_random_repurchasable: bool) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.is_random_repurchasable = Some(is_random_repurchasable);
    self
  }

  pub fn is_random_repurchasable(&self) -> Option<&bool> {
    self.is_random_repurchasable.as_ref()
  }

  pub fn reset_is_random_repurchasable(&mut self) {
    self.is_random_repurchasable = None;
  }

  pub fn set_steps(&mut self, steps: Vec<::models::DestinyDefinitionsDestinyNodeStepDefinition>) {
    self.steps = Some(steps);
  }

  pub fn with_steps(mut self, steps: Vec<::models::DestinyDefinitionsDestinyNodeStepDefinition>) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.steps = Some(steps);
    self
  }

  pub fn steps(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyNodeStepDefinition>> {
    self.steps.as_ref()
  }

  pub fn reset_steps(&mut self) {
    self.steps = None;
  }

  pub fn set_exclusive_with_node_hashes(&mut self, exclusive_with_node_hashes: Vec<i32>) {
    self.exclusive_with_node_hashes = Some(exclusive_with_node_hashes);
  }

  pub fn with_exclusive_with_node_hashes(mut self, exclusive_with_node_hashes: Vec<i32>) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.exclusive_with_node_hashes = Some(exclusive_with_node_hashes);
    self
  }

  pub fn exclusive_with_node_hashes(&self) -> Option<&Vec<i32>> {
    self.exclusive_with_node_hashes.as_ref()
  }

  pub fn reset_exclusive_with_node_hashes(&mut self) {
    self.exclusive_with_node_hashes = None;
  }

  pub fn set_random_start_progression_bar_at_progression(&mut self, random_start_progression_bar_at_progression: i32) {
    self.random_start_progression_bar_at_progression = Some(random_start_progression_bar_at_progression);
  }

  pub fn with_random_start_progression_bar_at_progression(mut self, random_start_progression_bar_at_progression: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.random_start_progression_bar_at_progression = Some(random_start_progression_bar_at_progression);
    self
  }

  pub fn random_start_progression_bar_at_progression(&self) -> Option<&i32> {
    self.random_start_progression_bar_at_progression.as_ref()
  }

  pub fn reset_random_start_progression_bar_at_progression(&mut self) {
    self.random_start_progression_bar_at_progression = None;
  }

  pub fn set_layout_identifier(&mut self, layout_identifier: String) {
    self.layout_identifier = Some(layout_identifier);
  }

  pub fn with_layout_identifier(mut self, layout_identifier: String) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.layout_identifier = Some(layout_identifier);
    self
  }

  pub fn layout_identifier(&self) -> Option<&String> {
    self.layout_identifier.as_ref()
  }

  pub fn reset_layout_identifier(&mut self) {
    self.layout_identifier = None;
  }

  pub fn set_group_hash(&mut self, group_hash: i32) {
    self.group_hash = Some(group_hash);
  }

  pub fn with_group_hash(mut self, group_hash: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.group_hash = Some(group_hash);
    self
  }

  pub fn group_hash(&self) -> Option<&i32> {
    self.group_hash.as_ref()
  }

  pub fn reset_group_hash(&mut self) {
    self.group_hash = None;
  }

  pub fn set_lore_hash(&mut self, lore_hash: i32) {
    self.lore_hash = Some(lore_hash);
  }

  pub fn with_lore_hash(mut self, lore_hash: i32) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.lore_hash = Some(lore_hash);
    self
  }

  pub fn lore_hash(&self) -> Option<&i32> {
    self.lore_hash.as_ref()
  }

  pub fn reset_lore_hash(&mut self) {
    self.lore_hash = None;
  }

  pub fn set_node_style_identifier(&mut self, node_style_identifier: String) {
    self.node_style_identifier = Some(node_style_identifier);
  }

  pub fn with_node_style_identifier(mut self, node_style_identifier: String) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.node_style_identifier = Some(node_style_identifier);
    self
  }

  pub fn node_style_identifier(&self) -> Option<&String> {
    self.node_style_identifier.as_ref()
  }

  pub fn reset_node_style_identifier(&mut self) {
    self.node_style_identifier = None;
  }

  pub fn set_ignore_for_completion(&mut self, ignore_for_completion: bool) {
    self.ignore_for_completion = Some(ignore_for_completion);
  }

  pub fn with_ignore_for_completion(mut self, ignore_for_completion: bool) -> DestinyDefinitionsDestinyTalentNodeDefinition {
    self.ignore_for_completion = Some(ignore_for_completion);
    self
  }

  pub fn ignore_for_completion(&self) -> Option<&bool> {
    self.ignore_for_completion.as_ref()
  }

  pub fn reset_ignore_for_completion(&mut self) {
    self.ignore_for_completion = None;
  }

}



