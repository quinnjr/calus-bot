/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyComponentsRecordsDestinyProfileRecordsComponent {
  /// Your \"Triumphs\" score.
  #[serde(rename = "score")]
  score: Option<i32>,
  /// If this profile is tracking a record, this is the hash identifier of the record it is tracking.
  #[serde(rename = "trackedRecordHash")]
  tracked_record_hash: Option<i32>,
  #[serde(rename = "records")]
  records: Option<::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>>
}

impl DestinyComponentsRecordsDestinyProfileRecordsComponent {
  pub fn new() -> DestinyComponentsRecordsDestinyProfileRecordsComponent {
    DestinyComponentsRecordsDestinyProfileRecordsComponent {
      score: None,
      tracked_record_hash: None,
      records: None
    }
  }

  pub fn set_score(&mut self, score: i32) {
    self.score = Some(score);
  }

  pub fn with_score(mut self, score: i32) -> DestinyComponentsRecordsDestinyProfileRecordsComponent {
    self.score = Some(score);
    self
  }

  pub fn score(&self) -> Option<&i32> {
    self.score.as_ref()
  }

  pub fn reset_score(&mut self) {
    self.score = None;
  }

  pub fn set_tracked_record_hash(&mut self, tracked_record_hash: i32) {
    self.tracked_record_hash = Some(tracked_record_hash);
  }

  pub fn with_tracked_record_hash(mut self, tracked_record_hash: i32) -> DestinyComponentsRecordsDestinyProfileRecordsComponent {
    self.tracked_record_hash = Some(tracked_record_hash);
    self
  }

  pub fn tracked_record_hash(&self) -> Option<&i32> {
    self.tracked_record_hash.as_ref()
  }

  pub fn reset_tracked_record_hash(&mut self) {
    self.tracked_record_hash = None;
  }

  pub fn set_records(&mut self, records: ::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>) {
    self.records = Some(records);
  }

  pub fn with_records(mut self, records: ::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>) -> DestinyComponentsRecordsDestinyProfileRecordsComponent {
    self.records = Some(records);
    self
  }

  pub fn records(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyComponentsRecordsDestinyRecordComponent>> {
    self.records.as_ref()
  }

  pub fn reset_records(&mut self) {
    self.records = None;
  }

}



