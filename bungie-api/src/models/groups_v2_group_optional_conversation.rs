/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupOptionalConversation {
  #[serde(rename = "groupId")]
  group_id: Option<i64>,
  #[serde(rename = "conversationId")]
  conversation_id: Option<i64>,
  #[serde(rename = "chatEnabled")]
  chat_enabled: Option<bool>,
  #[serde(rename = "chatName")]
  chat_name: Option<String>,
  #[serde(rename = "chatSecurity")]
  chat_security: Option<i32>
}

impl GroupsV2GroupOptionalConversation {
  pub fn new() -> GroupsV2GroupOptionalConversation {
    GroupsV2GroupOptionalConversation {
      group_id: None,
      conversation_id: None,
      chat_enabled: None,
      chat_name: None,
      chat_security: None
    }
  }

  pub fn set_group_id(&mut self, group_id: i64) {
    self.group_id = Some(group_id);
  }

  pub fn with_group_id(mut self, group_id: i64) -> GroupsV2GroupOptionalConversation {
    self.group_id = Some(group_id);
    self
  }

  pub fn group_id(&self) -> Option<&i64> {
    self.group_id.as_ref()
  }

  pub fn reset_group_id(&mut self) {
    self.group_id = None;
  }

  pub fn set_conversation_id(&mut self, conversation_id: i64) {
    self.conversation_id = Some(conversation_id);
  }

  pub fn with_conversation_id(mut self, conversation_id: i64) -> GroupsV2GroupOptionalConversation {
    self.conversation_id = Some(conversation_id);
    self
  }

  pub fn conversation_id(&self) -> Option<&i64> {
    self.conversation_id.as_ref()
  }

  pub fn reset_conversation_id(&mut self) {
    self.conversation_id = None;
  }

  pub fn set_chat_enabled(&mut self, chat_enabled: bool) {
    self.chat_enabled = Some(chat_enabled);
  }

  pub fn with_chat_enabled(mut self, chat_enabled: bool) -> GroupsV2GroupOptionalConversation {
    self.chat_enabled = Some(chat_enabled);
    self
  }

  pub fn chat_enabled(&self) -> Option<&bool> {
    self.chat_enabled.as_ref()
  }

  pub fn reset_chat_enabled(&mut self) {
    self.chat_enabled = None;
  }

  pub fn set_chat_name(&mut self, chat_name: String) {
    self.chat_name = Some(chat_name);
  }

  pub fn with_chat_name(mut self, chat_name: String) -> GroupsV2GroupOptionalConversation {
    self.chat_name = Some(chat_name);
    self
  }

  pub fn chat_name(&self) -> Option<&String> {
    self.chat_name.as_ref()
  }

  pub fn reset_chat_name(&mut self) {
    self.chat_name = None;
  }

  pub fn set_chat_security(&mut self, chat_security: i32) {
    self.chat_security = Some(chat_security);
  }

  pub fn with_chat_security(mut self, chat_security: i32) -> GroupsV2GroupOptionalConversation {
    self.chat_security = Some(chat_security);
    self
  }

  pub fn chat_security(&self) -> Option<&i32> {
    self.chat_security.as_ref()
  }

  pub fn reset_chat_security(&mut self) {
    self.chat_security = None;
  }

}



