/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConfigUserTheme {
  #[serde(rename = "userThemeId")]
  user_theme_id: Option<i32>,
  #[serde(rename = "userThemeName")]
  user_theme_name: Option<String>,
  #[serde(rename = "userThemeDescription")]
  user_theme_description: Option<String>
}

impl ConfigUserTheme {
  pub fn new() -> ConfigUserTheme {
    ConfigUserTheme {
      user_theme_id: None,
      user_theme_name: None,
      user_theme_description: None
    }
  }

  pub fn set_user_theme_id(&mut self, user_theme_id: i32) {
    self.user_theme_id = Some(user_theme_id);
  }

  pub fn with_user_theme_id(mut self, user_theme_id: i32) -> ConfigUserTheme {
    self.user_theme_id = Some(user_theme_id);
    self
  }

  pub fn user_theme_id(&self) -> Option<&i32> {
    self.user_theme_id.as_ref()
  }

  pub fn reset_user_theme_id(&mut self) {
    self.user_theme_id = None;
  }

  pub fn set_user_theme_name(&mut self, user_theme_name: String) {
    self.user_theme_name = Some(user_theme_name);
  }

  pub fn with_user_theme_name(mut self, user_theme_name: String) -> ConfigUserTheme {
    self.user_theme_name = Some(user_theme_name);
    self
  }

  pub fn user_theme_name(&self) -> Option<&String> {
    self.user_theme_name.as_ref()
  }

  pub fn reset_user_theme_name(&mut self) {
    self.user_theme_name = None;
  }

  pub fn set_user_theme_description(&mut self, user_theme_description: String) {
    self.user_theme_description = Some(user_theme_description);
  }

  pub fn with_user_theme_description(mut self, user_theme_description: String) -> ConfigUserTheme {
    self.user_theme_description = Some(user_theme_description);
    self
  }

  pub fn user_theme_description(&self) -> Option<&String> {
    self.user_theme_description.as_ref()
  }

  pub fn reset_user_theme_description(&mut self) {
    self.user_theme_description = None;
  }

}



