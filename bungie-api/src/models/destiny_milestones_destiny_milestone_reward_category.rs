/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyMilestonesDestinyMilestoneRewardCategory : Represents a category of \"summary\" rewards that can be earned for the Milestone regardless of specific quest rewards that can be earned.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyMilestoneRewardCategory {
  /// Look up the relevant DestinyMilestoneDefinition, and then use rewardCategoryHash to look up the category info in DestinyMilestoneDefinition.rewards.
  #[serde(rename = "rewardCategoryHash")]
  reward_category_hash: Option<i32>,
  /// The individual reward entries for this category, and their status.
  #[serde(rename = "entries")]
  entries: Option<Vec<::models::DestinyMilestonesDestinyMilestoneRewardEntry>>
}

impl DestinyMilestonesDestinyMilestoneRewardCategory {
  /// Represents a category of \"summary\" rewards that can be earned for the Milestone regardless of specific quest rewards that can be earned.
  pub fn new() -> DestinyMilestonesDestinyMilestoneRewardCategory {
    DestinyMilestonesDestinyMilestoneRewardCategory {
      reward_category_hash: None,
      entries: None
    }
  }

  pub fn set_reward_category_hash(&mut self, reward_category_hash: i32) {
    self.reward_category_hash = Some(reward_category_hash);
  }

  pub fn with_reward_category_hash(mut self, reward_category_hash: i32) -> DestinyMilestonesDestinyMilestoneRewardCategory {
    self.reward_category_hash = Some(reward_category_hash);
    self
  }

  pub fn reward_category_hash(&self) -> Option<&i32> {
    self.reward_category_hash.as_ref()
  }

  pub fn reset_reward_category_hash(&mut self) {
    self.reward_category_hash = None;
  }

  pub fn set_entries(&mut self, entries: Vec<::models::DestinyMilestonesDestinyMilestoneRewardEntry>) {
    self.entries = Some(entries);
  }

  pub fn with_entries(mut self, entries: Vec<::models::DestinyMilestonesDestinyMilestoneRewardEntry>) -> DestinyMilestonesDestinyMilestoneRewardCategory {
    self.entries = Some(entries);
    self
  }

  pub fn entries(&self) -> Option<&Vec<::models::DestinyMilestonesDestinyMilestoneRewardEntry>> {
    self.entries.as_ref()
  }

  pub fn reset_entries(&mut self) {
    self.entries = None;
  }

}



