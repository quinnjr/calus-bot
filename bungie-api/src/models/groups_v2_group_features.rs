/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupFeatures {
  #[serde(rename = "maximumMembers")]
  maximum_members: Option<i32>,
  /// Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
  #[serde(rename = "maximumMembershipsOfGroupType")]
  maximum_memberships_of_group_type: Option<i32>,
  #[serde(rename = "capabilities")]
  capabilities: Option<i32>,
  #[serde(rename = "membershipTypes")]
  membership_types: Option<Vec<i32>>,
  /// Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
  #[serde(rename = "invitePermissionOverride")]
  invite_permission_override: Option<bool>,
  /// Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
  #[serde(rename = "updateCulturePermissionOverride")]
  update_culture_permission_override: Option<bool>,
  /// Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.
  #[serde(rename = "hostGuidedGamePermissionOverride")]
  host_guided_game_permission_override: Option<i32>,
  /// Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
  #[serde(rename = "updateBannerPermissionOverride")]
  update_banner_permission_override: Option<bool>,
  /// Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.
  #[serde(rename = "joinLevel")]
  join_level: Option<i32>
}

impl GroupsV2GroupFeatures {
  pub fn new() -> GroupsV2GroupFeatures {
    GroupsV2GroupFeatures {
      maximum_members: None,
      maximum_memberships_of_group_type: None,
      capabilities: None,
      membership_types: None,
      invite_permission_override: None,
      update_culture_permission_override: None,
      host_guided_game_permission_override: None,
      update_banner_permission_override: None,
      join_level: None
    }
  }

  pub fn set_maximum_members(&mut self, maximum_members: i32) {
    self.maximum_members = Some(maximum_members);
  }

  pub fn with_maximum_members(mut self, maximum_members: i32) -> GroupsV2GroupFeatures {
    self.maximum_members = Some(maximum_members);
    self
  }

  pub fn maximum_members(&self) -> Option<&i32> {
    self.maximum_members.as_ref()
  }

  pub fn reset_maximum_members(&mut self) {
    self.maximum_members = None;
  }

  pub fn set_maximum_memberships_of_group_type(&mut self, maximum_memberships_of_group_type: i32) {
    self.maximum_memberships_of_group_type = Some(maximum_memberships_of_group_type);
  }

  pub fn with_maximum_memberships_of_group_type(mut self, maximum_memberships_of_group_type: i32) -> GroupsV2GroupFeatures {
    self.maximum_memberships_of_group_type = Some(maximum_memberships_of_group_type);
    self
  }

  pub fn maximum_memberships_of_group_type(&self) -> Option<&i32> {
    self.maximum_memberships_of_group_type.as_ref()
  }

  pub fn reset_maximum_memberships_of_group_type(&mut self) {
    self.maximum_memberships_of_group_type = None;
  }

  pub fn set_capabilities(&mut self, capabilities: i32) {
    self.capabilities = Some(capabilities);
  }

  pub fn with_capabilities(mut self, capabilities: i32) -> GroupsV2GroupFeatures {
    self.capabilities = Some(capabilities);
    self
  }

  pub fn capabilities(&self) -> Option<&i32> {
    self.capabilities.as_ref()
  }

  pub fn reset_capabilities(&mut self) {
    self.capabilities = None;
  }

  pub fn set_membership_types(&mut self, membership_types: Vec<i32>) {
    self.membership_types = Some(membership_types);
  }

  pub fn with_membership_types(mut self, membership_types: Vec<i32>) -> GroupsV2GroupFeatures {
    self.membership_types = Some(membership_types);
    self
  }

  pub fn membership_types(&self) -> Option<&Vec<i32>> {
    self.membership_types.as_ref()
  }

  pub fn reset_membership_types(&mut self) {
    self.membership_types = None;
  }

  pub fn set_invite_permission_override(&mut self, invite_permission_override: bool) {
    self.invite_permission_override = Some(invite_permission_override);
  }

  pub fn with_invite_permission_override(mut self, invite_permission_override: bool) -> GroupsV2GroupFeatures {
    self.invite_permission_override = Some(invite_permission_override);
    self
  }

  pub fn invite_permission_override(&self) -> Option<&bool> {
    self.invite_permission_override.as_ref()
  }

  pub fn reset_invite_permission_override(&mut self) {
    self.invite_permission_override = None;
  }

  pub fn set_update_culture_permission_override(&mut self, update_culture_permission_override: bool) {
    self.update_culture_permission_override = Some(update_culture_permission_override);
  }

  pub fn with_update_culture_permission_override(mut self, update_culture_permission_override: bool) -> GroupsV2GroupFeatures {
    self.update_culture_permission_override = Some(update_culture_permission_override);
    self
  }

  pub fn update_culture_permission_override(&self) -> Option<&bool> {
    self.update_culture_permission_override.as_ref()
  }

  pub fn reset_update_culture_permission_override(&mut self) {
    self.update_culture_permission_override = None;
  }

  pub fn set_host_guided_game_permission_override(&mut self, host_guided_game_permission_override: i32) {
    self.host_guided_game_permission_override = Some(host_guided_game_permission_override);
  }

  pub fn with_host_guided_game_permission_override(mut self, host_guided_game_permission_override: i32) -> GroupsV2GroupFeatures {
    self.host_guided_game_permission_override = Some(host_guided_game_permission_override);
    self
  }

  pub fn host_guided_game_permission_override(&self) -> Option<&i32> {
    self.host_guided_game_permission_override.as_ref()
  }

  pub fn reset_host_guided_game_permission_override(&mut self) {
    self.host_guided_game_permission_override = None;
  }

  pub fn set_update_banner_permission_override(&mut self, update_banner_permission_override: bool) {
    self.update_banner_permission_override = Some(update_banner_permission_override);
  }

  pub fn with_update_banner_permission_override(mut self, update_banner_permission_override: bool) -> GroupsV2GroupFeatures {
    self.update_banner_permission_override = Some(update_banner_permission_override);
    self
  }

  pub fn update_banner_permission_override(&self) -> Option<&bool> {
    self.update_banner_permission_override.as_ref()
  }

  pub fn reset_update_banner_permission_override(&mut self) {
    self.update_banner_permission_override = None;
  }

  pub fn set_join_level(&mut self, join_level: i32) {
    self.join_level = Some(join_level);
  }

  pub fn with_join_level(mut self, join_level: i32) -> GroupsV2GroupFeatures {
    self.join_level = Some(join_level);
    self
  }

  pub fn join_level(&self) -> Option<&i32> {
    self.join_level.as_ref()
  }

  pub fn reset_join_level(&mut self) {
    self.join_level = None;
  }

}



