/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinySandboxPerkDefinition : Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons' damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I'm sure you can see why perks are so interesting.  What Perks often don't have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinySandboxPerkDefinition {
  /// These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.
  #[serde(rename = "displayProperties")]
  display_properties: Option<Value>,
  /// The string identifier for the perk.
  #[serde(rename = "perkIdentifier")]
  perk_identifier: Option<String>,
  /// If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.
  #[serde(rename = "isDisplayable")]
  is_displayable: Option<bool>,
  /// If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.
  #[serde(rename = "damageType")]
  damage_type: Option<i32>,
  /// The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.
  #[serde(rename = "damageTypeHash")]
  damage_type_hash: Option<i32>,
  /// An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.
  #[serde(rename = "perkGroups")]
  perk_groups: Option<Value>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinySandboxPerkDefinition {
  /// Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons' damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I'm sure you can see why perks are so interesting.  What Perks often don't have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
  pub fn new() -> DestinyDefinitionsDestinySandboxPerkDefinition {
    DestinyDefinitionsDestinySandboxPerkDefinition {
      display_properties: None,
      perk_identifier: None,
      is_displayable: None,
      damage_type: None,
      damage_type_hash: None,
      perk_groups: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: Value) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: Value) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&Value> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_perk_identifier(&mut self, perk_identifier: String) {
    self.perk_identifier = Some(perk_identifier);
  }

  pub fn with_perk_identifier(mut self, perk_identifier: String) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.perk_identifier = Some(perk_identifier);
    self
  }

  pub fn perk_identifier(&self) -> Option<&String> {
    self.perk_identifier.as_ref()
  }

  pub fn reset_perk_identifier(&mut self) {
    self.perk_identifier = None;
  }

  pub fn set_is_displayable(&mut self, is_displayable: bool) {
    self.is_displayable = Some(is_displayable);
  }

  pub fn with_is_displayable(mut self, is_displayable: bool) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.is_displayable = Some(is_displayable);
    self
  }

  pub fn is_displayable(&self) -> Option<&bool> {
    self.is_displayable.as_ref()
  }

  pub fn reset_is_displayable(&mut self) {
    self.is_displayable = None;
  }

  pub fn set_damage_type(&mut self, damage_type: i32) {
    self.damage_type = Some(damage_type);
  }

  pub fn with_damage_type(mut self, damage_type: i32) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.damage_type = Some(damage_type);
    self
  }

  pub fn damage_type(&self) -> Option<&i32> {
    self.damage_type.as_ref()
  }

  pub fn reset_damage_type(&mut self) {
    self.damage_type = None;
  }

  pub fn set_damage_type_hash(&mut self, damage_type_hash: i32) {
    self.damage_type_hash = Some(damage_type_hash);
  }

  pub fn with_damage_type_hash(mut self, damage_type_hash: i32) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.damage_type_hash = Some(damage_type_hash);
    self
  }

  pub fn damage_type_hash(&self) -> Option<&i32> {
    self.damage_type_hash.as_ref()
  }

  pub fn reset_damage_type_hash(&mut self) {
    self.damage_type_hash = None;
  }

  pub fn set_perk_groups(&mut self, perk_groups: Value) {
    self.perk_groups = Some(perk_groups);
  }

  pub fn with_perk_groups(mut self, perk_groups: Value) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.perk_groups = Some(perk_groups);
    self
  }

  pub fn perk_groups(&self) -> Option<&Value> {
    self.perk_groups.as_ref()
  }

  pub fn reset_perk_groups(&mut self) {
    self.perk_groups = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinySandboxPerkDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



