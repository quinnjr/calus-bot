/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyArtifactsDestinyArtifactProfileScoped : Represents a Seasonal Artifact and all data related to it for the requested Account.  It can be combined with Character-scoped data for a full picture of what a character has available/has chosen, or just these settings can be used for overview information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyArtifactsDestinyArtifactProfileScoped {
  #[serde(rename = "artifactHash")]
  artifact_hash: Option<i32>,
  #[serde(rename = "pointProgression")]
  point_progression: Option<::models::DestinyDestinyProgression>,
  #[serde(rename = "pointsAcquired")]
  points_acquired: Option<i32>,
  #[serde(rename = "powerBonusProgression")]
  power_bonus_progression: Option<::models::DestinyDestinyProgression>,
  #[serde(rename = "powerBonus")]
  power_bonus: Option<i32>
}

impl DestinyArtifactsDestinyArtifactProfileScoped {
  /// Represents a Seasonal Artifact and all data related to it for the requested Account.  It can be combined with Character-scoped data for a full picture of what a character has available/has chosen, or just these settings can be used for overview information.
  pub fn new() -> DestinyArtifactsDestinyArtifactProfileScoped {
    DestinyArtifactsDestinyArtifactProfileScoped {
      artifact_hash: None,
      point_progression: None,
      points_acquired: None,
      power_bonus_progression: None,
      power_bonus: None
    }
  }

  pub fn set_artifact_hash(&mut self, artifact_hash: i32) {
    self.artifact_hash = Some(artifact_hash);
  }

  pub fn with_artifact_hash(mut self, artifact_hash: i32) -> DestinyArtifactsDestinyArtifactProfileScoped {
    self.artifact_hash = Some(artifact_hash);
    self
  }

  pub fn artifact_hash(&self) -> Option<&i32> {
    self.artifact_hash.as_ref()
  }

  pub fn reset_artifact_hash(&mut self) {
    self.artifact_hash = None;
  }

  pub fn set_point_progression(&mut self, point_progression: ::models::DestinyDestinyProgression) {
    self.point_progression = Some(point_progression);
  }

  pub fn with_point_progression(mut self, point_progression: ::models::DestinyDestinyProgression) -> DestinyArtifactsDestinyArtifactProfileScoped {
    self.point_progression = Some(point_progression);
    self
  }

  pub fn point_progression(&self) -> Option<&::models::DestinyDestinyProgression> {
    self.point_progression.as_ref()
  }

  pub fn reset_point_progression(&mut self) {
    self.point_progression = None;
  }

  pub fn set_points_acquired(&mut self, points_acquired: i32) {
    self.points_acquired = Some(points_acquired);
  }

  pub fn with_points_acquired(mut self, points_acquired: i32) -> DestinyArtifactsDestinyArtifactProfileScoped {
    self.points_acquired = Some(points_acquired);
    self
  }

  pub fn points_acquired(&self) -> Option<&i32> {
    self.points_acquired.as_ref()
  }

  pub fn reset_points_acquired(&mut self) {
    self.points_acquired = None;
  }

  pub fn set_power_bonus_progression(&mut self, power_bonus_progression: ::models::DestinyDestinyProgression) {
    self.power_bonus_progression = Some(power_bonus_progression);
  }

  pub fn with_power_bonus_progression(mut self, power_bonus_progression: ::models::DestinyDestinyProgression) -> DestinyArtifactsDestinyArtifactProfileScoped {
    self.power_bonus_progression = Some(power_bonus_progression);
    self
  }

  pub fn power_bonus_progression(&self) -> Option<&::models::DestinyDestinyProgression> {
    self.power_bonus_progression.as_ref()
  }

  pub fn reset_power_bonus_progression(&mut self) {
    self.power_bonus_progression = None;
  }

  pub fn set_power_bonus(&mut self, power_bonus: i32) {
    self.power_bonus = Some(power_bonus);
  }

  pub fn with_power_bonus(mut self, power_bonus: i32) -> DestinyArtifactsDestinyArtifactProfileScoped {
    self.power_bonus = Some(power_bonus);
    self
  }

  pub fn power_bonus(&self) -> Option<&i32> {
    self.power_bonus.as_ref()
  }

  pub fn reset_power_bonus(&mut self) {
    self.power_bonus = None;
  }

}



