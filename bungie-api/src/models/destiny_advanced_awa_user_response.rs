/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyAdvancedAwaUserResponse {
  /// Indication of the selection the user has made (Approving or rejecting the action)
  #[serde(rename = "selection")]
  selection: Option<i32>,
  /// Correlation ID of the request
  #[serde(rename = "correlationId")]
  correlation_id: Option<String>,
  /// Secret nonce received via the PUSH notification.
  #[serde(rename = "nonce")]
  nonce: Option<Vec<String>>
}

impl DestinyAdvancedAwaUserResponse {
  pub fn new() -> DestinyAdvancedAwaUserResponse {
    DestinyAdvancedAwaUserResponse {
      selection: None,
      correlation_id: None,
      nonce: None
    }
  }

  pub fn set_selection(&mut self, selection: i32) {
    self.selection = Some(selection);
  }

  pub fn with_selection(mut self, selection: i32) -> DestinyAdvancedAwaUserResponse {
    self.selection = Some(selection);
    self
  }

  pub fn selection(&self) -> Option<&i32> {
    self.selection.as_ref()
  }

  pub fn reset_selection(&mut self) {
    self.selection = None;
  }

  pub fn set_correlation_id(&mut self, correlation_id: String) {
    self.correlation_id = Some(correlation_id);
  }

  pub fn with_correlation_id(mut self, correlation_id: String) -> DestinyAdvancedAwaUserResponse {
    self.correlation_id = Some(correlation_id);
    self
  }

  pub fn correlation_id(&self) -> Option<&String> {
    self.correlation_id.as_ref()
  }

  pub fn reset_correlation_id(&mut self) {
    self.correlation_id = None;
  }

  pub fn set_nonce(&mut self, nonce: Vec<String>) {
    self.nonce = Some(nonce);
  }

  pub fn with_nonce(mut self, nonce: Vec<String>) -> DestinyAdvancedAwaUserResponse {
    self.nonce = Some(nonce);
    self
  }

  pub fn nonce(&self) -> Option<&Vec<String>> {
    self.nonce.as_ref()
  }

  pub fn reset_nonce(&mut self) {
    self.nonce = None;
  }

}



