/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesVendorsDestinyVendorComponent : This component contains essential/summary information about the vendor.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesVendorsDestinyVendorComponent {
  /// If True, you can purchase from the Vendor.  Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?).
  #[serde(rename = "canPurchase")]
  can_purchase: Option<bool>,
  /// If the Vendor has a related Reputation, this is the Progression data that represents the character's Reputation level with this Vendor.
  #[serde(rename = "progression")]
  progression: Option<Value>,
  /// An index into the vendor definition's \"locations\" property array, indicating which location they are at currently. If -1, then the vendor has no known location (and you may choose not to show them in your UI as a result. I mean, it's your bag honey)
  #[serde(rename = "vendorLocationIndex")]
  vendor_location_index: Option<i32>,
  /// If this vendor has a seasonal rank, this will be the calculated value of that rank. How nice is that? I mean, that's pretty sweeet. It's a whole 32 bit integer.
  #[serde(rename = "seasonalRank")]
  seasonal_rank: Option<i32>,
  /// The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
  #[serde(rename = "vendorHash")]
  vendor_hash: Option<i32>,
  /// The date when this vendor's inventory will next rotate/refresh.  Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.  Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.
  #[serde(rename = "nextRefreshDate")]
  next_refresh_date: Option<String>,
  /// If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.
  #[serde(rename = "enabled")]
  enabled: Option<bool>
}

impl DestinyEntitiesVendorsDestinyVendorComponent {
  /// This component contains essential/summary information about the vendor.
  pub fn new() -> DestinyEntitiesVendorsDestinyVendorComponent {
    DestinyEntitiesVendorsDestinyVendorComponent {
      can_purchase: None,
      progression: None,
      vendor_location_index: None,
      seasonal_rank: None,
      vendor_hash: None,
      next_refresh_date: None,
      enabled: None
    }
  }

  pub fn set_can_purchase(&mut self, can_purchase: bool) {
    self.can_purchase = Some(can_purchase);
  }

  pub fn with_can_purchase(mut self, can_purchase: bool) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.can_purchase = Some(can_purchase);
    self
  }

  pub fn can_purchase(&self) -> Option<&bool> {
    self.can_purchase.as_ref()
  }

  pub fn reset_can_purchase(&mut self) {
    self.can_purchase = None;
  }

  pub fn set_progression(&mut self, progression: Value) {
    self.progression = Some(progression);
  }

  pub fn with_progression(mut self, progression: Value) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.progression = Some(progression);
    self
  }

  pub fn progression(&self) -> Option<&Value> {
    self.progression.as_ref()
  }

  pub fn reset_progression(&mut self) {
    self.progression = None;
  }

  pub fn set_vendor_location_index(&mut self, vendor_location_index: i32) {
    self.vendor_location_index = Some(vendor_location_index);
  }

  pub fn with_vendor_location_index(mut self, vendor_location_index: i32) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.vendor_location_index = Some(vendor_location_index);
    self
  }

  pub fn vendor_location_index(&self) -> Option<&i32> {
    self.vendor_location_index.as_ref()
  }

  pub fn reset_vendor_location_index(&mut self) {
    self.vendor_location_index = None;
  }

  pub fn set_seasonal_rank(&mut self, seasonal_rank: i32) {
    self.seasonal_rank = Some(seasonal_rank);
  }

  pub fn with_seasonal_rank(mut self, seasonal_rank: i32) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.seasonal_rank = Some(seasonal_rank);
    self
  }

  pub fn seasonal_rank(&self) -> Option<&i32> {
    self.seasonal_rank.as_ref()
  }

  pub fn reset_seasonal_rank(&mut self) {
    self.seasonal_rank = None;
  }

  pub fn set_vendor_hash(&mut self, vendor_hash: i32) {
    self.vendor_hash = Some(vendor_hash);
  }

  pub fn with_vendor_hash(mut self, vendor_hash: i32) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.vendor_hash = Some(vendor_hash);
    self
  }

  pub fn vendor_hash(&self) -> Option<&i32> {
    self.vendor_hash.as_ref()
  }

  pub fn reset_vendor_hash(&mut self) {
    self.vendor_hash = None;
  }

  pub fn set_next_refresh_date(&mut self, next_refresh_date: String) {
    self.next_refresh_date = Some(next_refresh_date);
  }

  pub fn with_next_refresh_date(mut self, next_refresh_date: String) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.next_refresh_date = Some(next_refresh_date);
    self
  }

  pub fn next_refresh_date(&self) -> Option<&String> {
    self.next_refresh_date.as_ref()
  }

  pub fn reset_next_refresh_date(&mut self) {
    self.next_refresh_date = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

}



