/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyHistoricalWeaponStats {
  /// The hash ID of the item definition that describes the weapon.
  #[serde(rename = "referenceId")]
  reference_id: Option<i32>,
  /// Collection of stats for the period.
  #[serde(rename = "values")]
  values: Option<::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>>
}

impl DestinyHistoricalStatsDestinyHistoricalWeaponStats {
  pub fn new() -> DestinyHistoricalStatsDestinyHistoricalWeaponStats {
    DestinyHistoricalStatsDestinyHistoricalWeaponStats {
      reference_id: None,
      values: None
    }
  }

  pub fn set_reference_id(&mut self, reference_id: i32) {
    self.reference_id = Some(reference_id);
  }

  pub fn with_reference_id(mut self, reference_id: i32) -> DestinyHistoricalStatsDestinyHistoricalWeaponStats {
    self.reference_id = Some(reference_id);
    self
  }

  pub fn reference_id(&self) -> Option<&i32> {
    self.reference_id.as_ref()
  }

  pub fn reset_reference_id(&mut self) {
    self.reference_id = None;
  }

  pub fn set_values(&mut self, values: ::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>) {
    self.values = Some(values);
  }

  pub fn with_values(mut self, values: ::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>) -> DestinyHistoricalStatsDestinyHistoricalWeaponStats {
    self.values = Some(values);
    self
  }

  pub fn values(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>> {
    self.values.as_ref()
  }

  pub fn reset_values(&mut self) {
    self.values = None;
  }

}



