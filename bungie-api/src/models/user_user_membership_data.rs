/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserUserMembershipData {
  /// this allows you to see destiny memberships that are visible and linked to this account (regardless of whether or not they have characters on the world server)
  #[serde(rename = "destinyMemberships")]
  destiny_memberships: Option<Vec<::models::GroupsV2GroupUserInfoCard>>,
  /// If this property is populated, it will have the membership ID of the account considered to be \"primary\" in this user's cross save relationship.   If null, this user has no cross save relationship, nor primary account.
  #[serde(rename = "primaryMembershipId")]
  primary_membership_id: Option<i64>,
  #[serde(rename = "bungieNetUser")]
  bungie_net_user: Option<::models::UserGeneralUser>
}

impl UserUserMembershipData {
  pub fn new() -> UserUserMembershipData {
    UserUserMembershipData {
      destiny_memberships: None,
      primary_membership_id: None,
      bungie_net_user: None
    }
  }

  pub fn set_destiny_memberships(&mut self, destiny_memberships: Vec<::models::GroupsV2GroupUserInfoCard>) {
    self.destiny_memberships = Some(destiny_memberships);
  }

  pub fn with_destiny_memberships(mut self, destiny_memberships: Vec<::models::GroupsV2GroupUserInfoCard>) -> UserUserMembershipData {
    self.destiny_memberships = Some(destiny_memberships);
    self
  }

  pub fn destiny_memberships(&self) -> Option<&Vec<::models::GroupsV2GroupUserInfoCard>> {
    self.destiny_memberships.as_ref()
  }

  pub fn reset_destiny_memberships(&mut self) {
    self.destiny_memberships = None;
  }

  pub fn set_primary_membership_id(&mut self, primary_membership_id: i64) {
    self.primary_membership_id = Some(primary_membership_id);
  }

  pub fn with_primary_membership_id(mut self, primary_membership_id: i64) -> UserUserMembershipData {
    self.primary_membership_id = Some(primary_membership_id);
    self
  }

  pub fn primary_membership_id(&self) -> Option<&i64> {
    self.primary_membership_id.as_ref()
  }

  pub fn reset_primary_membership_id(&mut self) {
    self.primary_membership_id = None;
  }

  pub fn set_bungie_net_user(&mut self, bungie_net_user: ::models::UserGeneralUser) {
    self.bungie_net_user = Some(bungie_net_user);
  }

  pub fn with_bungie_net_user(mut self, bungie_net_user: ::models::UserGeneralUser) -> UserUserMembershipData {
    self.bungie_net_user = Some(bungie_net_user);
    self
  }

  pub fn bungie_net_user(&self) -> Option<&::models::UserGeneralUser> {
    self.bungie_net_user.as_ref()
  }

  pub fn reset_bungie_net_user(&mut self) {
    self.bungie_net_user = None;
  }

}



