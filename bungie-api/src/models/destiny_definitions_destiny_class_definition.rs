/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyClassDefinition : Defines a Character Class in Destiny 2. These are types of characters you can play, like Titan, Warlock, and Hunter.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyClassDefinition {
  /// In Destiny 1, we added a convenience Enumeration for referring to classes. We've kept it, though mostly for posterity. This is the enum value for this definition's class.
  #[serde(rename = "classType")]
  class_type: Option<i32>,
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// A localized string referring to the singular form of the Class's name when referred to in gendered form. Keyed by the DestinyGender.
  #[serde(rename = "genderedClassNames")]
  gendered_class_names: Option<::std::collections::HashMap<String, String>>,
  #[serde(rename = "genderedClassNamesByGenderHash")]
  gendered_class_names_by_gender_hash: Option<::std::collections::HashMap<String, String>>,
  /// Mentors don't really mean anything anymore. Don't expect this to be populated.
  #[serde(rename = "mentorVendorHash")]
  mentor_vendor_hash: Option<i32>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyClassDefinition {
  /// Defines a Character Class in Destiny 2. These are types of characters you can play, like Titan, Warlock, and Hunter.
  pub fn new() -> DestinyDefinitionsDestinyClassDefinition {
    DestinyDefinitionsDestinyClassDefinition {
      class_type: None,
      display_properties: None,
      gendered_class_names: None,
      gendered_class_names_by_gender_hash: None,
      mentor_vendor_hash: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_class_type(&mut self, class_type: i32) {
    self.class_type = Some(class_type);
  }

  pub fn with_class_type(mut self, class_type: i32) -> DestinyDefinitionsDestinyClassDefinition {
    self.class_type = Some(class_type);
    self
  }

  pub fn class_type(&self) -> Option<&i32> {
    self.class_type.as_ref()
  }

  pub fn reset_class_type(&mut self) {
    self.class_type = None;
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsDestinyClassDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_gendered_class_names(&mut self, gendered_class_names: ::std::collections::HashMap<String, String>) {
    self.gendered_class_names = Some(gendered_class_names);
  }

  pub fn with_gendered_class_names(mut self, gendered_class_names: ::std::collections::HashMap<String, String>) -> DestinyDefinitionsDestinyClassDefinition {
    self.gendered_class_names = Some(gendered_class_names);
    self
  }

  pub fn gendered_class_names(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.gendered_class_names.as_ref()
  }

  pub fn reset_gendered_class_names(&mut self) {
    self.gendered_class_names = None;
  }

  pub fn set_gendered_class_names_by_gender_hash(&mut self, gendered_class_names_by_gender_hash: ::std::collections::HashMap<String, String>) {
    self.gendered_class_names_by_gender_hash = Some(gendered_class_names_by_gender_hash);
  }

  pub fn with_gendered_class_names_by_gender_hash(mut self, gendered_class_names_by_gender_hash: ::std::collections::HashMap<String, String>) -> DestinyDefinitionsDestinyClassDefinition {
    self.gendered_class_names_by_gender_hash = Some(gendered_class_names_by_gender_hash);
    self
  }

  pub fn gendered_class_names_by_gender_hash(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.gendered_class_names_by_gender_hash.as_ref()
  }

  pub fn reset_gendered_class_names_by_gender_hash(&mut self) {
    self.gendered_class_names_by_gender_hash = None;
  }

  pub fn set_mentor_vendor_hash(&mut self, mentor_vendor_hash: i32) {
    self.mentor_vendor_hash = Some(mentor_vendor_hash);
  }

  pub fn with_mentor_vendor_hash(mut self, mentor_vendor_hash: i32) -> DestinyDefinitionsDestinyClassDefinition {
    self.mentor_vendor_hash = Some(mentor_vendor_hash);
    self
  }

  pub fn mentor_vendor_hash(&self) -> Option<&i32> {
    self.mentor_vendor_hash.as_ref()
  }

  pub fn reset_mentor_vendor_hash(&mut self) {
    self.mentor_vendor_hash = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyClassDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyClassDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyClassDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



