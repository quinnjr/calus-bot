/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentModelsContentPreview {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "path")]
  path: Option<String>,
  #[serde(rename = "itemInSet")]
  item_in_set: Option<bool>,
  #[serde(rename = "setTag")]
  set_tag: Option<String>,
  #[serde(rename = "setNesting")]
  set_nesting: Option<i32>,
  #[serde(rename = "useSetId")]
  use_set_id: Option<i32>
}

impl ContentModelsContentPreview {
  pub fn new() -> ContentModelsContentPreview {
    ContentModelsContentPreview {
      name: None,
      path: None,
      item_in_set: None,
      set_tag: None,
      set_nesting: None,
      use_set_id: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ContentModelsContentPreview {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> ContentModelsContentPreview {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_item_in_set(&mut self, item_in_set: bool) {
    self.item_in_set = Some(item_in_set);
  }

  pub fn with_item_in_set(mut self, item_in_set: bool) -> ContentModelsContentPreview {
    self.item_in_set = Some(item_in_set);
    self
  }

  pub fn item_in_set(&self) -> Option<&bool> {
    self.item_in_set.as_ref()
  }

  pub fn reset_item_in_set(&mut self) {
    self.item_in_set = None;
  }

  pub fn set_set_tag(&mut self, set_tag: String) {
    self.set_tag = Some(set_tag);
  }

  pub fn with_set_tag(mut self, set_tag: String) -> ContentModelsContentPreview {
    self.set_tag = Some(set_tag);
    self
  }

  pub fn set_tag(&self) -> Option<&String> {
    self.set_tag.as_ref()
  }

  pub fn reset_set_tag(&mut self) {
    self.set_tag = None;
  }

  pub fn set_set_nesting(&mut self, set_nesting: i32) {
    self.set_nesting = Some(set_nesting);
  }

  pub fn with_set_nesting(mut self, set_nesting: i32) -> ContentModelsContentPreview {
    self.set_nesting = Some(set_nesting);
    self
  }

  pub fn set_nesting(&self) -> Option<&i32> {
    self.set_nesting.as_ref()
  }

  pub fn reset_set_nesting(&mut self) {
    self.set_nesting = None;
  }

  pub fn set_use_set_id(&mut self, use_set_id: i32) {
    self.use_set_id = Some(use_set_id);
  }

  pub fn with_use_set_id(mut self, use_set_id: i32) -> ContentModelsContentPreview {
    self.use_set_id = Some(use_set_id);
    self
  }

  pub fn use_set_id(&self) -> Option<&i32> {
    self.use_set_id.as_ref()
  }

  pub fn reset_use_set_id(&mut self) {
    self.use_set_id = None;
  }

}



