/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData {
  /// List of weapons and their perspective values.
  #[serde(rename = "weapons")]
  weapons: Option<Vec<::models::DestinyHistoricalStatsDestinyHistoricalWeaponStats>>,
  /// Collection of stats for the player in this activity.
  #[serde(rename = "values")]
  values: Option<::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>>
}

impl DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData {
  pub fn new() -> DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData {
    DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData {
      weapons: None,
      values: None
    }
  }

  pub fn set_weapons(&mut self, weapons: Vec<::models::DestinyHistoricalStatsDestinyHistoricalWeaponStats>) {
    self.weapons = Some(weapons);
  }

  pub fn with_weapons(mut self, weapons: Vec<::models::DestinyHistoricalStatsDestinyHistoricalWeaponStats>) -> DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData {
    self.weapons = Some(weapons);
    self
  }

  pub fn weapons(&self) -> Option<&Vec<::models::DestinyHistoricalStatsDestinyHistoricalWeaponStats>> {
    self.weapons.as_ref()
  }

  pub fn reset_weapons(&mut self) {
    self.weapons = None;
  }

  pub fn set_values(&mut self, values: ::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>) {
    self.values = Some(values);
  }

  pub fn with_values(mut self, values: ::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>) -> DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData {
    self.values = Some(values);
    self
  }

  pub fn values(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyHistoricalStatsDestinyHistoricalStatsValue>> {
    self.values.as_ref()
  }

  pub fn reset_values(&mut self) {
    self.values = None;
  }

}



