/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinySocketsDestinyItemPlugBase {
  /// The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
  #[serde(rename = "plugItemHash")]
  plug_item_hash: Option<i32>,
  /// If true, this plug has met all of its insertion requirements. Big if true.
  #[serde(rename = "canInsert")]
  can_insert: Option<bool>,
  /// If true, this plug will provide its benefits while inserted.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.
  #[serde(rename = "insertFailIndexes")]
  insert_fail_indexes: Option<Vec<i32>>,
  /// If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.
  #[serde(rename = "enableFailIndexes")]
  enable_fail_indexes: Option<Vec<i32>>
}

impl DestinySocketsDestinyItemPlugBase {
  pub fn new() -> DestinySocketsDestinyItemPlugBase {
    DestinySocketsDestinyItemPlugBase {
      plug_item_hash: None,
      can_insert: None,
      enabled: None,
      insert_fail_indexes: None,
      enable_fail_indexes: None
    }
  }

  pub fn set_plug_item_hash(&mut self, plug_item_hash: i32) {
    self.plug_item_hash = Some(plug_item_hash);
  }

  pub fn with_plug_item_hash(mut self, plug_item_hash: i32) -> DestinySocketsDestinyItemPlugBase {
    self.plug_item_hash = Some(plug_item_hash);
    self
  }

  pub fn plug_item_hash(&self) -> Option<&i32> {
    self.plug_item_hash.as_ref()
  }

  pub fn reset_plug_item_hash(&mut self) {
    self.plug_item_hash = None;
  }

  pub fn set_can_insert(&mut self, can_insert: bool) {
    self.can_insert = Some(can_insert);
  }

  pub fn with_can_insert(mut self, can_insert: bool) -> DestinySocketsDestinyItemPlugBase {
    self.can_insert = Some(can_insert);
    self
  }

  pub fn can_insert(&self) -> Option<&bool> {
    self.can_insert.as_ref()
  }

  pub fn reset_can_insert(&mut self) {
    self.can_insert = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> DestinySocketsDestinyItemPlugBase {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_insert_fail_indexes(&mut self, insert_fail_indexes: Vec<i32>) {
    self.insert_fail_indexes = Some(insert_fail_indexes);
  }

  pub fn with_insert_fail_indexes(mut self, insert_fail_indexes: Vec<i32>) -> DestinySocketsDestinyItemPlugBase {
    self.insert_fail_indexes = Some(insert_fail_indexes);
    self
  }

  pub fn insert_fail_indexes(&self) -> Option<&Vec<i32>> {
    self.insert_fail_indexes.as_ref()
  }

  pub fn reset_insert_fail_indexes(&mut self) {
    self.insert_fail_indexes = None;
  }

  pub fn set_enable_fail_indexes(&mut self, enable_fail_indexes: Vec<i32>) {
    self.enable_fail_indexes = Some(enable_fail_indexes);
  }

  pub fn with_enable_fail_indexes(mut self, enable_fail_indexes: Vec<i32>) -> DestinySocketsDestinyItemPlugBase {
    self.enable_fail_indexes = Some(enable_fail_indexes);
    self
  }

  pub fn enable_fail_indexes(&self) -> Option<&Vec<i32>> {
    self.enable_fail_indexes.as_ref()
  }

  pub fn reset_enable_fail_indexes(&mut self) {
    self.enable_fail_indexes = None;
  }

}



