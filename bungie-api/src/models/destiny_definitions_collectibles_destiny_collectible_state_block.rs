/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock {
  #[serde(rename = "obscuredOverrideItemHash")]
  obscured_override_item_hash: Option<i32>,
  #[serde(rename = "requirements")]
  requirements: Option<::models::DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock>
}

impl DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock {
  pub fn new() -> DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock {
    DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock {
      obscured_override_item_hash: None,
      requirements: None
    }
  }

  pub fn set_obscured_override_item_hash(&mut self, obscured_override_item_hash: i32) {
    self.obscured_override_item_hash = Some(obscured_override_item_hash);
  }

  pub fn with_obscured_override_item_hash(mut self, obscured_override_item_hash: i32) -> DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock {
    self.obscured_override_item_hash = Some(obscured_override_item_hash);
    self
  }

  pub fn obscured_override_item_hash(&self) -> Option<&i32> {
    self.obscured_override_item_hash.as_ref()
  }

  pub fn reset_obscured_override_item_hash(&mut self) {
    self.obscured_override_item_hash = None;
  }

  pub fn set_requirements(&mut self, requirements: ::models::DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock) {
    self.requirements = Some(requirements);
  }

  pub fn with_requirements(mut self, requirements: ::models::DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock) -> DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock {
    self.requirements = Some(requirements);
    self
  }

  pub fn requirements(&self) -> Option<&::models::DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock> {
    self.requirements.as_ref()
  }

  pub fn reset_requirements(&mut self) {
    self.requirements = None;
  }

}



