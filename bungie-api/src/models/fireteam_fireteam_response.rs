/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FireteamFireteamResponse {
  #[serde(rename = "Summary")]
  summary: Option<::models::FireteamFireteamSummary>,
  #[serde(rename = "Members")]
  members: Option<Vec<::models::FireteamFireteamMember>>,
  #[serde(rename = "Alternates")]
  alternates: Option<Vec<::models::FireteamFireteamMember>>
}

impl FireteamFireteamResponse {
  pub fn new() -> FireteamFireteamResponse {
    FireteamFireteamResponse {
      summary: None,
      members: None,
      alternates: None
    }
  }

  pub fn set_summary(&mut self, summary: ::models::FireteamFireteamSummary) {
    self.summary = Some(summary);
  }

  pub fn with_summary(mut self, summary: ::models::FireteamFireteamSummary) -> FireteamFireteamResponse {
    self.summary = Some(summary);
    self
  }

  pub fn summary(&self) -> Option<&::models::FireteamFireteamSummary> {
    self.summary.as_ref()
  }

  pub fn reset_summary(&mut self) {
    self.summary = None;
  }

  pub fn set_members(&mut self, members: Vec<::models::FireteamFireteamMember>) {
    self.members = Some(members);
  }

  pub fn with_members(mut self, members: Vec<::models::FireteamFireteamMember>) -> FireteamFireteamResponse {
    self.members = Some(members);
    self
  }

  pub fn members(&self) -> Option<&Vec<::models::FireteamFireteamMember>> {
    self.members.as_ref()
  }

  pub fn reset_members(&mut self) {
    self.members = None;
  }

  pub fn set_alternates(&mut self, alternates: Vec<::models::FireteamFireteamMember>) {
    self.alternates = Some(alternates);
  }

  pub fn with_alternates(mut self, alternates: Vec<::models::FireteamFireteamMember>) -> FireteamFireteamResponse {
    self.alternates = Some(alternates);
    self
  }

  pub fn alternates(&self) -> Option<&Vec<::models::FireteamFireteamMember>> {
    self.alternates.as_ref()
  }

  pub fn reset_alternates(&mut self) {
    self.alternates = None;
  }

}



