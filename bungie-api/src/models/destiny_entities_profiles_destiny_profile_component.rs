/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesProfilesDestinyProfileComponent : The most essential summary information about a Profile (in Destiny 1, we called these \"Accounts\").

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesProfilesDestinyProfileComponent {
  /// If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.
  #[serde(rename = "userInfo")]
  user_info: Option<Value>,
  /// The last time the user played with any character on this Profile.
  #[serde(rename = "dateLastPlayed")]
  date_last_played: Option<String>,
  /// If you want to know what expansions they own, this will contain that data.   IMPORTANT: This field may not return the data you're interested in for Cross-Saved users. It returns the last ownership data we saw for this account - which is to say, what they've purchased on the platform on which they last played, which now could be a different platform.   If you don't care about per-platform ownership and only care about whatever platform it seems they are playing on most recently, then this should be \"good enough.\" Otherwise, this should be considered deprecated. We do not have a good alternative to provide at this time with platform specific ownership data for DLC.
  #[serde(rename = "versionsOwned")]
  versions_owned: Option<i32>,
  /// A list of the character IDs, for further querying on your part.
  #[serde(rename = "characterIds")]
  character_ids: Option<Vec<i64>>,
  /// A list of seasons that this profile owns. Unlike versionsOwned, these stay with the profile across Platforms, and thus will be valid.   It turns out that Stadia Pro subscriptions will give access to seasons but only while playing on Stadia and with an active subscription. So some users (users who have Stadia Pro but choose to play on some other platform) won't see these as available: it will be whatever seasons are available for the platform on which they last played.
  #[serde(rename = "seasonHashes")]
  season_hashes: Option<Vec<i32>>,
  /// If populated, this is a reference to the season that is currently active.
  #[serde(rename = "currentSeasonHash")]
  current_season_hash: Option<i32>
}

impl DestinyEntitiesProfilesDestinyProfileComponent {
  /// The most essential summary information about a Profile (in Destiny 1, we called these \"Accounts\").
  pub fn new() -> DestinyEntitiesProfilesDestinyProfileComponent {
    DestinyEntitiesProfilesDestinyProfileComponent {
      user_info: None,
      date_last_played: None,
      versions_owned: None,
      character_ids: None,
      season_hashes: None,
      current_season_hash: None
    }
  }

  pub fn set_user_info(&mut self, user_info: Value) {
    self.user_info = Some(user_info);
  }

  pub fn with_user_info(mut self, user_info: Value) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.user_info = Some(user_info);
    self
  }

  pub fn user_info(&self) -> Option<&Value> {
    self.user_info.as_ref()
  }

  pub fn reset_user_info(&mut self) {
    self.user_info = None;
  }

  pub fn set_date_last_played(&mut self, date_last_played: String) {
    self.date_last_played = Some(date_last_played);
  }

  pub fn with_date_last_played(mut self, date_last_played: String) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.date_last_played = Some(date_last_played);
    self
  }

  pub fn date_last_played(&self) -> Option<&String> {
    self.date_last_played.as_ref()
  }

  pub fn reset_date_last_played(&mut self) {
    self.date_last_played = None;
  }

  pub fn set_versions_owned(&mut self, versions_owned: i32) {
    self.versions_owned = Some(versions_owned);
  }

  pub fn with_versions_owned(mut self, versions_owned: i32) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.versions_owned = Some(versions_owned);
    self
  }

  pub fn versions_owned(&self) -> Option<&i32> {
    self.versions_owned.as_ref()
  }

  pub fn reset_versions_owned(&mut self) {
    self.versions_owned = None;
  }

  pub fn set_character_ids(&mut self, character_ids: Vec<i64>) {
    self.character_ids = Some(character_ids);
  }

  pub fn with_character_ids(mut self, character_ids: Vec<i64>) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.character_ids = Some(character_ids);
    self
  }

  pub fn character_ids(&self) -> Option<&Vec<i64>> {
    self.character_ids.as_ref()
  }

  pub fn reset_character_ids(&mut self) {
    self.character_ids = None;
  }

  pub fn set_season_hashes(&mut self, season_hashes: Vec<i32>) {
    self.season_hashes = Some(season_hashes);
  }

  pub fn with_season_hashes(mut self, season_hashes: Vec<i32>) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.season_hashes = Some(season_hashes);
    self
  }

  pub fn season_hashes(&self) -> Option<&Vec<i32>> {
    self.season_hashes.as_ref()
  }

  pub fn reset_season_hashes(&mut self) {
    self.season_hashes = None;
  }

  pub fn set_current_season_hash(&mut self, current_season_hash: i32) {
    self.current_season_hash = Some(current_season_hash);
  }

  pub fn with_current_season_hash(mut self, current_season_hash: i32) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.current_season_hash = Some(current_season_hash);
    self
  }

  pub fn current_season_hash(&self) -> Option<&i32> {
    self.current_season_hash.as_ref()
  }

  pub fn reset_current_season_hash(&mut self) {
    self.current_season_hash = None;
  }

}



