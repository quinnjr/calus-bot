/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserHardLinkedUserMembership {
  #[serde(rename = "membershipType")]
  membership_type: Option<i32>,
  #[serde(rename = "membershipId")]
  membership_id: Option<i64>,
  #[serde(rename = "CrossSaveOverriddenType")]
  cross_save_overridden_type: Option<i32>,
  #[serde(rename = "CrossSaveOverriddenMembershipId")]
  cross_save_overridden_membership_id: Option<i64>
}

impl UserHardLinkedUserMembership {
  pub fn new() -> UserHardLinkedUserMembership {
    UserHardLinkedUserMembership {
      membership_type: None,
      membership_id: None,
      cross_save_overridden_type: None,
      cross_save_overridden_membership_id: None
    }
  }

  pub fn set_membership_type(&mut self, membership_type: i32) {
    self.membership_type = Some(membership_type);
  }

  pub fn with_membership_type(mut self, membership_type: i32) -> UserHardLinkedUserMembership {
    self.membership_type = Some(membership_type);
    self
  }

  pub fn membership_type(&self) -> Option<&i32> {
    self.membership_type.as_ref()
  }

  pub fn reset_membership_type(&mut self) {
    self.membership_type = None;
  }

  pub fn set_membership_id(&mut self, membership_id: i64) {
    self.membership_id = Some(membership_id);
  }

  pub fn with_membership_id(mut self, membership_id: i64) -> UserHardLinkedUserMembership {
    self.membership_id = Some(membership_id);
    self
  }

  pub fn membership_id(&self) -> Option<&i64> {
    self.membership_id.as_ref()
  }

  pub fn reset_membership_id(&mut self) {
    self.membership_id = None;
  }

  pub fn set_cross_save_overridden_type(&mut self, cross_save_overridden_type: i32) {
    self.cross_save_overridden_type = Some(cross_save_overridden_type);
  }

  pub fn with_cross_save_overridden_type(mut self, cross_save_overridden_type: i32) -> UserHardLinkedUserMembership {
    self.cross_save_overridden_type = Some(cross_save_overridden_type);
    self
  }

  pub fn cross_save_overridden_type(&self) -> Option<&i32> {
    self.cross_save_overridden_type.as_ref()
  }

  pub fn reset_cross_save_overridden_type(&mut self) {
    self.cross_save_overridden_type = None;
  }

  pub fn set_cross_save_overridden_membership_id(&mut self, cross_save_overridden_membership_id: i64) {
    self.cross_save_overridden_membership_id = Some(cross_save_overridden_membership_id);
  }

  pub fn with_cross_save_overridden_membership_id(mut self, cross_save_overridden_membership_id: i64) -> UserHardLinkedUserMembership {
    self.cross_save_overridden_membership_id = Some(cross_save_overridden_membership_id);
    self
  }

  pub fn cross_save_overridden_membership_id(&self) -> Option<&i64> {
    self.cross_save_overridden_membership_id.as_ref()
  }

  pub fn reset_cross_save_overridden_membership_id(&mut self) {
    self.cross_save_overridden_membership_id = None;
  }

}



