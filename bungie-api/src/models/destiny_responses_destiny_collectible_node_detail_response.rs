/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyCollectibleNodeDetailResponse : Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyCollectibleNodeDetailResponse {
  /// COMPONENT TYPE: Collectibles
  #[serde(rename = "collectibles")]
  collectibles: Option<Value>,
  /// Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.  NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.  We may all come to regret this decision. We will see.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
  #[serde(rename = "collectibleItemComponents")]
  collectible_item_components: Option<Value>
}

impl DestinyResponsesDestinyCollectibleNodeDetailResponse {
  /// Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants.
  pub fn new() -> DestinyResponsesDestinyCollectibleNodeDetailResponse {
    DestinyResponsesDestinyCollectibleNodeDetailResponse {
      collectibles: None,
      collectible_item_components: None
    }
  }

  pub fn set_collectibles(&mut self, collectibles: Value) {
    self.collectibles = Some(collectibles);
  }

  pub fn with_collectibles(mut self, collectibles: Value) -> DestinyResponsesDestinyCollectibleNodeDetailResponse {
    self.collectibles = Some(collectibles);
    self
  }

  pub fn collectibles(&self) -> Option<&Value> {
    self.collectibles.as_ref()
  }

  pub fn reset_collectibles(&mut self) {
    self.collectibles = None;
  }

  pub fn set_collectible_item_components(&mut self, collectible_item_components: Value) {
    self.collectible_item_components = Some(collectible_item_components);
  }

  pub fn with_collectible_item_components(mut self, collectible_item_components: Value) -> DestinyResponsesDestinyCollectibleNodeDetailResponse {
    self.collectible_item_components = Some(collectible_item_components);
    self
  }

  pub fn collectible_item_components(&self) -> Option<&Value> {
    self.collectible_item_components.as_ref()
  }

  pub fn reset_collectible_item_components(&mut self) {
    self.collectible_item_components = None;
  }

}



