/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserEmailOptInDefinition : Defines a single opt-in category: a wide-scoped permission to send emails for the subject related to the opt-in.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserEmailOptInDefinition {
  /// The unique identifier for this opt-in category.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The flag value for this opt-in category. For historical reasons, this is defined as a flags enum.
  #[serde(rename = "value")]
  value: Option<i64>,
  /// If true, this opt-in setting should be set by default in situations where accounts are created without explicit choices about what they're opting into.
  #[serde(rename = "setByDefault")]
  set_by_default: Option<bool>,
  /// Information about the dependent subscriptions for this opt-in.
  #[serde(rename = "dependentSubscriptions")]
  dependent_subscriptions: Option<Vec<::models::UserEmailSubscriptionDefinition>>
}

impl UserEmailOptInDefinition {
  /// Defines a single opt-in category: a wide-scoped permission to send emails for the subject related to the opt-in.
  pub fn new() -> UserEmailOptInDefinition {
    UserEmailOptInDefinition {
      name: None,
      value: None,
      set_by_default: None,
      dependent_subscriptions: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> UserEmailOptInDefinition {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_value(&mut self, value: i64) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: i64) -> UserEmailOptInDefinition {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&i64> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

  pub fn set_set_by_default(&mut self, set_by_default: bool) {
    self.set_by_default = Some(set_by_default);
  }

  pub fn with_set_by_default(mut self, set_by_default: bool) -> UserEmailOptInDefinition {
    self.set_by_default = Some(set_by_default);
    self
  }

  pub fn set_by_default(&self) -> Option<&bool> {
    self.set_by_default.as_ref()
  }

  pub fn reset_set_by_default(&mut self) {
    self.set_by_default = None;
  }

  pub fn set_dependent_subscriptions(&mut self, dependent_subscriptions: Vec<::models::UserEmailSubscriptionDefinition>) {
    self.dependent_subscriptions = Some(dependent_subscriptions);
  }

  pub fn with_dependent_subscriptions(mut self, dependent_subscriptions: Vec<::models::UserEmailSubscriptionDefinition>) -> UserEmailOptInDefinition {
    self.dependent_subscriptions = Some(dependent_subscriptions);
    self
  }

  pub fn dependent_subscriptions(&self) -> Option<&Vec<::models::UserEmailSubscriptionDefinition>> {
    self.dependent_subscriptions.as_ref()
  }

  pub fn reset_dependent_subscriptions(&mut self) {
    self.dependent_subscriptions = None;
  }

}



