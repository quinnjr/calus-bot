/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyTalentExclusiveGroup : As of Destiny 2, nodes can exist as part of \"Exclusive Groups\". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause \"opposing\" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyTalentExclusiveGroup {
  /// The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.
  #[serde(rename = "groupHash")]
  group_hash: Option<i32>,
  /// If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.
  #[serde(rename = "loreHash")]
  lore_hash: Option<i32>,
  /// A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
  #[serde(rename = "nodeHashes")]
  node_hashes: Option<Vec<i32>>,
  /// A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.
  #[serde(rename = "opposingGroupHashes")]
  opposing_group_hashes: Option<Vec<i32>>,
  /// A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
  #[serde(rename = "opposingNodeHashes")]
  opposing_node_hashes: Option<Vec<i32>>
}

impl DestinyDefinitionsDestinyTalentExclusiveGroup {
  /// As of Destiny 2, nodes can exist as part of \"Exclusive Groups\". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause \"opposing\" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
  pub fn new() -> DestinyDefinitionsDestinyTalentExclusiveGroup {
    DestinyDefinitionsDestinyTalentExclusiveGroup {
      group_hash: None,
      lore_hash: None,
      node_hashes: None,
      opposing_group_hashes: None,
      opposing_node_hashes: None
    }
  }

  pub fn set_group_hash(&mut self, group_hash: i32) {
    self.group_hash = Some(group_hash);
  }

  pub fn with_group_hash(mut self, group_hash: i32) -> DestinyDefinitionsDestinyTalentExclusiveGroup {
    self.group_hash = Some(group_hash);
    self
  }

  pub fn group_hash(&self) -> Option<&i32> {
    self.group_hash.as_ref()
  }

  pub fn reset_group_hash(&mut self) {
    self.group_hash = None;
  }

  pub fn set_lore_hash(&mut self, lore_hash: i32) {
    self.lore_hash = Some(lore_hash);
  }

  pub fn with_lore_hash(mut self, lore_hash: i32) -> DestinyDefinitionsDestinyTalentExclusiveGroup {
    self.lore_hash = Some(lore_hash);
    self
  }

  pub fn lore_hash(&self) -> Option<&i32> {
    self.lore_hash.as_ref()
  }

  pub fn reset_lore_hash(&mut self) {
    self.lore_hash = None;
  }

  pub fn set_node_hashes(&mut self, node_hashes: Vec<i32>) {
    self.node_hashes = Some(node_hashes);
  }

  pub fn with_node_hashes(mut self, node_hashes: Vec<i32>) -> DestinyDefinitionsDestinyTalentExclusiveGroup {
    self.node_hashes = Some(node_hashes);
    self
  }

  pub fn node_hashes(&self) -> Option<&Vec<i32>> {
    self.node_hashes.as_ref()
  }

  pub fn reset_node_hashes(&mut self) {
    self.node_hashes = None;
  }

  pub fn set_opposing_group_hashes(&mut self, opposing_group_hashes: Vec<i32>) {
    self.opposing_group_hashes = Some(opposing_group_hashes);
  }

  pub fn with_opposing_group_hashes(mut self, opposing_group_hashes: Vec<i32>) -> DestinyDefinitionsDestinyTalentExclusiveGroup {
    self.opposing_group_hashes = Some(opposing_group_hashes);
    self
  }

  pub fn opposing_group_hashes(&self) -> Option<&Vec<i32>> {
    self.opposing_group_hashes.as_ref()
  }

  pub fn reset_opposing_group_hashes(&mut self) {
    self.opposing_group_hashes = None;
  }

  pub fn set_opposing_node_hashes(&mut self, opposing_node_hashes: Vec<i32>) {
    self.opposing_node_hashes = Some(opposing_node_hashes);
  }

  pub fn with_opposing_node_hashes(mut self, opposing_node_hashes: Vec<i32>) -> DestinyDefinitionsDestinyTalentExclusiveGroup {
    self.opposing_node_hashes = Some(opposing_node_hashes);
    self
  }

  pub fn opposing_node_hashes(&self) -> Option<&Vec<i32>> {
    self.opposing_node_hashes.as_ref()
  }

  pub fn reset_opposing_node_hashes(&mut self) {
    self.opposing_node_hashes = None;
  }

}



