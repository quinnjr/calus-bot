/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentModelsTagMetadataItem {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "tagText")]
  tag_text: Option<String>,
  #[serde(rename = "groups")]
  groups: Option<Vec<String>>,
  #[serde(rename = "isDefault")]
  is_default: Option<bool>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl ContentModelsTagMetadataItem {
  pub fn new() -> ContentModelsTagMetadataItem {
    ContentModelsTagMetadataItem {
      description: None,
      tag_text: None,
      groups: None,
      is_default: None,
      name: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ContentModelsTagMetadataItem {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_tag_text(&mut self, tag_text: String) {
    self.tag_text = Some(tag_text);
  }

  pub fn with_tag_text(mut self, tag_text: String) -> ContentModelsTagMetadataItem {
    self.tag_text = Some(tag_text);
    self
  }

  pub fn tag_text(&self) -> Option<&String> {
    self.tag_text.as_ref()
  }

  pub fn reset_tag_text(&mut self) {
    self.tag_text = None;
  }

  pub fn set_groups(&mut self, groups: Vec<String>) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Vec<String>) -> ContentModelsTagMetadataItem {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Vec<String>> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_is_default(&mut self, is_default: bool) {
    self.is_default = Some(is_default);
  }

  pub fn with_is_default(mut self, is_default: bool) -> ContentModelsTagMetadataItem {
    self.is_default = Some(is_default);
    self
  }

  pub fn is_default(&self) -> Option<&bool> {
    self.is_default.as_ref()
  }

  pub fn reset_is_default(&mut self) {
    self.is_default = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ContentModelsTagMetadataItem {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



