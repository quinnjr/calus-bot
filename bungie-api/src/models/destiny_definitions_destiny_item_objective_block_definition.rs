/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemObjectiveBlockDefinition : An item can have objectives on it. In practice, these are the exclusive purview of \"Quest Step\" items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.  Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
  /// The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.
  #[serde(rename = "objectiveHashes")]
  objective_hashes: Option<Vec<i32>>,
  /// For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).  Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.
  #[serde(rename = "displayActivityHashes")]
  display_activity_hashes: Option<Vec<i32>>,
  /// If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.
  #[serde(rename = "requireFullObjectiveCompletion")]
  require_full_objective_completion: Option<bool>,
  /// The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.
  #[serde(rename = "questlineItemHash")]
  questline_item_hash: Option<i32>,
  /// The localized string for narrative text related to this quest step, if any.
  #[serde(rename = "narrative")]
  narrative: Option<String>,
  /// The localized string describing an action to be performed associated with the objectives, if any.
  #[serde(rename = "objectiveVerbName")]
  objective_verb_name: Option<String>,
  /// The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.
  #[serde(rename = "questTypeIdentifier")]
  quest_type_identifier: Option<String>,
  /// A hashed value for the questTypeIdentifier, because apparently I like to be redundant.
  #[serde(rename = "questTypeHash")]
  quest_type_hash: Option<i32>,
  /// One entry per Objective on the item, it will have related display information.
  #[serde(rename = "perObjectiveDisplayProperties")]
  per_objective_display_properties: Option<Vec<::models::DestinyDefinitionsDestinyObjectiveDisplayProperties>>
}

impl DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
  /// An item can have objectives on it. In practice, these are the exclusive purview of \"Quest Step\" items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.  Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
  pub fn new() -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
      objective_hashes: None,
      display_activity_hashes: None,
      require_full_objective_completion: None,
      questline_item_hash: None,
      narrative: None,
      objective_verb_name: None,
      quest_type_identifier: None,
      quest_type_hash: None,
      per_objective_display_properties: None
    }
  }

  pub fn set_objective_hashes(&mut self, objective_hashes: Vec<i32>) {
    self.objective_hashes = Some(objective_hashes);
  }

  pub fn with_objective_hashes(mut self, objective_hashes: Vec<i32>) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.objective_hashes = Some(objective_hashes);
    self
  }

  pub fn objective_hashes(&self) -> Option<&Vec<i32>> {
    self.objective_hashes.as_ref()
  }

  pub fn reset_objective_hashes(&mut self) {
    self.objective_hashes = None;
  }

  pub fn set_display_activity_hashes(&mut self, display_activity_hashes: Vec<i32>) {
    self.display_activity_hashes = Some(display_activity_hashes);
  }

  pub fn with_display_activity_hashes(mut self, display_activity_hashes: Vec<i32>) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.display_activity_hashes = Some(display_activity_hashes);
    self
  }

  pub fn display_activity_hashes(&self) -> Option<&Vec<i32>> {
    self.display_activity_hashes.as_ref()
  }

  pub fn reset_display_activity_hashes(&mut self) {
    self.display_activity_hashes = None;
  }

  pub fn set_require_full_objective_completion(&mut self, require_full_objective_completion: bool) {
    self.require_full_objective_completion = Some(require_full_objective_completion);
  }

  pub fn with_require_full_objective_completion(mut self, require_full_objective_completion: bool) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.require_full_objective_completion = Some(require_full_objective_completion);
    self
  }

  pub fn require_full_objective_completion(&self) -> Option<&bool> {
    self.require_full_objective_completion.as_ref()
  }

  pub fn reset_require_full_objective_completion(&mut self) {
    self.require_full_objective_completion = None;
  }

  pub fn set_questline_item_hash(&mut self, questline_item_hash: i32) {
    self.questline_item_hash = Some(questline_item_hash);
  }

  pub fn with_questline_item_hash(mut self, questline_item_hash: i32) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.questline_item_hash = Some(questline_item_hash);
    self
  }

  pub fn questline_item_hash(&self) -> Option<&i32> {
    self.questline_item_hash.as_ref()
  }

  pub fn reset_questline_item_hash(&mut self) {
    self.questline_item_hash = None;
  }

  pub fn set_narrative(&mut self, narrative: String) {
    self.narrative = Some(narrative);
  }

  pub fn with_narrative(mut self, narrative: String) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.narrative = Some(narrative);
    self
  }

  pub fn narrative(&self) -> Option<&String> {
    self.narrative.as_ref()
  }

  pub fn reset_narrative(&mut self) {
    self.narrative = None;
  }

  pub fn set_objective_verb_name(&mut self, objective_verb_name: String) {
    self.objective_verb_name = Some(objective_verb_name);
  }

  pub fn with_objective_verb_name(mut self, objective_verb_name: String) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.objective_verb_name = Some(objective_verb_name);
    self
  }

  pub fn objective_verb_name(&self) -> Option<&String> {
    self.objective_verb_name.as_ref()
  }

  pub fn reset_objective_verb_name(&mut self) {
    self.objective_verb_name = None;
  }

  pub fn set_quest_type_identifier(&mut self, quest_type_identifier: String) {
    self.quest_type_identifier = Some(quest_type_identifier);
  }

  pub fn with_quest_type_identifier(mut self, quest_type_identifier: String) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.quest_type_identifier = Some(quest_type_identifier);
    self
  }

  pub fn quest_type_identifier(&self) -> Option<&String> {
    self.quest_type_identifier.as_ref()
  }

  pub fn reset_quest_type_identifier(&mut self) {
    self.quest_type_identifier = None;
  }

  pub fn set_quest_type_hash(&mut self, quest_type_hash: i32) {
    self.quest_type_hash = Some(quest_type_hash);
  }

  pub fn with_quest_type_hash(mut self, quest_type_hash: i32) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.quest_type_hash = Some(quest_type_hash);
    self
  }

  pub fn quest_type_hash(&self) -> Option<&i32> {
    self.quest_type_hash.as_ref()
  }

  pub fn reset_quest_type_hash(&mut self) {
    self.quest_type_hash = None;
  }

  pub fn set_per_objective_display_properties(&mut self, per_objective_display_properties: Vec<::models::DestinyDefinitionsDestinyObjectiveDisplayProperties>) {
    self.per_objective_display_properties = Some(per_objective_display_properties);
  }

  pub fn with_per_objective_display_properties(mut self, per_objective_display_properties: Vec<::models::DestinyDefinitionsDestinyObjectiveDisplayProperties>) -> DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    self.per_objective_display_properties = Some(per_objective_display_properties);
    self
  }

  pub fn per_objective_display_properties(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyObjectiveDisplayProperties>> {
    self.per_objective_display_properties.as_ref()
  }

  pub fn reset_per_objective_display_properties(&mut self) {
    self.per_objective_display_properties = None;
  }

}



