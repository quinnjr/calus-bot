/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TokensPartnerOfferClaimRequest {
  #[serde(rename = "PartnerOfferId")]
  partner_offer_id: Option<String>,
  #[serde(rename = "BungieNetMembershipId")]
  bungie_net_membership_id: Option<i64>,
  #[serde(rename = "TransactionId")]
  transaction_id: Option<String>
}

impl TokensPartnerOfferClaimRequest {
  pub fn new() -> TokensPartnerOfferClaimRequest {
    TokensPartnerOfferClaimRequest {
      partner_offer_id: None,
      bungie_net_membership_id: None,
      transaction_id: None
    }
  }

  pub fn set_partner_offer_id(&mut self, partner_offer_id: String) {
    self.partner_offer_id = Some(partner_offer_id);
  }

  pub fn with_partner_offer_id(mut self, partner_offer_id: String) -> TokensPartnerOfferClaimRequest {
    self.partner_offer_id = Some(partner_offer_id);
    self
  }

  pub fn partner_offer_id(&self) -> Option<&String> {
    self.partner_offer_id.as_ref()
  }

  pub fn reset_partner_offer_id(&mut self) {
    self.partner_offer_id = None;
  }

  pub fn set_bungie_net_membership_id(&mut self, bungie_net_membership_id: i64) {
    self.bungie_net_membership_id = Some(bungie_net_membership_id);
  }

  pub fn with_bungie_net_membership_id(mut self, bungie_net_membership_id: i64) -> TokensPartnerOfferClaimRequest {
    self.bungie_net_membership_id = Some(bungie_net_membership_id);
    self
  }

  pub fn bungie_net_membership_id(&self) -> Option<&i64> {
    self.bungie_net_membership_id.as_ref()
  }

  pub fn reset_bungie_net_membership_id(&mut self) {
    self.bungie_net_membership_id = None;
  }

  pub fn set_transaction_id(&mut self, transaction_id: String) {
    self.transaction_id = Some(transaction_id);
  }

  pub fn with_transaction_id(mut self, transaction_id: String) -> TokensPartnerOfferClaimRequest {
    self.transaction_id = Some(transaction_id);
    self
  }

  pub fn transaction_id(&self) -> Option<&String> {
    self.transaction_id.as_ref()
  }

  pub fn reset_transaction_id(&mut self) {
    self.transaction_id = None;
  }

}



