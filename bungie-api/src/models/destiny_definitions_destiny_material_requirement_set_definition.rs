/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyMaterialRequirementSetDefinition : Represent a set of material requirements: Items that either need to be owned or need to be consumed in order to perform an action.  A variety of other entities refer to these as gatekeepers and payments for actions that can be performed in game.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
  /// The list of all materials that are required.
  #[serde(rename = "materials")]
  materials: Option<Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
  /// Represent a set of material requirements: Items that either need to be owned or need to be consumed in order to perform an action.  A variety of other entities refer to these as gatekeepers and payments for actions that can be performed in game.
  pub fn new() -> DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
    DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
      materials: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_materials(&mut self, materials: Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>) {
    self.materials = Some(materials);
  }

  pub fn with_materials(mut self, materials: Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>) -> DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
    self.materials = Some(materials);
    self
  }

  pub fn materials(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyMaterialRequirement>> {
    self.materials.as_ref()
  }

  pub fn reset_materials(&mut self) {
    self.materials = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyMaterialRequirementSetDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



