/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyMilestonesDestinyMilestoneActivityPhase : Represents whatever information we can return about an explicit phase in an activity. In the future, I hope we'll have more than just \"guh, you done gone and did something,\" but for the forseeable future that's all we've got. I'm making it more than just a list of booleans out of that overly-optimistic hope.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyMilestoneActivityPhase {
  /// Indicates if the phase has been completed.
  #[serde(rename = "complete")]
  complete: Option<bool>,
  /// In DestinyActivityDefinition, if the activity has phases, there will be a set of phases defined in the \"insertionPoints\" property. This is the hash that maps to that phase.
  #[serde(rename = "phaseHash")]
  phase_hash: Option<i32>
}

impl DestinyMilestonesDestinyMilestoneActivityPhase {
  /// Represents whatever information we can return about an explicit phase in an activity. In the future, I hope we'll have more than just \"guh, you done gone and did something,\" but for the forseeable future that's all we've got. I'm making it more than just a list of booleans out of that overly-optimistic hope.
  pub fn new() -> DestinyMilestonesDestinyMilestoneActivityPhase {
    DestinyMilestonesDestinyMilestoneActivityPhase {
      complete: None,
      phase_hash: None
    }
  }

  pub fn set_complete(&mut self, complete: bool) {
    self.complete = Some(complete);
  }

  pub fn with_complete(mut self, complete: bool) -> DestinyMilestonesDestinyMilestoneActivityPhase {
    self.complete = Some(complete);
    self
  }

  pub fn complete(&self) -> Option<&bool> {
    self.complete.as_ref()
  }

  pub fn reset_complete(&mut self) {
    self.complete = None;
  }

  pub fn set_phase_hash(&mut self, phase_hash: i32) {
    self.phase_hash = Some(phase_hash);
  }

  pub fn with_phase_hash(mut self, phase_hash: i32) -> DestinyMilestonesDestinyMilestoneActivityPhase {
    self.phase_hash = Some(phase_hash);
    self
  }

  pub fn phase_hash(&self) -> Option<&i32> {
    self.phase_hash.as_ref()
  }

  pub fn reset_phase_hash(&mut self) {
    self.phase_hash = None;
  }

}



