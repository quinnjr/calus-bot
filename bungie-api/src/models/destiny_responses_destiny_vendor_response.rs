/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyVendorResponse : A response containing all of the components for a vendor.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyVendorResponse {
  /// The base properties of the vendor.  COMPONENT TYPE: Vendors
  #[serde(rename = "vendor")]
  vendor: Option<Value>,
  /// Categories that the vendor has available, and references to the sales therein.  COMPONENT TYPE: VendorCategories
  #[serde(rename = "categories")]
  categories: Option<Value>,
  /// Sales, keyed by the vendorItemIndex of the item being sold.  COMPONENT TYPE: VendorSales
  #[serde(rename = "sales")]
  sales: Option<Value>,
  /// Item components, keyed by the vendorItemIndex of the active sale items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
  #[serde(rename = "itemComponents")]
  item_components: Option<Value>,
  /// A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
  #[serde(rename = "currencyLookups")]
  currency_lookups: Option<Value>
}

impl DestinyResponsesDestinyVendorResponse {
  /// A response containing all of the components for a vendor.
  pub fn new() -> DestinyResponsesDestinyVendorResponse {
    DestinyResponsesDestinyVendorResponse {
      vendor: None,
      categories: None,
      sales: None,
      item_components: None,
      currency_lookups: None
    }
  }

  pub fn set_vendor(&mut self, vendor: Value) {
    self.vendor = Some(vendor);
  }

  pub fn with_vendor(mut self, vendor: Value) -> DestinyResponsesDestinyVendorResponse {
    self.vendor = Some(vendor);
    self
  }

  pub fn vendor(&self) -> Option<&Value> {
    self.vendor.as_ref()
  }

  pub fn reset_vendor(&mut self) {
    self.vendor = None;
  }

  pub fn set_categories(&mut self, categories: Value) {
    self.categories = Some(categories);
  }

  pub fn with_categories(mut self, categories: Value) -> DestinyResponsesDestinyVendorResponse {
    self.categories = Some(categories);
    self
  }

  pub fn categories(&self) -> Option<&Value> {
    self.categories.as_ref()
  }

  pub fn reset_categories(&mut self) {
    self.categories = None;
  }

  pub fn set_sales(&mut self, sales: Value) {
    self.sales = Some(sales);
  }

  pub fn with_sales(mut self, sales: Value) -> DestinyResponsesDestinyVendorResponse {
    self.sales = Some(sales);
    self
  }

  pub fn sales(&self) -> Option<&Value> {
    self.sales.as_ref()
  }

  pub fn reset_sales(&mut self) {
    self.sales = None;
  }

  pub fn set_item_components(&mut self, item_components: Value) {
    self.item_components = Some(item_components);
  }

  pub fn with_item_components(mut self, item_components: Value) -> DestinyResponsesDestinyVendorResponse {
    self.item_components = Some(item_components);
    self
  }

  pub fn item_components(&self) -> Option<&Value> {
    self.item_components.as_ref()
  }

  pub fn reset_item_components(&mut self) {
    self.item_components = None;
  }

  pub fn set_currency_lookups(&mut self, currency_lookups: Value) {
    self.currency_lookups = Some(currency_lookups);
  }

  pub fn with_currency_lookups(mut self, currency_lookups: Value) -> DestinyResponsesDestinyVendorResponse {
    self.currency_lookups = Some(currency_lookups);
    self
  }

  pub fn currency_lookups(&self) -> Option<&Value> {
    self.currency_lookups.as_ref()
  }

  pub fn reset_currency_lookups(&mut self) {
    self.currency_lookups = None;
  }

}



