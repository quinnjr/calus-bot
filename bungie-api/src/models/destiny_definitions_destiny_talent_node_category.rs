/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyTalentNodeCategory : An artificial construct provided by Bungie.Net, where we attempt to group talent nodes by functionality.  This is a single set of references to Talent Nodes that share a common trait or purpose.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyTalentNodeCategory {
  /// Mostly just for debug purposes, but if you find it useful you can have it. This is BNet's manually created identifier for this category.
  #[serde(rename = "identifier")]
  identifier: Option<String>,
  /// If true, we found the localized content in a related DestinyLoreDefinition instead of local BNet localization files. This is mostly for ease of my own future investigations.
  #[serde(rename = "isLoreDriven")]
  is_lore_driven: Option<bool>,
  /// Will contain at least the \"name\", which will be the title of the category. We will likely not have description and an icon yet, but I'm going to keep my options open.
  #[serde(rename = "displayProperties")]
  display_properties: Option<Value>,
  /// The set of all hash identifiers for Talent Nodes (DestinyTalentNodeDefinition) in this Talent Grid that are part of this Category.
  #[serde(rename = "nodeHashes")]
  node_hashes: Option<Vec<i32>>
}

impl DestinyDefinitionsDestinyTalentNodeCategory {
  /// An artificial construct provided by Bungie.Net, where we attempt to group talent nodes by functionality.  This is a single set of references to Talent Nodes that share a common trait or purpose.
  pub fn new() -> DestinyDefinitionsDestinyTalentNodeCategory {
    DestinyDefinitionsDestinyTalentNodeCategory {
      identifier: None,
      is_lore_driven: None,
      display_properties: None,
      node_hashes: None
    }
  }

  pub fn set_identifier(&mut self, identifier: String) {
    self.identifier = Some(identifier);
  }

  pub fn with_identifier(mut self, identifier: String) -> DestinyDefinitionsDestinyTalentNodeCategory {
    self.identifier = Some(identifier);
    self
  }

  pub fn identifier(&self) -> Option<&String> {
    self.identifier.as_ref()
  }

  pub fn reset_identifier(&mut self) {
    self.identifier = None;
  }

  pub fn set_is_lore_driven(&mut self, is_lore_driven: bool) {
    self.is_lore_driven = Some(is_lore_driven);
  }

  pub fn with_is_lore_driven(mut self, is_lore_driven: bool) -> DestinyDefinitionsDestinyTalentNodeCategory {
    self.is_lore_driven = Some(is_lore_driven);
    self
  }

  pub fn is_lore_driven(&self) -> Option<&bool> {
    self.is_lore_driven.as_ref()
  }

  pub fn reset_is_lore_driven(&mut self) {
    self.is_lore_driven = None;
  }

  pub fn set_display_properties(&mut self, display_properties: Value) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: Value) -> DestinyDefinitionsDestinyTalentNodeCategory {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&Value> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_node_hashes(&mut self, node_hashes: Vec<i32>) {
    self.node_hashes = Some(node_hashes);
  }

  pub fn with_node_hashes(mut self, node_hashes: Vec<i32>) -> DestinyDefinitionsDestinyTalentNodeCategory {
    self.node_hashes = Some(node_hashes);
    self
  }

  pub fn node_hashes(&self) -> Option<&Vec<i32>> {
    self.node_hashes.as_ref()
  }

  pub fn reset_node_hashes(&mut self) {
    self.node_hashes = None;
  }

}



