/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemActionRequiredItemDefinition : The definition of an item and quantity required in a character's inventory in order to perform an action.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemActionRequiredItemDefinition {
  /// The minimum quantity of the item you have to have.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// The hash identifier of the item you need to have. Use it to look up the DestinyInventoryItemDefinition for more info.
  #[serde(rename = "itemHash")]
  item_hash: Option<i32>,
  /// If true, the item/quantity will be deleted from your inventory when the action is performed. Otherwise, you'll retain these required items after the action is complete.
  #[serde(rename = "deleteOnAction")]
  delete_on_action: Option<bool>
}

impl DestinyDefinitionsDestinyItemActionRequiredItemDefinition {
  /// The definition of an item and quantity required in a character's inventory in order to perform an action.
  pub fn new() -> DestinyDefinitionsDestinyItemActionRequiredItemDefinition {
    DestinyDefinitionsDestinyItemActionRequiredItemDefinition {
      count: None,
      item_hash: None,
      delete_on_action: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> DestinyDefinitionsDestinyItemActionRequiredItemDefinition {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_item_hash(&mut self, item_hash: i32) {
    self.item_hash = Some(item_hash);
  }

  pub fn with_item_hash(mut self, item_hash: i32) -> DestinyDefinitionsDestinyItemActionRequiredItemDefinition {
    self.item_hash = Some(item_hash);
    self
  }

  pub fn item_hash(&self) -> Option<&i32> {
    self.item_hash.as_ref()
  }

  pub fn reset_item_hash(&mut self) {
    self.item_hash = None;
  }

  pub fn set_delete_on_action(&mut self, delete_on_action: bool) {
    self.delete_on_action = Some(delete_on_action);
  }

  pub fn with_delete_on_action(mut self, delete_on_action: bool) -> DestinyDefinitionsDestinyItemActionRequiredItemDefinition {
    self.delete_on_action = Some(delete_on_action);
    self
  }

  pub fn delete_on_action(&self) -> Option<&bool> {
    self.delete_on_action.as_ref()
  }

  pub fn reset_delete_on_action(&mut self) {
    self.delete_on_action = None;
  }

}



