/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition : Information about a single inventory bucket in a vendor flyout UI and how it is shown.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {
  /// If true, the inventory bucket should be able to be collapsed visually.
  #[serde(rename = "collapsible")]
  collapsible: Option<bool>,
  /// The inventory bucket whose contents should be shown.
  #[serde(rename = "inventoryBucketHash")]
  inventory_bucket_hash: Option<i32>,
  /// The methodology to use for sorting items from the flyout.
  #[serde(rename = "sortItemsBy")]
  sort_items_by: Option<i32>
}

impl DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {
  /// Information about a single inventory bucket in a vendor flyout UI and how it is shown.
  pub fn new() -> DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {
    DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {
      collapsible: None,
      inventory_bucket_hash: None,
      sort_items_by: None
    }
  }

  pub fn set_collapsible(&mut self, collapsible: bool) {
    self.collapsible = Some(collapsible);
  }

  pub fn with_collapsible(mut self, collapsible: bool) -> DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {
    self.collapsible = Some(collapsible);
    self
  }

  pub fn collapsible(&self) -> Option<&bool> {
    self.collapsible.as_ref()
  }

  pub fn reset_collapsible(&mut self) {
    self.collapsible = None;
  }

  pub fn set_inventory_bucket_hash(&mut self, inventory_bucket_hash: i32) {
    self.inventory_bucket_hash = Some(inventory_bucket_hash);
  }

  pub fn with_inventory_bucket_hash(mut self, inventory_bucket_hash: i32) -> DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {
    self.inventory_bucket_hash = Some(inventory_bucket_hash);
    self
  }

  pub fn inventory_bucket_hash(&self) -> Option<&i32> {
    self.inventory_bucket_hash.as_ref()
  }

  pub fn reset_inventory_bucket_hash(&mut self) {
    self.inventory_bucket_hash = None;
  }

  pub fn set_sort_items_by(&mut self, sort_items_by: i32) {
    self.sort_items_by = Some(sort_items_by);
  }

  pub fn with_sort_items_by(mut self, sort_items_by: i32) -> DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {
    self.sort_items_by = Some(sort_items_by);
    self
  }

  pub fn sort_items_by(&self) -> Option<&i32> {
    self.sort_items_by.as_ref()
  }

  pub fn reset_sort_items_by(&mut self) {
    self.sort_items_by = None;
  }

}



