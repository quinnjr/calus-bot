/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsReportingDestinyReportReasonDefinition : A specific reason for being banned. Only accessible under the related category (DestinyReportReasonCategoryDefinition) under which it is shown. Note that this means that report reasons' reasonHash are not globally unique: and indeed, entries like \"Other\" are defined under most categories for example.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsReportingDestinyReportReasonDefinition {
  /// The identifier for the reason: they are only guaranteed unique under the Category in which they are found.
  #[serde(rename = "reasonHash")]
  reason_hash: Option<i32>,
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>
}

impl DestinyDefinitionsReportingDestinyReportReasonDefinition {
  /// A specific reason for being banned. Only accessible under the related category (DestinyReportReasonCategoryDefinition) under which it is shown. Note that this means that report reasons' reasonHash are not globally unique: and indeed, entries like \"Other\" are defined under most categories for example.
  pub fn new() -> DestinyDefinitionsReportingDestinyReportReasonDefinition {
    DestinyDefinitionsReportingDestinyReportReasonDefinition {
      reason_hash: None,
      display_properties: None
    }
  }

  pub fn set_reason_hash(&mut self, reason_hash: i32) {
    self.reason_hash = Some(reason_hash);
  }

  pub fn with_reason_hash(mut self, reason_hash: i32) -> DestinyDefinitionsReportingDestinyReportReasonDefinition {
    self.reason_hash = Some(reason_hash);
    self
  }

  pub fn reason_hash(&self) -> Option<&i32> {
    self.reason_hash.as_ref()
  }

  pub fn reset_reason_hash(&mut self) {
    self.reason_hash = None;
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsReportingDestinyReportReasonDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

}



