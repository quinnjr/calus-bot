/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDirectorDestinyLinkedGraphDefinition : This describes links between the current graph and others, as well as when that link is relevant.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "unlockExpression")]
  unlock_expression: Option<::models::DestinyDefinitionsDestinyUnlockExpressionDefinition>,
  #[serde(rename = "linkedGraphId")]
  linked_graph_id: Option<i32>,
  #[serde(rename = "linkedGraphs")]
  linked_graphs: Option<Vec<::models::DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition>>,
  #[serde(rename = "overview")]
  overview: Option<String>
}

impl DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
  /// This describes links between the current graph and others, as well as when that link is relevant.
  pub fn new() -> DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
    DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
      description: None,
      name: None,
      unlock_expression: None,
      linked_graph_id: None,
      linked_graphs: None,
      overview: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_unlock_expression(&mut self, unlock_expression: ::models::DestinyDefinitionsDestinyUnlockExpressionDefinition) {
    self.unlock_expression = Some(unlock_expression);
  }

  pub fn with_unlock_expression(mut self, unlock_expression: ::models::DestinyDefinitionsDestinyUnlockExpressionDefinition) -> DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
    self.unlock_expression = Some(unlock_expression);
    self
  }

  pub fn unlock_expression(&self) -> Option<&::models::DestinyDefinitionsDestinyUnlockExpressionDefinition> {
    self.unlock_expression.as_ref()
  }

  pub fn reset_unlock_expression(&mut self) {
    self.unlock_expression = None;
  }

  pub fn set_linked_graph_id(&mut self, linked_graph_id: i32) {
    self.linked_graph_id = Some(linked_graph_id);
  }

  pub fn with_linked_graph_id(mut self, linked_graph_id: i32) -> DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
    self.linked_graph_id = Some(linked_graph_id);
    self
  }

  pub fn linked_graph_id(&self) -> Option<&i32> {
    self.linked_graph_id.as_ref()
  }

  pub fn reset_linked_graph_id(&mut self) {
    self.linked_graph_id = None;
  }

  pub fn set_linked_graphs(&mut self, linked_graphs: Vec<::models::DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition>) {
    self.linked_graphs = Some(linked_graphs);
  }

  pub fn with_linked_graphs(mut self, linked_graphs: Vec<::models::DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition>) -> DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
    self.linked_graphs = Some(linked_graphs);
    self
  }

  pub fn linked_graphs(&self) -> Option<&Vec<::models::DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition>> {
    self.linked_graphs.as_ref()
  }

  pub fn reset_linked_graphs(&mut self) {
    self.linked_graphs = None;
  }

  pub fn set_overview(&mut self, overview: String) {
    self.overview = Some(overview);
  }

  pub fn with_overview(mut self, overview: String) -> DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
    self.overview = Some(overview);
    self
  }

  pub fn overview(&self) -> Option<&String> {
    self.overview.as_ref()
  }

  pub fn reset_overview(&mut self) {
    self.overview = None;
  }

}



