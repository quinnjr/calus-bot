/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyEntitySearchResultItem : An individual Destiny Entity returned from the entity search.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyEntitySearchResultItem {
  /// The hash identifier of the entity. You will use this to look up the DestinyDefinition relevant for the entity found.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The type of entity, returned as a string matching the DestinyDefinition's contract class name. You'll have to have your own mapping from class names to actually looking up those definitions in the manifest databases.
  #[serde(rename = "entityType")]
  entity_type: Option<String>,
  /// Basic display properties on the entity, so you don't have to look up the definition to show basic results for the item.
  #[serde(rename = "displayProperties")]
  display_properties: Option<Value>,
  /// The ranking value for sorting that we calculated using our relevance formula. This will hopefully get better with time and iteration.
  #[serde(rename = "weight")]
  weight: Option<f64>
}

impl DestinyDefinitionsDestinyEntitySearchResultItem {
  /// An individual Destiny Entity returned from the entity search.
  pub fn new() -> DestinyDefinitionsDestinyEntitySearchResultItem {
    DestinyDefinitionsDestinyEntitySearchResultItem {
      hash: None,
      entity_type: None,
      display_properties: None,
      weight: None
    }
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyEntitySearchResultItem {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_entity_type(&mut self, entity_type: String) {
    self.entity_type = Some(entity_type);
  }

  pub fn with_entity_type(mut self, entity_type: String) -> DestinyDefinitionsDestinyEntitySearchResultItem {
    self.entity_type = Some(entity_type);
    self
  }

  pub fn entity_type(&self) -> Option<&String> {
    self.entity_type.as_ref()
  }

  pub fn reset_entity_type(&mut self) {
    self.entity_type = None;
  }

  pub fn set_display_properties(&mut self, display_properties: Value) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: Value) -> DestinyDefinitionsDestinyEntitySearchResultItem {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&Value> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_weight(&mut self, weight: f64) {
    self.weight = Some(weight);
  }

  pub fn with_weight(mut self, weight: f64) -> DestinyDefinitionsDestinyEntitySearchResultItem {
    self.weight = Some(weight);
    self
  }

  pub fn weight(&self) -> Option<&f64> {
    self.weight.as_ref()
  }

  pub fn reset_weight(&mut self) {
    self.weight = None;
  }

}



