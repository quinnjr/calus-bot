/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyArtifactsDestinyArtifactCharacterScoped {
  #[serde(rename = "artifactHash")]
  artifact_hash: Option<i32>,
  #[serde(rename = "pointsUsed")]
  points_used: Option<i32>,
  #[serde(rename = "resetCount")]
  reset_count: Option<i32>,
  #[serde(rename = "tiers")]
  tiers: Option<Vec<::models::DestinyArtifactsDestinyArtifactTier>>
}

impl DestinyArtifactsDestinyArtifactCharacterScoped {
  pub fn new() -> DestinyArtifactsDestinyArtifactCharacterScoped {
    DestinyArtifactsDestinyArtifactCharacterScoped {
      artifact_hash: None,
      points_used: None,
      reset_count: None,
      tiers: None
    }
  }

  pub fn set_artifact_hash(&mut self, artifact_hash: i32) {
    self.artifact_hash = Some(artifact_hash);
  }

  pub fn with_artifact_hash(mut self, artifact_hash: i32) -> DestinyArtifactsDestinyArtifactCharacterScoped {
    self.artifact_hash = Some(artifact_hash);
    self
  }

  pub fn artifact_hash(&self) -> Option<&i32> {
    self.artifact_hash.as_ref()
  }

  pub fn reset_artifact_hash(&mut self) {
    self.artifact_hash = None;
  }

  pub fn set_points_used(&mut self, points_used: i32) {
    self.points_used = Some(points_used);
  }

  pub fn with_points_used(mut self, points_used: i32) -> DestinyArtifactsDestinyArtifactCharacterScoped {
    self.points_used = Some(points_used);
    self
  }

  pub fn points_used(&self) -> Option<&i32> {
    self.points_used.as_ref()
  }

  pub fn reset_points_used(&mut self) {
    self.points_used = None;
  }

  pub fn set_reset_count(&mut self, reset_count: i32) {
    self.reset_count = Some(reset_count);
  }

  pub fn with_reset_count(mut self, reset_count: i32) -> DestinyArtifactsDestinyArtifactCharacterScoped {
    self.reset_count = Some(reset_count);
    self
  }

  pub fn reset_count(&self) -> Option<&i32> {
    self.reset_count.as_ref()
  }

  pub fn reset_reset_count(&mut self) {
    self.reset_count = None;
  }

  pub fn set_tiers(&mut self, tiers: Vec<::models::DestinyArtifactsDestinyArtifactTier>) {
    self.tiers = Some(tiers);
  }

  pub fn with_tiers(mut self, tiers: Vec<::models::DestinyArtifactsDestinyArtifactTier>) -> DestinyArtifactsDestinyArtifactCharacterScoped {
    self.tiers = Some(tiers);
    self
  }

  pub fn tiers(&self) -> Option<&Vec<::models::DestinyArtifactsDestinyArtifactTier>> {
    self.tiers.as_ref()
  }

  pub fn reset_tiers(&mut self) {
    self.tiers = None;
  }

}



