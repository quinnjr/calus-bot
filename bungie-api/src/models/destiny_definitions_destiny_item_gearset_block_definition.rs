/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemGearsetBlockDefinition : If an item has a related gearset, this is the list of items in that set, and an unlock expression that evaluates to a number representing the progress toward gearset completion (a very rare use for unlock expressions!)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemGearsetBlockDefinition {
  /// The maximum possible number of items that can be collected.
  #[serde(rename = "trackingValueMax")]
  tracking_value_max: Option<i32>,
  /// The list of hashes for items in the gearset. Use them to look up DestinyInventoryItemDefinition entries for the items in the set.
  #[serde(rename = "itemList")]
  item_list: Option<Vec<i32>>
}

impl DestinyDefinitionsDestinyItemGearsetBlockDefinition {
  /// If an item has a related gearset, this is the list of items in that set, and an unlock expression that evaluates to a number representing the progress toward gearset completion (a very rare use for unlock expressions!)
  pub fn new() -> DestinyDefinitionsDestinyItemGearsetBlockDefinition {
    DestinyDefinitionsDestinyItemGearsetBlockDefinition {
      tracking_value_max: None,
      item_list: None
    }
  }

  pub fn set_tracking_value_max(&mut self, tracking_value_max: i32) {
    self.tracking_value_max = Some(tracking_value_max);
  }

  pub fn with_tracking_value_max(mut self, tracking_value_max: i32) -> DestinyDefinitionsDestinyItemGearsetBlockDefinition {
    self.tracking_value_max = Some(tracking_value_max);
    self
  }

  pub fn tracking_value_max(&self) -> Option<&i32> {
    self.tracking_value_max.as_ref()
  }

  pub fn reset_tracking_value_max(&mut self) {
    self.tracking_value_max = None;
  }

  pub fn set_item_list(&mut self, item_list: Vec<i32>) {
    self.item_list = Some(item_list);
  }

  pub fn with_item_list(mut self, item_list: Vec<i32>) -> DestinyDefinitionsDestinyItemGearsetBlockDefinition {
    self.item_list = Some(item_list);
    self
  }

  pub fn item_list(&self) -> Option<&Vec<i32>> {
    self.item_list.as_ref()
  }

  pub fn reset_item_list(&mut self) {
    self.item_list = None;
  }

}



