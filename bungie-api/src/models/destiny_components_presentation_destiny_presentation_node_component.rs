/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyComponentsPresentationDestinyPresentationNodeComponent {
  #[serde(rename = "state")]
  state: Option<i32>,
  /// An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.
  #[serde(rename = "objective")]
  objective: Option<Value>,
  /// How much of the presentation node is considered to be completed so far by the given character/profile.
  #[serde(rename = "progressValue")]
  progress_value: Option<i32>,
  /// The value at which the presentation node is considered to be completed.
  #[serde(rename = "completionValue")]
  completion_value: Option<i32>
}

impl DestinyComponentsPresentationDestinyPresentationNodeComponent {
  pub fn new() -> DestinyComponentsPresentationDestinyPresentationNodeComponent {
    DestinyComponentsPresentationDestinyPresentationNodeComponent {
      state: None,
      objective: None,
      progress_value: None,
      completion_value: None
    }
  }

  pub fn set_state(&mut self, state: i32) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: i32) -> DestinyComponentsPresentationDestinyPresentationNodeComponent {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&i32> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_objective(&mut self, objective: Value) {
    self.objective = Some(objective);
  }

  pub fn with_objective(mut self, objective: Value) -> DestinyComponentsPresentationDestinyPresentationNodeComponent {
    self.objective = Some(objective);
    self
  }

  pub fn objective(&self) -> Option<&Value> {
    self.objective.as_ref()
  }

  pub fn reset_objective(&mut self) {
    self.objective = None;
  }

  pub fn set_progress_value(&mut self, progress_value: i32) {
    self.progress_value = Some(progress_value);
  }

  pub fn with_progress_value(mut self, progress_value: i32) -> DestinyComponentsPresentationDestinyPresentationNodeComponent {
    self.progress_value = Some(progress_value);
    self
  }

  pub fn progress_value(&self) -> Option<&i32> {
    self.progress_value.as_ref()
  }

  pub fn reset_progress_value(&mut self) {
    self.progress_value = None;
  }

  pub fn set_completion_value(&mut self, completion_value: i32) {
    self.completion_value = Some(completion_value);
  }

  pub fn with_completion_value(mut self, completion_value: i32) -> DestinyComponentsPresentationDestinyPresentationNodeComponent {
    self.completion_value = Some(completion_value);
    self
  }

  pub fn completion_value(&self) -> Option<&i32> {
    self.completion_value.as_ref()
  }

  pub fn reset_completion_value(&mut self) {
    self.completion_value = None;
  }

}



