/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentContentRepresentation {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "path")]
  path: Option<String>,
  #[serde(rename = "validationString")]
  validation_string: Option<String>
}

impl ContentContentRepresentation {
  pub fn new() -> ContentContentRepresentation {
    ContentContentRepresentation {
      name: None,
      path: None,
      validation_string: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ContentContentRepresentation {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> ContentContentRepresentation {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_validation_string(&mut self, validation_string: String) {
    self.validation_string = Some(validation_string);
  }

  pub fn with_validation_string(mut self, validation_string: String) -> ContentContentRepresentation {
    self.validation_string = Some(validation_string);
    self
  }

  pub fn validation_string(&self) -> Option<&String> {
    self.validation_string.as_ref()
  }

  pub fn reset_validation_string(&mut self) {
    self.validation_string = None;
  }

}



