/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsAnimationsDestinyAnimationReference {
  #[serde(rename = "animName")]
  anim_name: Option<String>,
  #[serde(rename = "animIdentifier")]
  anim_identifier: Option<String>,
  #[serde(rename = "path")]
  path: Option<String>
}

impl DestinyDefinitionsAnimationsDestinyAnimationReference {
  pub fn new() -> DestinyDefinitionsAnimationsDestinyAnimationReference {
    DestinyDefinitionsAnimationsDestinyAnimationReference {
      anim_name: None,
      anim_identifier: None,
      path: None
    }
  }

  pub fn set_anim_name(&mut self, anim_name: String) {
    self.anim_name = Some(anim_name);
  }

  pub fn with_anim_name(mut self, anim_name: String) -> DestinyDefinitionsAnimationsDestinyAnimationReference {
    self.anim_name = Some(anim_name);
    self
  }

  pub fn anim_name(&self) -> Option<&String> {
    self.anim_name.as_ref()
  }

  pub fn reset_anim_name(&mut self) {
    self.anim_name = None;
  }

  pub fn set_anim_identifier(&mut self, anim_identifier: String) {
    self.anim_identifier = Some(anim_identifier);
  }

  pub fn with_anim_identifier(mut self, anim_identifier: String) -> DestinyDefinitionsAnimationsDestinyAnimationReference {
    self.anim_identifier = Some(anim_identifier);
    self
  }

  pub fn anim_identifier(&self) -> Option<&String> {
    self.anim_identifier.as_ref()
  }

  pub fn reset_anim_identifier(&mut self) {
    self.anim_identifier = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> DestinyDefinitionsAnimationsDestinyAnimationReference {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

}



