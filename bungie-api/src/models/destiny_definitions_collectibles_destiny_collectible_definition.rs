/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsCollectiblesDestinyCollectibleDefinition : Defines a

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// Indicates whether this Collectible's state is determined on a per-character or on an account-wide basis.
  #[serde(rename = "scope")]
  scope: Option<i32>,
  /// A human readable string for a hint about how to acquire the item.
  #[serde(rename = "sourceString")]
  source_string: Option<String>,
  /// This is a hash identifier we are building on the BNet side in an attempt to let people group collectibles by similar sources.  I can't promise that it's going to be 100% accurate, but if the designers were consistent in assigning the same source strings to items with the same sources, it *ought to* be. No promises though.  This hash also doesn't relate to an actual definition, just to note: we've got nothing useful other than the source string for this data.
  #[serde(rename = "sourceHash")]
  source_hash: Option<i32>,
  #[serde(rename = "itemHash")]
  item_hash: Option<i32>,
  #[serde(rename = "acquisitionInfo")]
  acquisition_info: Option<::models::DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock>,
  #[serde(rename = "stateInfo")]
  state_info: Option<::models::DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock>,
  #[serde(rename = "presentationInfo")]
  presentation_info: Option<::models::DestinyDefinitionsPresentationDestinyPresentationChildBlock>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
  /// Defines a
  pub fn new() -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
      display_properties: None,
      scope: None,
      source_string: None,
      source_hash: None,
      item_hash: None,
      acquisition_info: None,
      state_info: None,
      presentation_info: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_scope(&mut self, scope: i32) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: i32) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&i32> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

  pub fn set_source_string(&mut self, source_string: String) {
    self.source_string = Some(source_string);
  }

  pub fn with_source_string(mut self, source_string: String) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.source_string = Some(source_string);
    self
  }

  pub fn source_string(&self) -> Option<&String> {
    self.source_string.as_ref()
  }

  pub fn reset_source_string(&mut self) {
    self.source_string = None;
  }

  pub fn set_source_hash(&mut self, source_hash: i32) {
    self.source_hash = Some(source_hash);
  }

  pub fn with_source_hash(mut self, source_hash: i32) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.source_hash = Some(source_hash);
    self
  }

  pub fn source_hash(&self) -> Option<&i32> {
    self.source_hash.as_ref()
  }

  pub fn reset_source_hash(&mut self) {
    self.source_hash = None;
  }

  pub fn set_item_hash(&mut self, item_hash: i32) {
    self.item_hash = Some(item_hash);
  }

  pub fn with_item_hash(mut self, item_hash: i32) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.item_hash = Some(item_hash);
    self
  }

  pub fn item_hash(&self) -> Option<&i32> {
    self.item_hash.as_ref()
  }

  pub fn reset_item_hash(&mut self) {
    self.item_hash = None;
  }

  pub fn set_acquisition_info(&mut self, acquisition_info: ::models::DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock) {
    self.acquisition_info = Some(acquisition_info);
  }

  pub fn with_acquisition_info(mut self, acquisition_info: ::models::DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.acquisition_info = Some(acquisition_info);
    self
  }

  pub fn acquisition_info(&self) -> Option<&::models::DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock> {
    self.acquisition_info.as_ref()
  }

  pub fn reset_acquisition_info(&mut self) {
    self.acquisition_info = None;
  }

  pub fn set_state_info(&mut self, state_info: ::models::DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock) {
    self.state_info = Some(state_info);
  }

  pub fn with_state_info(mut self, state_info: ::models::DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.state_info = Some(state_info);
    self
  }

  pub fn state_info(&self) -> Option<&::models::DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock> {
    self.state_info.as_ref()
  }

  pub fn reset_state_info(&mut self) {
    self.state_info = None;
  }

  pub fn set_presentation_info(&mut self, presentation_info: ::models::DestinyDefinitionsPresentationDestinyPresentationChildBlock) {
    self.presentation_info = Some(presentation_info);
  }

  pub fn with_presentation_info(mut self, presentation_info: ::models::DestinyDefinitionsPresentationDestinyPresentationChildBlock) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.presentation_info = Some(presentation_info);
    self
  }

  pub fn presentation_info(&self) -> Option<&::models::DestinyDefinitionsPresentationDestinyPresentationChildBlock> {
    self.presentation_info.as_ref()
  }

  pub fn reset_presentation_info(&mut self) {
    self.presentation_info = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



