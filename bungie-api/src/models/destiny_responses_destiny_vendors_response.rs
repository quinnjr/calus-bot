/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyVendorsResponse : A response containing all of the components for all requested vendors.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyVendorsResponse {
  /// For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.  COMPONENT TYPE: Vendors
  #[serde(rename = "vendorGroups")]
  vendor_groups: Option<Value>,
  /// The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.  COMPONENT TYPE: Vendors
  #[serde(rename = "vendors")]
  vendors: Option<Value>,
  /// Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.  COMPONENT TYPE: VendorCategories
  #[serde(rename = "categories")]
  categories: Option<Value>,
  /// Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.  Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.  COMPONENT TYPE: VendorSales
  #[serde(rename = "sales")]
  sales: Option<Value>,
  /// The set of item detail components, one set of item components per Vendor. These are keyed by the Vendor Hash, so you will get one Item Component Set per vendor returned.  The components contained inside are themselves keyed by the vendorSaleIndex, and will have whatever item-level components you requested (Sockets, Stats, Instance data etc...) per item being sold by the vendor.
  #[serde(rename = "itemComponents")]
  item_components: Option<::std::collections::HashMap<String, ::models::DestinyItemComponentSetOfint32>>,
  /// A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
  #[serde(rename = "currencyLookups")]
  currency_lookups: Option<Value>
}

impl DestinyResponsesDestinyVendorsResponse {
  /// A response containing all of the components for all requested vendors.
  pub fn new() -> DestinyResponsesDestinyVendorsResponse {
    DestinyResponsesDestinyVendorsResponse {
      vendor_groups: None,
      vendors: None,
      categories: None,
      sales: None,
      item_components: None,
      currency_lookups: None
    }
  }

  pub fn set_vendor_groups(&mut self, vendor_groups: Value) {
    self.vendor_groups = Some(vendor_groups);
  }

  pub fn with_vendor_groups(mut self, vendor_groups: Value) -> DestinyResponsesDestinyVendorsResponse {
    self.vendor_groups = Some(vendor_groups);
    self
  }

  pub fn vendor_groups(&self) -> Option<&Value> {
    self.vendor_groups.as_ref()
  }

  pub fn reset_vendor_groups(&mut self) {
    self.vendor_groups = None;
  }

  pub fn set_vendors(&mut self, vendors: Value) {
    self.vendors = Some(vendors);
  }

  pub fn with_vendors(mut self, vendors: Value) -> DestinyResponsesDestinyVendorsResponse {
    self.vendors = Some(vendors);
    self
  }

  pub fn vendors(&self) -> Option<&Value> {
    self.vendors.as_ref()
  }

  pub fn reset_vendors(&mut self) {
    self.vendors = None;
  }

  pub fn set_categories(&mut self, categories: Value) {
    self.categories = Some(categories);
  }

  pub fn with_categories(mut self, categories: Value) -> DestinyResponsesDestinyVendorsResponse {
    self.categories = Some(categories);
    self
  }

  pub fn categories(&self) -> Option<&Value> {
    self.categories.as_ref()
  }

  pub fn reset_categories(&mut self) {
    self.categories = None;
  }

  pub fn set_sales(&mut self, sales: Value) {
    self.sales = Some(sales);
  }

  pub fn with_sales(mut self, sales: Value) -> DestinyResponsesDestinyVendorsResponse {
    self.sales = Some(sales);
    self
  }

  pub fn sales(&self) -> Option<&Value> {
    self.sales.as_ref()
  }

  pub fn reset_sales(&mut self) {
    self.sales = None;
  }

  pub fn set_item_components(&mut self, item_components: ::std::collections::HashMap<String, ::models::DestinyItemComponentSetOfint32>) {
    self.item_components = Some(item_components);
  }

  pub fn with_item_components(mut self, item_components: ::std::collections::HashMap<String, ::models::DestinyItemComponentSetOfint32>) -> DestinyResponsesDestinyVendorsResponse {
    self.item_components = Some(item_components);
    self
  }

  pub fn item_components(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyItemComponentSetOfint32>> {
    self.item_components.as_ref()
  }

  pub fn reset_item_components(&mut self) {
    self.item_components = None;
  }

  pub fn set_currency_lookups(&mut self, currency_lookups: Value) {
    self.currency_lookups = Some(currency_lookups);
  }

  pub fn with_currency_lookups(mut self, currency_lookups: Value) -> DestinyResponsesDestinyVendorsResponse {
    self.currency_lookups = Some(currency_lookups);
    self
  }

  pub fn currency_lookups(&self) -> Option<&Value> {
    self.currency_lookups.as_ref()
  }

  pub fn reset_currency_lookups(&mut self) {
    self.currency_lookups = None;
  }

}



