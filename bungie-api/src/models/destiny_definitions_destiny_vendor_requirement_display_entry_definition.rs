/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition : The localized properties of the requirementsDisplay, allowing information about the requirement or item being featured to be seen.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
  #[serde(rename = "icon")]
  icon: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "source")]
  source: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>
}

impl DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
  /// The localized properties of the requirementsDisplay, allowing information about the requirement or item being featured to be seen.
  pub fn new() -> DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
    DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
      icon: None,
      name: None,
      source: None,
      _type: None
    }
  }

  pub fn set_icon(&mut self, icon: String) {
    self.icon = Some(icon);
  }

  pub fn with_icon(mut self, icon: String) -> DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
    self.icon = Some(icon);
    self
  }

  pub fn icon(&self) -> Option<&String> {
    self.icon.as_ref()
  }

  pub fn reset_icon(&mut self) {
    self.icon = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_source(&mut self, source: String) {
    self.source = Some(source);
  }

  pub fn with_source(mut self, source: String) -> DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
    self.source = Some(source);
    self
  }

  pub fn source(&self) -> Option<&String> {
    self.source.as_ref()
  }

  pub fn reset_source(&mut self) {
    self.source = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



