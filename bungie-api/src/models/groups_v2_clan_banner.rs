/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2ClanBanner {
  #[serde(rename = "decalId")]
  decal_id: Option<i32>,
  #[serde(rename = "decalColorId")]
  decal_color_id: Option<i32>,
  #[serde(rename = "decalBackgroundColorId")]
  decal_background_color_id: Option<i32>,
  #[serde(rename = "gonfalonId")]
  gonfalon_id: Option<i32>,
  #[serde(rename = "gonfalonColorId")]
  gonfalon_color_id: Option<i32>,
  #[serde(rename = "gonfalonDetailId")]
  gonfalon_detail_id: Option<i32>,
  #[serde(rename = "gonfalonDetailColorId")]
  gonfalon_detail_color_id: Option<i32>
}

impl GroupsV2ClanBanner {
  pub fn new() -> GroupsV2ClanBanner {
    GroupsV2ClanBanner {
      decal_id: None,
      decal_color_id: None,
      decal_background_color_id: None,
      gonfalon_id: None,
      gonfalon_color_id: None,
      gonfalon_detail_id: None,
      gonfalon_detail_color_id: None
    }
  }

  pub fn set_decal_id(&mut self, decal_id: i32) {
    self.decal_id = Some(decal_id);
  }

  pub fn with_decal_id(mut self, decal_id: i32) -> GroupsV2ClanBanner {
    self.decal_id = Some(decal_id);
    self
  }

  pub fn decal_id(&self) -> Option<&i32> {
    self.decal_id.as_ref()
  }

  pub fn reset_decal_id(&mut self) {
    self.decal_id = None;
  }

  pub fn set_decal_color_id(&mut self, decal_color_id: i32) {
    self.decal_color_id = Some(decal_color_id);
  }

  pub fn with_decal_color_id(mut self, decal_color_id: i32) -> GroupsV2ClanBanner {
    self.decal_color_id = Some(decal_color_id);
    self
  }

  pub fn decal_color_id(&self) -> Option<&i32> {
    self.decal_color_id.as_ref()
  }

  pub fn reset_decal_color_id(&mut self) {
    self.decal_color_id = None;
  }

  pub fn set_decal_background_color_id(&mut self, decal_background_color_id: i32) {
    self.decal_background_color_id = Some(decal_background_color_id);
  }

  pub fn with_decal_background_color_id(mut self, decal_background_color_id: i32) -> GroupsV2ClanBanner {
    self.decal_background_color_id = Some(decal_background_color_id);
    self
  }

  pub fn decal_background_color_id(&self) -> Option<&i32> {
    self.decal_background_color_id.as_ref()
  }

  pub fn reset_decal_background_color_id(&mut self) {
    self.decal_background_color_id = None;
  }

  pub fn set_gonfalon_id(&mut self, gonfalon_id: i32) {
    self.gonfalon_id = Some(gonfalon_id);
  }

  pub fn with_gonfalon_id(mut self, gonfalon_id: i32) -> GroupsV2ClanBanner {
    self.gonfalon_id = Some(gonfalon_id);
    self
  }

  pub fn gonfalon_id(&self) -> Option<&i32> {
    self.gonfalon_id.as_ref()
  }

  pub fn reset_gonfalon_id(&mut self) {
    self.gonfalon_id = None;
  }

  pub fn set_gonfalon_color_id(&mut self, gonfalon_color_id: i32) {
    self.gonfalon_color_id = Some(gonfalon_color_id);
  }

  pub fn with_gonfalon_color_id(mut self, gonfalon_color_id: i32) -> GroupsV2ClanBanner {
    self.gonfalon_color_id = Some(gonfalon_color_id);
    self
  }

  pub fn gonfalon_color_id(&self) -> Option<&i32> {
    self.gonfalon_color_id.as_ref()
  }

  pub fn reset_gonfalon_color_id(&mut self) {
    self.gonfalon_color_id = None;
  }

  pub fn set_gonfalon_detail_id(&mut self, gonfalon_detail_id: i32) {
    self.gonfalon_detail_id = Some(gonfalon_detail_id);
  }

  pub fn with_gonfalon_detail_id(mut self, gonfalon_detail_id: i32) -> GroupsV2ClanBanner {
    self.gonfalon_detail_id = Some(gonfalon_detail_id);
    self
  }

  pub fn gonfalon_detail_id(&self) -> Option<&i32> {
    self.gonfalon_detail_id.as_ref()
  }

  pub fn reset_gonfalon_detail_id(&mut self) {
    self.gonfalon_detail_id = None;
  }

  pub fn set_gonfalon_detail_color_id(&mut self, gonfalon_detail_color_id: i32) {
    self.gonfalon_detail_color_id = Some(gonfalon_detail_color_id);
  }

  pub fn with_gonfalon_detail_color_id(mut self, gonfalon_detail_color_id: i32) -> GroupsV2ClanBanner {
    self.gonfalon_detail_color_id = Some(gonfalon_detail_color_id);
    self
  }

  pub fn gonfalon_detail_color_id(&self) -> Option<&i32> {
    self.gonfalon_detail_color_id.as_ref()
  }

  pub fn reset_gonfalon_detail_color_id(&mut self) {
    self.gonfalon_detail_color_id = None;
  }

}



