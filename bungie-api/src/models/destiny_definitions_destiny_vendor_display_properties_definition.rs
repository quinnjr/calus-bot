/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
  /// I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.
  #[serde(rename = "largeIcon")]
  large_icon: Option<String>,
  #[serde(rename = "subtitle")]
  subtitle: Option<String>,
  /// If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.
  #[serde(rename = "originalIcon")]
  original_icon: Option<String>,
  /// Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.
  #[serde(rename = "requirementsDisplay")]
  requirements_display: Option<Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>>,
  /// This is the icon used in parts of the game UI such as the vendor's waypoint.
  #[serde(rename = "smallTransparentIcon")]
  small_transparent_icon: Option<String>,
  /// This is the icon used in the map overview, when the vendor is located on the map.
  #[serde(rename = "mapIcon")]
  map_icon: Option<String>,
  /// This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.
  #[serde(rename = "largeTransparentIcon")]
  large_transparent_icon: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  /// Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.
  #[serde(rename = "icon")]
  icon: Option<String>,
  /// If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.
  #[serde(rename = "highResIcon")]
  high_res_icon: Option<String>,
  #[serde(rename = "hasIcon")]
  has_icon: Option<bool>
}

impl DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
  pub fn new() -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
      large_icon: None,
      subtitle: None,
      original_icon: None,
      requirements_display: None,
      small_transparent_icon: None,
      map_icon: None,
      large_transparent_icon: None,
      description: None,
      name: None,
      icon: None,
      high_res_icon: None,
      has_icon: None
    }
  }

  pub fn set_large_icon(&mut self, large_icon: String) {
    self.large_icon = Some(large_icon);
  }

  pub fn with_large_icon(mut self, large_icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.large_icon = Some(large_icon);
    self
  }

  pub fn large_icon(&self) -> Option<&String> {
    self.large_icon.as_ref()
  }

  pub fn reset_large_icon(&mut self) {
    self.large_icon = None;
  }

  pub fn set_subtitle(&mut self, subtitle: String) {
    self.subtitle = Some(subtitle);
  }

  pub fn with_subtitle(mut self, subtitle: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.subtitle = Some(subtitle);
    self
  }

  pub fn subtitle(&self) -> Option<&String> {
    self.subtitle.as_ref()
  }

  pub fn reset_subtitle(&mut self) {
    self.subtitle = None;
  }

  pub fn set_original_icon(&mut self, original_icon: String) {
    self.original_icon = Some(original_icon);
  }

  pub fn with_original_icon(mut self, original_icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.original_icon = Some(original_icon);
    self
  }

  pub fn original_icon(&self) -> Option<&String> {
    self.original_icon.as_ref()
  }

  pub fn reset_original_icon(&mut self) {
    self.original_icon = None;
  }

  pub fn set_requirements_display(&mut self, requirements_display: Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>) {
    self.requirements_display = Some(requirements_display);
  }

  pub fn with_requirements_display(mut self, requirements_display: Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.requirements_display = Some(requirements_display);
    self
  }

  pub fn requirements_display(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>> {
    self.requirements_display.as_ref()
  }

  pub fn reset_requirements_display(&mut self) {
    self.requirements_display = None;
  }

  pub fn set_small_transparent_icon(&mut self, small_transparent_icon: String) {
    self.small_transparent_icon = Some(small_transparent_icon);
  }

  pub fn with_small_transparent_icon(mut self, small_transparent_icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.small_transparent_icon = Some(small_transparent_icon);
    self
  }

  pub fn small_transparent_icon(&self) -> Option<&String> {
    self.small_transparent_icon.as_ref()
  }

  pub fn reset_small_transparent_icon(&mut self) {
    self.small_transparent_icon = None;
  }

  pub fn set_map_icon(&mut self, map_icon: String) {
    self.map_icon = Some(map_icon);
  }

  pub fn with_map_icon(mut self, map_icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.map_icon = Some(map_icon);
    self
  }

  pub fn map_icon(&self) -> Option<&String> {
    self.map_icon.as_ref()
  }

  pub fn reset_map_icon(&mut self) {
    self.map_icon = None;
  }

  pub fn set_large_transparent_icon(&mut self, large_transparent_icon: String) {
    self.large_transparent_icon = Some(large_transparent_icon);
  }

  pub fn with_large_transparent_icon(mut self, large_transparent_icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.large_transparent_icon = Some(large_transparent_icon);
    self
  }

  pub fn large_transparent_icon(&self) -> Option<&String> {
    self.large_transparent_icon.as_ref()
  }

  pub fn reset_large_transparent_icon(&mut self) {
    self.large_transparent_icon = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_icon(&mut self, icon: String) {
    self.icon = Some(icon);
  }

  pub fn with_icon(mut self, icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.icon = Some(icon);
    self
  }

  pub fn icon(&self) -> Option<&String> {
    self.icon.as_ref()
  }

  pub fn reset_icon(&mut self) {
    self.icon = None;
  }

  pub fn set_high_res_icon(&mut self, high_res_icon: String) {
    self.high_res_icon = Some(high_res_icon);
  }

  pub fn with_high_res_icon(mut self, high_res_icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.high_res_icon = Some(high_res_icon);
    self
  }

  pub fn high_res_icon(&self) -> Option<&String> {
    self.high_res_icon.as_ref()
  }

  pub fn reset_high_res_icon(&mut self) {
    self.high_res_icon = None;
  }

  pub fn set_has_icon(&mut self, has_icon: bool) {
    self.has_icon = Some(has_icon);
  }

  pub fn with_has_icon(mut self, has_icon: bool) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.has_icon = Some(has_icon);
    self
  }

  pub fn has_icon(&self) -> Option<&bool> {
    self.has_icon.as_ref()
  }

  pub fn reset_has_icon(&mut self) {
    self.has_icon = None;
  }

}



