/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyPublicMilestoneQuest {
  /// Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.
  #[serde(rename = "questItemHash")]
  quest_item_hash: Option<i32>,
  /// A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.
  #[serde(rename = "activity")]
  activity: Option<Value>,
  /// For the given quest there could be 0-to-Many challenges: mini quests that you can perform in the course of doing this quest, that may grant you rewards and benefits.
  #[serde(rename = "challenges")]
  challenges: Option<Vec<::models::DestinyMilestonesDestinyPublicMilestoneChallenge>>
}

impl DestinyMilestonesDestinyPublicMilestoneQuest {
  pub fn new() -> DestinyMilestonesDestinyPublicMilestoneQuest {
    DestinyMilestonesDestinyPublicMilestoneQuest {
      quest_item_hash: None,
      activity: None,
      challenges: None
    }
  }

  pub fn set_quest_item_hash(&mut self, quest_item_hash: i32) {
    self.quest_item_hash = Some(quest_item_hash);
  }

  pub fn with_quest_item_hash(mut self, quest_item_hash: i32) -> DestinyMilestonesDestinyPublicMilestoneQuest {
    self.quest_item_hash = Some(quest_item_hash);
    self
  }

  pub fn quest_item_hash(&self) -> Option<&i32> {
    self.quest_item_hash.as_ref()
  }

  pub fn reset_quest_item_hash(&mut self) {
    self.quest_item_hash = None;
  }

  pub fn set_activity(&mut self, activity: Value) {
    self.activity = Some(activity);
  }

  pub fn with_activity(mut self, activity: Value) -> DestinyMilestonesDestinyPublicMilestoneQuest {
    self.activity = Some(activity);
    self
  }

  pub fn activity(&self) -> Option<&Value> {
    self.activity.as_ref()
  }

  pub fn reset_activity(&mut self) {
    self.activity = None;
  }

  pub fn set_challenges(&mut self, challenges: Vec<::models::DestinyMilestonesDestinyPublicMilestoneChallenge>) {
    self.challenges = Some(challenges);
  }

  pub fn with_challenges(mut self, challenges: Vec<::models::DestinyMilestonesDestinyPublicMilestoneChallenge>) -> DestinyMilestonesDestinyPublicMilestoneQuest {
    self.challenges = Some(challenges);
    self
  }

  pub fn challenges(&self) -> Option<&Vec<::models::DestinyMilestonesDestinyPublicMilestoneChallenge>> {
    self.challenges.as_ref()
  }

  pub fn reset_challenges(&mut self) {
    self.challenges = None;
  }

}



