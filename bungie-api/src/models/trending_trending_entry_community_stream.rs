/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrendingTrendingEntryCommunityStream {
  #[serde(rename = "image")]
  image: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "partnershipIdentifier")]
  partnership_identifier: Option<String>,
  #[serde(rename = "partnershipType")]
  partnership_type: Option<i32>
}

impl TrendingTrendingEntryCommunityStream {
  pub fn new() -> TrendingTrendingEntryCommunityStream {
    TrendingTrendingEntryCommunityStream {
      image: None,
      title: None,
      partnership_identifier: None,
      partnership_type: None
    }
  }

  pub fn set_image(&mut self, image: String) {
    self.image = Some(image);
  }

  pub fn with_image(mut self, image: String) -> TrendingTrendingEntryCommunityStream {
    self.image = Some(image);
    self
  }

  pub fn image(&self) -> Option<&String> {
    self.image.as_ref()
  }

  pub fn reset_image(&mut self) {
    self.image = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> TrendingTrendingEntryCommunityStream {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_partnership_identifier(&mut self, partnership_identifier: String) {
    self.partnership_identifier = Some(partnership_identifier);
  }

  pub fn with_partnership_identifier(mut self, partnership_identifier: String) -> TrendingTrendingEntryCommunityStream {
    self.partnership_identifier = Some(partnership_identifier);
    self
  }

  pub fn partnership_identifier(&self) -> Option<&String> {
    self.partnership_identifier.as_ref()
  }

  pub fn reset_partnership_identifier(&mut self) {
    self.partnership_identifier = None;
  }

  pub fn set_partnership_type(&mut self, partnership_type: i32) {
    self.partnership_type = Some(partnership_type);
  }

  pub fn with_partnership_type(mut self, partnership_type: i32) -> TrendingTrendingEntryCommunityStream {
    self.partnership_type = Some(partnership_type);
    self
  }

  pub fn partnership_type(&self) -> Option<&i32> {
    self.partnership_type.as_ref()
  }

  pub fn reset_partnership_type(&mut self) {
    self.partnership_type = None;
  }

}



