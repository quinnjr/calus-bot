/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyErrorProfile : If a Destiny Profile can't be returned, but we're pretty certain it's a valid Destiny account, this will contain as much info as we can get about the profile for your use.  Assume that the most you'll get is the Error Code, the Membership Type and the Membership ID.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyErrorProfile {
  /// The error that we encountered. You should be able to look up localized text to show to the user for these failures.
  #[serde(rename = "errorCode")]
  error_code: Option<i32>,
  /// Basic info about the account that failed. Don't expect anything other than membership ID, Membership Type, and displayName to be populated.
  #[serde(rename = "infoCard")]
  info_card: Option<Value>
}

impl DestinyResponsesDestinyErrorProfile {
  /// If a Destiny Profile can't be returned, but we're pretty certain it's a valid Destiny account, this will contain as much info as we can get about the profile for your use.  Assume that the most you'll get is the Error Code, the Membership Type and the Membership ID.
  pub fn new() -> DestinyResponsesDestinyErrorProfile {
    DestinyResponsesDestinyErrorProfile {
      error_code: None,
      info_card: None
    }
  }

  pub fn set_error_code(&mut self, error_code: i32) {
    self.error_code = Some(error_code);
  }

  pub fn with_error_code(mut self, error_code: i32) -> DestinyResponsesDestinyErrorProfile {
    self.error_code = Some(error_code);
    self
  }

  pub fn error_code(&self) -> Option<&i32> {
    self.error_code.as_ref()
  }

  pub fn reset_error_code(&mut self) {
    self.error_code = None;
  }

  pub fn set_info_card(&mut self, info_card: Value) {
    self.info_card = Some(info_card);
  }

  pub fn with_info_card(mut self, info_card: Value) -> DestinyResponsesDestinyErrorProfile {
    self.info_card = Some(info_card);
    self
  }

  pub fn info_card(&self) -> Option<&Value> {
    self.info_card.as_ref()
  }

  pub fn reset_info_card(&mut self) {
    self.info_card = None;
  }

}



