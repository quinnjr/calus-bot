/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserCrossSaveUserMembership : Very basic info about a user as returned by the Account server, but including CrossSave information. Do NOT use as a request contract.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserCrossSaveUserMembership {
  /// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
  #[serde(rename = "crossSaveOverride")]
  cross_save_override: Option<i32>,
  /// The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
  #[serde(rename = "applicableMembershipTypes")]
  applicable_membership_types: Option<Vec<i32>>,
  /// If True, this is a public user membership.
  #[serde(rename = "isPublic")]
  is_public: Option<bool>,
  /// Type of the membership. Not necessarily the native type.
  #[serde(rename = "membershipType")]
  membership_type: Option<i32>,
  /// Membership ID as they user is known in the Accounts service
  #[serde(rename = "membershipId")]
  membership_id: Option<i64>,
  /// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
  #[serde(rename = "displayName")]
  display_name: Option<String>
}

impl UserCrossSaveUserMembership {
  /// Very basic info about a user as returned by the Account server, but including CrossSave information. Do NOT use as a request contract.
  pub fn new() -> UserCrossSaveUserMembership {
    UserCrossSaveUserMembership {
      cross_save_override: None,
      applicable_membership_types: None,
      is_public: None,
      membership_type: None,
      membership_id: None,
      display_name: None
    }
  }

  pub fn set_cross_save_override(&mut self, cross_save_override: i32) {
    self.cross_save_override = Some(cross_save_override);
  }

  pub fn with_cross_save_override(mut self, cross_save_override: i32) -> UserCrossSaveUserMembership {
    self.cross_save_override = Some(cross_save_override);
    self
  }

  pub fn cross_save_override(&self) -> Option<&i32> {
    self.cross_save_override.as_ref()
  }

  pub fn reset_cross_save_override(&mut self) {
    self.cross_save_override = None;
  }

  pub fn set_applicable_membership_types(&mut self, applicable_membership_types: Vec<i32>) {
    self.applicable_membership_types = Some(applicable_membership_types);
  }

  pub fn with_applicable_membership_types(mut self, applicable_membership_types: Vec<i32>) -> UserCrossSaveUserMembership {
    self.applicable_membership_types = Some(applicable_membership_types);
    self
  }

  pub fn applicable_membership_types(&self) -> Option<&Vec<i32>> {
    self.applicable_membership_types.as_ref()
  }

  pub fn reset_applicable_membership_types(&mut self) {
    self.applicable_membership_types = None;
  }

  pub fn set_is_public(&mut self, is_public: bool) {
    self.is_public = Some(is_public);
  }

  pub fn with_is_public(mut self, is_public: bool) -> UserCrossSaveUserMembership {
    self.is_public = Some(is_public);
    self
  }

  pub fn is_public(&self) -> Option<&bool> {
    self.is_public.as_ref()
  }

  pub fn reset_is_public(&mut self) {
    self.is_public = None;
  }

  pub fn set_membership_type(&mut self, membership_type: i32) {
    self.membership_type = Some(membership_type);
  }

  pub fn with_membership_type(mut self, membership_type: i32) -> UserCrossSaveUserMembership {
    self.membership_type = Some(membership_type);
    self
  }

  pub fn membership_type(&self) -> Option<&i32> {
    self.membership_type.as_ref()
  }

  pub fn reset_membership_type(&mut self) {
    self.membership_type = None;
  }

  pub fn set_membership_id(&mut self, membership_id: i64) {
    self.membership_id = Some(membership_id);
  }

  pub fn with_membership_id(mut self, membership_id: i64) -> UserCrossSaveUserMembership {
    self.membership_id = Some(membership_id);
    self
  }

  pub fn membership_id(&self) -> Option<&i64> {
    self.membership_id.as_ref()
  }

  pub fn reset_membership_id(&mut self) {
    self.membership_id = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> UserCrossSaveUserMembership {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

}



