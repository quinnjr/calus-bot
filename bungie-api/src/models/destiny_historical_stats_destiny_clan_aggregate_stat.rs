/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyClanAggregateStat {
  /// The id of the mode of stats (allPvp, allPvE, etc)
  #[serde(rename = "mode")]
  mode: Option<i32>,
  /// The id of the stat
  #[serde(rename = "statId")]
  stat_id: Option<String>,
  /// Value of the stat for this player
  #[serde(rename = "value")]
  value: Option<Value>
}

impl DestinyHistoricalStatsDestinyClanAggregateStat {
  pub fn new() -> DestinyHistoricalStatsDestinyClanAggregateStat {
    DestinyHistoricalStatsDestinyClanAggregateStat {
      mode: None,
      stat_id: None,
      value: None
    }
  }

  pub fn set_mode(&mut self, mode: i32) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: i32) -> DestinyHistoricalStatsDestinyClanAggregateStat {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&i32> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_stat_id(&mut self, stat_id: String) {
    self.stat_id = Some(stat_id);
  }

  pub fn with_stat_id(mut self, stat_id: String) -> DestinyHistoricalStatsDestinyClanAggregateStat {
    self.stat_id = Some(stat_id);
    self
  }

  pub fn stat_id(&self) -> Option<&String> {
    self.stat_id.as_ref()
  }

  pub fn reset_stat_id(&mut self) {
    self.stat_id = None;
  }

  pub fn set_value(&mut self, value: Value) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: Value) -> DestinyHistoricalStatsDestinyClanAggregateStat {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&Value> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



