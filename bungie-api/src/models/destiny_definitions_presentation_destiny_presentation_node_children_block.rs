/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock : As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
  #[serde(rename = "presentationNodes")]
  presentation_nodes: Option<Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry>>,
  #[serde(rename = "collectibles")]
  collectibles: Option<Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry>>,
  #[serde(rename = "records")]
  records: Option<Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry>>
}

impl DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
  /// As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything)
  pub fn new() -> DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
    DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
      presentation_nodes: None,
      collectibles: None,
      records: None
    }
  }

  pub fn set_presentation_nodes(&mut self, presentation_nodes: Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry>) {
    self.presentation_nodes = Some(presentation_nodes);
  }

  pub fn with_presentation_nodes(mut self, presentation_nodes: Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry>) -> DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
    self.presentation_nodes = Some(presentation_nodes);
    self
  }

  pub fn presentation_nodes(&self) -> Option<&Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry>> {
    self.presentation_nodes.as_ref()
  }

  pub fn reset_presentation_nodes(&mut self) {
    self.presentation_nodes = None;
  }

  pub fn set_collectibles(&mut self, collectibles: Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry>) {
    self.collectibles = Some(collectibles);
  }

  pub fn with_collectibles(mut self, collectibles: Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry>) -> DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
    self.collectibles = Some(collectibles);
    self
  }

  pub fn collectibles(&self) -> Option<&Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry>> {
    self.collectibles.as_ref()
  }

  pub fn reset_collectibles(&mut self) {
    self.collectibles = None;
  }

  pub fn set_records(&mut self, records: Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry>) {
    self.records = Some(records);
  }

  pub fn with_records(mut self, records: Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry>) -> DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
    self.records = Some(records);
    self
  }

  pub fn records(&self) -> Option<&Vec<::models::DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry>> {
    self.records.as_ref()
  }

  pub fn reset_records(&mut self) {
    self.records = None;
  }

}



