/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ForumPollResponse {
  #[serde(rename = "topicId")]
  topic_id: Option<i64>,
  #[serde(rename = "results")]
  results: Option<Vec<::models::ForumPollResult>>,
  #[serde(rename = "totalVotes")]
  total_votes: Option<i32>
}

impl ForumPollResponse {
  pub fn new() -> ForumPollResponse {
    ForumPollResponse {
      topic_id: None,
      results: None,
      total_votes: None
    }
  }

  pub fn set_topic_id(&mut self, topic_id: i64) {
    self.topic_id = Some(topic_id);
  }

  pub fn with_topic_id(mut self, topic_id: i64) -> ForumPollResponse {
    self.topic_id = Some(topic_id);
    self
  }

  pub fn topic_id(&self) -> Option<&i64> {
    self.topic_id.as_ref()
  }

  pub fn reset_topic_id(&mut self) {
    self.topic_id = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::ForumPollResult>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::ForumPollResult>) -> ForumPollResponse {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::ForumPollResult>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

  pub fn set_total_votes(&mut self, total_votes: i32) {
    self.total_votes = Some(total_votes);
  }

  pub fn with_total_votes(mut self, total_votes: i32) -> ForumPollResponse {
    self.total_votes = Some(total_votes);
    self
  }

  pub fn total_votes(&self) -> Option<&i32> {
    self.total_votes.as_ref()
  }

  pub fn reset_total_votes(&mut self) {
    self.total_votes = None;
  }

}



