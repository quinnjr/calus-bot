/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition : Nodes on a graph can be visually connected: this appears to be the information about which nodes to link. It appears to lack more detailed information, such as the path for that linking.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition {
  #[serde(rename = "sourceNodeHash")]
  source_node_hash: Option<i32>,
  #[serde(rename = "destNodeHash")]
  dest_node_hash: Option<i32>
}

impl DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition {
  /// Nodes on a graph can be visually connected: this appears to be the information about which nodes to link. It appears to lack more detailed information, such as the path for that linking.
  pub fn new() -> DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition {
    DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition {
      source_node_hash: None,
      dest_node_hash: None
    }
  }

  pub fn set_source_node_hash(&mut self, source_node_hash: i32) {
    self.source_node_hash = Some(source_node_hash);
  }

  pub fn with_source_node_hash(mut self, source_node_hash: i32) -> DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition {
    self.source_node_hash = Some(source_node_hash);
    self
  }

  pub fn source_node_hash(&self) -> Option<&i32> {
    self.source_node_hash.as_ref()
  }

  pub fn reset_source_node_hash(&mut self) {
    self.source_node_hash = None;
  }

  pub fn set_dest_node_hash(&mut self, dest_node_hash: i32) {
    self.dest_node_hash = Some(dest_node_hash);
  }

  pub fn with_dest_node_hash(mut self, dest_node_hash: i32) -> DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition {
    self.dest_node_hash = Some(dest_node_hash);
    self
  }

  pub fn dest_node_hash(&self) -> Option<&i32> {
    self.dest_node_hash.as_ref()
  }

  pub fn reset_dest_node_hash(&mut self) {
    self.dest_node_hash = None;
  }

}



