/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyProgressionRewardDefinition : Inventory Items can reward progression when actions are performed on them. A common example of this in Destiny 1 was Bounties, which would reward Experience on your Character and the like when you completed the bounty.  Note that this maps to a DestinyProgressionMappingDefinition, and *not* a DestinyProgressionDefinition directly. This is apparently so that multiple progressions can be granted progression points/experience at the same time.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyProgressionRewardDefinition {
  /// The hash identifier of the DestinyProgressionMappingDefinition that contains the progressions for which experience should be applied.
  #[serde(rename = "progressionMappingHash")]
  progression_mapping_hash: Option<i32>,
  /// The amount of experience to give to each of the mapped progressions.
  #[serde(rename = "amount")]
  amount: Option<i32>,
  /// If true, the game's internal mechanisms to throttle progression should be applied.
  #[serde(rename = "applyThrottles")]
  apply_throttles: Option<bool>
}

impl DestinyDefinitionsDestinyProgressionRewardDefinition {
  /// Inventory Items can reward progression when actions are performed on them. A common example of this in Destiny 1 was Bounties, which would reward Experience on your Character and the like when you completed the bounty.  Note that this maps to a DestinyProgressionMappingDefinition, and *not* a DestinyProgressionDefinition directly. This is apparently so that multiple progressions can be granted progression points/experience at the same time.
  pub fn new() -> DestinyDefinitionsDestinyProgressionRewardDefinition {
    DestinyDefinitionsDestinyProgressionRewardDefinition {
      progression_mapping_hash: None,
      amount: None,
      apply_throttles: None
    }
  }

  pub fn set_progression_mapping_hash(&mut self, progression_mapping_hash: i32) {
    self.progression_mapping_hash = Some(progression_mapping_hash);
  }

  pub fn with_progression_mapping_hash(mut self, progression_mapping_hash: i32) -> DestinyDefinitionsDestinyProgressionRewardDefinition {
    self.progression_mapping_hash = Some(progression_mapping_hash);
    self
  }

  pub fn progression_mapping_hash(&self) -> Option<&i32> {
    self.progression_mapping_hash.as_ref()
  }

  pub fn reset_progression_mapping_hash(&mut self) {
    self.progression_mapping_hash = None;
  }

  pub fn set_amount(&mut self, amount: i32) {
    self.amount = Some(amount);
  }

  pub fn with_amount(mut self, amount: i32) -> DestinyDefinitionsDestinyProgressionRewardDefinition {
    self.amount = Some(amount);
    self
  }

  pub fn amount(&self) -> Option<&i32> {
    self.amount.as_ref()
  }

  pub fn reset_amount(&mut self) {
    self.amount = None;
  }

  pub fn set_apply_throttles(&mut self, apply_throttles: bool) {
    self.apply_throttles = Some(apply_throttles);
  }

  pub fn with_apply_throttles(mut self, apply_throttles: bool) -> DestinyDefinitionsDestinyProgressionRewardDefinition {
    self.apply_throttles = Some(apply_throttles);
    self
  }

  pub fn apply_throttles(&self) -> Option<&bool> {
    self.apply_throttles.as_ref()
  }

  pub fn reset_apply_throttles(&mut self) {
    self.apply_throttles = None;
  }

}



