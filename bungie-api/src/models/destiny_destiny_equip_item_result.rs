/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDestinyEquipItemResult : The results of an Equipping operation performed through the Destiny API.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDestinyEquipItemResult {
  /// The instance ID of the item in question (all items that can be equipped must, but definition, be Instanced and thus have an Instance ID that you can use to refer to them)
  #[serde(rename = "itemInstanceId")]
  item_instance_id: Option<i64>,
  /// A PlatformErrorCodes enum indicating whether it succeeded, and if it failed why.
  #[serde(rename = "equipStatus")]
  equip_status: Option<i32>
}

impl DestinyDestinyEquipItemResult {
  /// The results of an Equipping operation performed through the Destiny API.
  pub fn new() -> DestinyDestinyEquipItemResult {
    DestinyDestinyEquipItemResult {
      item_instance_id: None,
      equip_status: None
    }
  }

  pub fn set_item_instance_id(&mut self, item_instance_id: i64) {
    self.item_instance_id = Some(item_instance_id);
  }

  pub fn with_item_instance_id(mut self, item_instance_id: i64) -> DestinyDestinyEquipItemResult {
    self.item_instance_id = Some(item_instance_id);
    self
  }

  pub fn item_instance_id(&self) -> Option<&i64> {
    self.item_instance_id.as_ref()
  }

  pub fn reset_item_instance_id(&mut self) {
    self.item_instance_id = None;
  }

  pub fn set_equip_status(&mut self, equip_status: i32) {
    self.equip_status = Some(equip_status);
  }

  pub fn with_equip_status(mut self, equip_status: i32) -> DestinyDestinyEquipItemResult {
    self.equip_status = Some(equip_status);
    self
  }

  pub fn equip_status(&self) -> Option<&i32> {
    self.equip_status.as_ref()
  }

  pub fn reset_equip_status(&mut self) {
    self.equip_status = None;
  }

}



