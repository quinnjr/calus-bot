/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemCategoryDefinition : In an attempt to categorize items by type, usage, and other interesting properties, we created DestinyItemCategoryDefinition: information about types that is assembled using a set of heuristics that examine the properties of an item such as what inventory bucket it's in, its item type name, and whether it has or is missing certain blocks of data.  This heuristic is imperfect, however. If you find an item miscategorized, let us know on the Bungie API forums!  We then populate all of the categories that we think an item belongs to in its DestinyInventoryItemDefinition.itemCategoryHashes property. You can use that to provide your own custom item filtering, sorting, aggregating... go nuts on it! And let us know if you see more categories that you wish would be added!

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemCategoryDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// If True, this category should be visible in UI. Sometimes we make categories that we don't think are interesting externally. It's up to you if you want to skip on showing them.
  #[serde(rename = "visible")]
  visible: Option<bool>,
  /// If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.
  #[serde(rename = "deprecated")]
  deprecated: Option<bool>,
  /// A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn't exist for D2... yet.
  #[serde(rename = "shortTitle")]
  short_title: Option<String>,
  /// The janky regular expression we used against the item type to try and discern whether the item belongs to this category.
  #[serde(rename = "itemTypeRegex")]
  item_type_regex: Option<String>,
  /// If the item in question has this category, it also should have this breaker type.
  #[serde(rename = "grantDestinyBreakerType")]
  grant_destiny_breaker_type: Option<i32>,
  /// If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.
  #[serde(rename = "plugCategoryIdentifier")]
  plug_category_identifier: Option<String>,
  /// If the item type matches this janky regex, it does *not* belong to this category.
  #[serde(rename = "itemTypeRegexNot")]
  item_type_regex_not: Option<String>,
  /// If the item belongs to this bucket, it does belong to this category.
  #[serde(rename = "originBucketIdentifier")]
  origin_bucket_identifier: Option<String>,
  /// If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that's a story that requires more alcohol.
  #[serde(rename = "grantDestinyItemType")]
  grant_destiny_item_type: Option<i32>,
  /// If an item belongs to this category, it will also receive this subtype enum value.  I know what you're thinking - what if it belongs to multiple categories that provide sub-types?  The last one processed wins, as is the case with all of these \"grant\" enums. Now you can see one reason why we moved away from these enums... but they're so convenient when they work, aren't they?
  #[serde(rename = "grantDestinySubType")]
  grant_destiny_sub_type: Option<i32>,
  /// If an item belongs to this category, it will also get this class restriction enum value.  See the other \"grant\"-prefixed properties on this definition for my color commentary.
  #[serde(rename = "grantDestinyClass")]
  grant_destiny_class: Option<i32>,
  /// If this category is a \"parent\" category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories. That's what we did, and you can do it too. I believe in you. Yes, you, Carl.  (I hope someone named Carl reads this someday)
  #[serde(rename = "groupedCategoryHashes")]
  grouped_category_hashes: Option<Vec<i32>>,
  /// All item category hashes of \"parent\" categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It's a bit redundant, but having this child-centric list speeds up some calculations.
  #[serde(rename = "parentCategoryHashes")]
  parent_category_hashes: Option<Vec<i32>>,
  /// If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.
  #[serde(rename = "groupCategoryOnly")]
  group_category_only: Option<bool>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyItemCategoryDefinition {
  /// In an attempt to categorize items by type, usage, and other interesting properties, we created DestinyItemCategoryDefinition: information about types that is assembled using a set of heuristics that examine the properties of an item such as what inventory bucket it's in, its item type name, and whether it has or is missing certain blocks of data.  This heuristic is imperfect, however. If you find an item miscategorized, let us know on the Bungie API forums!  We then populate all of the categories that we think an item belongs to in its DestinyInventoryItemDefinition.itemCategoryHashes property. You can use that to provide your own custom item filtering, sorting, aggregating... go nuts on it! And let us know if you see more categories that you wish would be added!
  pub fn new() -> DestinyDefinitionsDestinyItemCategoryDefinition {
    DestinyDefinitionsDestinyItemCategoryDefinition {
      display_properties: None,
      visible: None,
      deprecated: None,
      short_title: None,
      item_type_regex: None,
      grant_destiny_breaker_type: None,
      plug_category_identifier: None,
      item_type_regex_not: None,
      origin_bucket_identifier: None,
      grant_destiny_item_type: None,
      grant_destiny_sub_type: None,
      grant_destiny_class: None,
      grouped_category_hashes: None,
      parent_category_hashes: None,
      group_category_only: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_visible(&mut self, visible: bool) {
    self.visible = Some(visible);
  }

  pub fn with_visible(mut self, visible: bool) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.visible = Some(visible);
    self
  }

  pub fn visible(&self) -> Option<&bool> {
    self.visible.as_ref()
  }

  pub fn reset_visible(&mut self) {
    self.visible = None;
  }

  pub fn set_deprecated(&mut self, deprecated: bool) {
    self.deprecated = Some(deprecated);
  }

  pub fn with_deprecated(mut self, deprecated: bool) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.deprecated = Some(deprecated);
    self
  }

  pub fn deprecated(&self) -> Option<&bool> {
    self.deprecated.as_ref()
  }

  pub fn reset_deprecated(&mut self) {
    self.deprecated = None;
  }

  pub fn set_short_title(&mut self, short_title: String) {
    self.short_title = Some(short_title);
  }

  pub fn with_short_title(mut self, short_title: String) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.short_title = Some(short_title);
    self
  }

  pub fn short_title(&self) -> Option<&String> {
    self.short_title.as_ref()
  }

  pub fn reset_short_title(&mut self) {
    self.short_title = None;
  }

  pub fn set_item_type_regex(&mut self, item_type_regex: String) {
    self.item_type_regex = Some(item_type_regex);
  }

  pub fn with_item_type_regex(mut self, item_type_regex: String) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.item_type_regex = Some(item_type_regex);
    self
  }

  pub fn item_type_regex(&self) -> Option<&String> {
    self.item_type_regex.as_ref()
  }

  pub fn reset_item_type_regex(&mut self) {
    self.item_type_regex = None;
  }

  pub fn set_grant_destiny_breaker_type(&mut self, grant_destiny_breaker_type: i32) {
    self.grant_destiny_breaker_type = Some(grant_destiny_breaker_type);
  }

  pub fn with_grant_destiny_breaker_type(mut self, grant_destiny_breaker_type: i32) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.grant_destiny_breaker_type = Some(grant_destiny_breaker_type);
    self
  }

  pub fn grant_destiny_breaker_type(&self) -> Option<&i32> {
    self.grant_destiny_breaker_type.as_ref()
  }

  pub fn reset_grant_destiny_breaker_type(&mut self) {
    self.grant_destiny_breaker_type = None;
  }

  pub fn set_plug_category_identifier(&mut self, plug_category_identifier: String) {
    self.plug_category_identifier = Some(plug_category_identifier);
  }

  pub fn with_plug_category_identifier(mut self, plug_category_identifier: String) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.plug_category_identifier = Some(plug_category_identifier);
    self
  }

  pub fn plug_category_identifier(&self) -> Option<&String> {
    self.plug_category_identifier.as_ref()
  }

  pub fn reset_plug_category_identifier(&mut self) {
    self.plug_category_identifier = None;
  }

  pub fn set_item_type_regex_not(&mut self, item_type_regex_not: String) {
    self.item_type_regex_not = Some(item_type_regex_not);
  }

  pub fn with_item_type_regex_not(mut self, item_type_regex_not: String) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.item_type_regex_not = Some(item_type_regex_not);
    self
  }

  pub fn item_type_regex_not(&self) -> Option<&String> {
    self.item_type_regex_not.as_ref()
  }

  pub fn reset_item_type_regex_not(&mut self) {
    self.item_type_regex_not = None;
  }

  pub fn set_origin_bucket_identifier(&mut self, origin_bucket_identifier: String) {
    self.origin_bucket_identifier = Some(origin_bucket_identifier);
  }

  pub fn with_origin_bucket_identifier(mut self, origin_bucket_identifier: String) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.origin_bucket_identifier = Some(origin_bucket_identifier);
    self
  }

  pub fn origin_bucket_identifier(&self) -> Option<&String> {
    self.origin_bucket_identifier.as_ref()
  }

  pub fn reset_origin_bucket_identifier(&mut self) {
    self.origin_bucket_identifier = None;
  }

  pub fn set_grant_destiny_item_type(&mut self, grant_destiny_item_type: i32) {
    self.grant_destiny_item_type = Some(grant_destiny_item_type);
  }

  pub fn with_grant_destiny_item_type(mut self, grant_destiny_item_type: i32) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.grant_destiny_item_type = Some(grant_destiny_item_type);
    self
  }

  pub fn grant_destiny_item_type(&self) -> Option<&i32> {
    self.grant_destiny_item_type.as_ref()
  }

  pub fn reset_grant_destiny_item_type(&mut self) {
    self.grant_destiny_item_type = None;
  }

  pub fn set_grant_destiny_sub_type(&mut self, grant_destiny_sub_type: i32) {
    self.grant_destiny_sub_type = Some(grant_destiny_sub_type);
  }

  pub fn with_grant_destiny_sub_type(mut self, grant_destiny_sub_type: i32) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.grant_destiny_sub_type = Some(grant_destiny_sub_type);
    self
  }

  pub fn grant_destiny_sub_type(&self) -> Option<&i32> {
    self.grant_destiny_sub_type.as_ref()
  }

  pub fn reset_grant_destiny_sub_type(&mut self) {
    self.grant_destiny_sub_type = None;
  }

  pub fn set_grant_destiny_class(&mut self, grant_destiny_class: i32) {
    self.grant_destiny_class = Some(grant_destiny_class);
  }

  pub fn with_grant_destiny_class(mut self, grant_destiny_class: i32) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.grant_destiny_class = Some(grant_destiny_class);
    self
  }

  pub fn grant_destiny_class(&self) -> Option<&i32> {
    self.grant_destiny_class.as_ref()
  }

  pub fn reset_grant_destiny_class(&mut self) {
    self.grant_destiny_class = None;
  }

  pub fn set_grouped_category_hashes(&mut self, grouped_category_hashes: Vec<i32>) {
    self.grouped_category_hashes = Some(grouped_category_hashes);
  }

  pub fn with_grouped_category_hashes(mut self, grouped_category_hashes: Vec<i32>) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.grouped_category_hashes = Some(grouped_category_hashes);
    self
  }

  pub fn grouped_category_hashes(&self) -> Option<&Vec<i32>> {
    self.grouped_category_hashes.as_ref()
  }

  pub fn reset_grouped_category_hashes(&mut self) {
    self.grouped_category_hashes = None;
  }

  pub fn set_parent_category_hashes(&mut self, parent_category_hashes: Vec<i32>) {
    self.parent_category_hashes = Some(parent_category_hashes);
  }

  pub fn with_parent_category_hashes(mut self, parent_category_hashes: Vec<i32>) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.parent_category_hashes = Some(parent_category_hashes);
    self
  }

  pub fn parent_category_hashes(&self) -> Option<&Vec<i32>> {
    self.parent_category_hashes.as_ref()
  }

  pub fn reset_parent_category_hashes(&mut self) {
    self.parent_category_hashes = None;
  }

  pub fn set_group_category_only(&mut self, group_category_only: bool) {
    self.group_category_only = Some(group_category_only);
  }

  pub fn with_group_category_only(mut self, group_category_only: bool) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.group_category_only = Some(group_category_only);
    self
  }

  pub fn group_category_only(&self) -> Option<&bool> {
    self.group_category_only.as_ref()
  }

  pub fn reset_group_category_only(&mut self) {
    self.group_category_only = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyItemCategoryDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



