/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesItemsDestinyItemStatsComponent : If you want the stats on an item's instanced data, get this component.  These are stats like Attack, Defense etc... and *not* historical stats.  Note that some stats have additional computation in-game at runtime - for instance, Magazine Size - and thus these stats might not be 100% accurate compared to what you see in-game for some stats. I know, it sucks. I hate it too.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesItemsDestinyItemStatsComponent {
  /// If the item has stats that it provides (damage, defense, etc...), it will be given here.
  #[serde(rename = "stats")]
  stats: Option<::std::collections::HashMap<String, ::models::DestinyDestinyStat>>
}

impl DestinyEntitiesItemsDestinyItemStatsComponent {
  /// If you want the stats on an item's instanced data, get this component.  These are stats like Attack, Defense etc... and *not* historical stats.  Note that some stats have additional computation in-game at runtime - for instance, Magazine Size - and thus these stats might not be 100% accurate compared to what you see in-game for some stats. I know, it sucks. I hate it too.
  pub fn new() -> DestinyEntitiesItemsDestinyItemStatsComponent {
    DestinyEntitiesItemsDestinyItemStatsComponent {
      stats: None
    }
  }

  pub fn set_stats(&mut self, stats: ::std::collections::HashMap<String, ::models::DestinyDestinyStat>) {
    self.stats = Some(stats);
  }

  pub fn with_stats(mut self, stats: ::std::collections::HashMap<String, ::models::DestinyDestinyStat>) -> DestinyEntitiesItemsDestinyItemStatsComponent {
    self.stats = Some(stats);
    self
  }

  pub fn stats(&self) -> Option<&::std::collections::HashMap<String, ::models::DestinyDestinyStat>> {
    self.stats.as_ref()
  }

  pub fn reset_stats(&mut self) {
    self.stats = None;
  }

}



