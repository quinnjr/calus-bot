/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserEMailSettingSubscriptionLocalization : Localized text relevant to a given EMail setting in a given localization. Extra settings specifically for subscriptions.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserEMailSettingSubscriptionLocalization {
  #[serde(rename = "unknownUserDescription")]
  unknown_user_description: Option<String>,
  #[serde(rename = "registeredUserDescription")]
  registered_user_description: Option<String>,
  #[serde(rename = "unregisteredUserDescription")]
  unregistered_user_description: Option<String>,
  #[serde(rename = "unknownUserActionText")]
  unknown_user_action_text: Option<String>,
  #[serde(rename = "knownUserActionText")]
  known_user_action_text: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>
}

impl UserEMailSettingSubscriptionLocalization {
  /// Localized text relevant to a given EMail setting in a given localization. Extra settings specifically for subscriptions.
  pub fn new() -> UserEMailSettingSubscriptionLocalization {
    UserEMailSettingSubscriptionLocalization {
      unknown_user_description: None,
      registered_user_description: None,
      unregistered_user_description: None,
      unknown_user_action_text: None,
      known_user_action_text: None,
      title: None,
      description: None
    }
  }

  pub fn set_unknown_user_description(&mut self, unknown_user_description: String) {
    self.unknown_user_description = Some(unknown_user_description);
  }

  pub fn with_unknown_user_description(mut self, unknown_user_description: String) -> UserEMailSettingSubscriptionLocalization {
    self.unknown_user_description = Some(unknown_user_description);
    self
  }

  pub fn unknown_user_description(&self) -> Option<&String> {
    self.unknown_user_description.as_ref()
  }

  pub fn reset_unknown_user_description(&mut self) {
    self.unknown_user_description = None;
  }

  pub fn set_registered_user_description(&mut self, registered_user_description: String) {
    self.registered_user_description = Some(registered_user_description);
  }

  pub fn with_registered_user_description(mut self, registered_user_description: String) -> UserEMailSettingSubscriptionLocalization {
    self.registered_user_description = Some(registered_user_description);
    self
  }

  pub fn registered_user_description(&self) -> Option<&String> {
    self.registered_user_description.as_ref()
  }

  pub fn reset_registered_user_description(&mut self) {
    self.registered_user_description = None;
  }

  pub fn set_unregistered_user_description(&mut self, unregistered_user_description: String) {
    self.unregistered_user_description = Some(unregistered_user_description);
  }

  pub fn with_unregistered_user_description(mut self, unregistered_user_description: String) -> UserEMailSettingSubscriptionLocalization {
    self.unregistered_user_description = Some(unregistered_user_description);
    self
  }

  pub fn unregistered_user_description(&self) -> Option<&String> {
    self.unregistered_user_description.as_ref()
  }

  pub fn reset_unregistered_user_description(&mut self) {
    self.unregistered_user_description = None;
  }

  pub fn set_unknown_user_action_text(&mut self, unknown_user_action_text: String) {
    self.unknown_user_action_text = Some(unknown_user_action_text);
  }

  pub fn with_unknown_user_action_text(mut self, unknown_user_action_text: String) -> UserEMailSettingSubscriptionLocalization {
    self.unknown_user_action_text = Some(unknown_user_action_text);
    self
  }

  pub fn unknown_user_action_text(&self) -> Option<&String> {
    self.unknown_user_action_text.as_ref()
  }

  pub fn reset_unknown_user_action_text(&mut self) {
    self.unknown_user_action_text = None;
  }

  pub fn set_known_user_action_text(&mut self, known_user_action_text: String) {
    self.known_user_action_text = Some(known_user_action_text);
  }

  pub fn with_known_user_action_text(mut self, known_user_action_text: String) -> UserEMailSettingSubscriptionLocalization {
    self.known_user_action_text = Some(known_user_action_text);
    self
  }

  pub fn known_user_action_text(&self) -> Option<&String> {
    self.known_user_action_text.as_ref()
  }

  pub fn reset_known_user_action_text(&mut self) {
    self.known_user_action_text = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> UserEMailSettingSubscriptionLocalization {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> UserEMailSettingSubscriptionLocalization {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

}



