/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyPublicMilestoneVendor {
  /// The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.
  #[serde(rename = "vendorHash")]
  vendor_hash: Option<i32>,
  /// If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I'm taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I'm going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.
  #[serde(rename = "previewItemHash")]
  preview_item_hash: Option<i32>
}

impl DestinyMilestonesDestinyPublicMilestoneVendor {
  pub fn new() -> DestinyMilestonesDestinyPublicMilestoneVendor {
    DestinyMilestonesDestinyPublicMilestoneVendor {
      vendor_hash: None,
      preview_item_hash: None
    }
  }

  pub fn set_vendor_hash(&mut self, vendor_hash: i32) {
    self.vendor_hash = Some(vendor_hash);
  }

  pub fn with_vendor_hash(mut self, vendor_hash: i32) -> DestinyMilestonesDestinyPublicMilestoneVendor {
    self.vendor_hash = Some(vendor_hash);
    self
  }

  pub fn vendor_hash(&self) -> Option<&i32> {
    self.vendor_hash.as_ref()
  }

  pub fn reset_vendor_hash(&mut self) {
    self.vendor_hash = None;
  }

  pub fn set_preview_item_hash(&mut self, preview_item_hash: i32) {
    self.preview_item_hash = Some(preview_item_hash);
  }

  pub fn with_preview_item_hash(mut self, preview_item_hash: i32) -> DestinyMilestonesDestinyPublicMilestoneVendor {
    self.preview_item_hash = Some(preview_item_hash);
    self
  }

  pub fn preview_item_hash(&self) -> Option<&i32> {
    self.preview_item_hash.as_ref()
  }

  pub fn reset_preview_item_hash(&mut self) {
    self.preview_item_hash = None;
  }

}



