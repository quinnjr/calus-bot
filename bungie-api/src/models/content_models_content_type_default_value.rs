/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentModelsContentTypeDefaultValue {
  #[serde(rename = "whenClause")]
  when_clause: Option<String>,
  #[serde(rename = "whenValue")]
  when_value: Option<String>,
  #[serde(rename = "defaultValue")]
  default_value: Option<String>
}

impl ContentModelsContentTypeDefaultValue {
  pub fn new() -> ContentModelsContentTypeDefaultValue {
    ContentModelsContentTypeDefaultValue {
      when_clause: None,
      when_value: None,
      default_value: None
    }
  }

  pub fn set_when_clause(&mut self, when_clause: String) {
    self.when_clause = Some(when_clause);
  }

  pub fn with_when_clause(mut self, when_clause: String) -> ContentModelsContentTypeDefaultValue {
    self.when_clause = Some(when_clause);
    self
  }

  pub fn when_clause(&self) -> Option<&String> {
    self.when_clause.as_ref()
  }

  pub fn reset_when_clause(&mut self) {
    self.when_clause = None;
  }

  pub fn set_when_value(&mut self, when_value: String) {
    self.when_value = Some(when_value);
  }

  pub fn with_when_value(mut self, when_value: String) -> ContentModelsContentTypeDefaultValue {
    self.when_value = Some(when_value);
    self
  }

  pub fn when_value(&self) -> Option<&String> {
    self.when_value.as_ref()
  }

  pub fn reset_when_value(&mut self) {
    self.when_value = None;
  }

  pub fn set_default_value(&mut self, default_value: String) {
    self.default_value = Some(default_value);
  }

  pub fn with_default_value(mut self, default_value: String) -> ContentModelsContentTypeDefaultValue {
    self.default_value = Some(default_value);
    self
  }

  pub fn default_value(&self) -> Option<&String> {
    self.default_value.as_ref()
  }

  pub fn reset_default_value(&mut self) {
    self.default_value = None;
  }

}



