/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyDestinationDefinition : On to one of the more confusing subjects of the API. What is a Destination, and what is the relationship between it, Activities, Locations, and Places?  A \"Destination\" is a specific region/city/area of a larger \"Place\". For instance, a Place might be Earth where a Destination might be Bellevue, Washington. (Please, pick a more interesting destination if you come to visit Earth).

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyDestinationDefinition {
  #[serde(rename = "displayProperties")]
  display_properties: Option<::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>,
  /// The place that \"owns\" this Destination. Use this hash to look up the DestinyPlaceDefinition.
  #[serde(rename = "placeHash")]
  place_hash: Option<i32>,
  /// If this Destination has a default Free-Roam activity, this is the hash for that Activity. Use it to look up the DestinyActivityDefintion.
  #[serde(rename = "defaultFreeroamActivityHash")]
  default_freeroam_activity_hash: Option<i32>,
  /// If the Destination has default Activity Graphs (i.e. \"Map\") that should be shown in the director, this is the list of those Graphs. At most, only one should be active at any given time for a Destination: these would represent, for example, different variants on a Map if the Destination is changing on a macro level based on game state.
  #[serde(rename = "activityGraphEntries")]
  activity_graph_entries: Option<Vec<::models::DestinyDefinitionsDestinyActivityGraphListEntryDefinition>>,
  /// A Destination may have many \"Bubbles\" zones with human readable properties.  We don't get as much info as I'd like about them - I'd love to return info like where on the map they are located - but at least this gives you the name of those bubbles. bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.  DEPRECATED - Just use bubbles, it now has this data.
  #[serde(rename = "bubbleSettings")]
  bubble_settings: Option<Vec<::models::DestinyDefinitionsDestinyDestinationBubbleSettingDefinition>>,
  /// This provides the unique identifiers for every bubble in the destination (only guaranteed unique within the destination), and any intrinsic properties of the bubble.  bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.
  #[serde(rename = "bubbles")]
  bubbles: Option<Vec<::models::DestinyDefinitionsDestinyBubbleDefinition>>,
  /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
  #[serde(rename = "hash")]
  hash: Option<i32>,
  /// The index of the entity as it was found in the investment tables.
  #[serde(rename = "index")]
  index: Option<i32>,
  /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
  #[serde(rename = "redacted")]
  redacted: Option<bool>
}

impl DestinyDefinitionsDestinyDestinationDefinition {
  /// On to one of the more confusing subjects of the API. What is a Destination, and what is the relationship between it, Activities, Locations, and Places?  A \"Destination\" is a specific region/city/area of a larger \"Place\". For instance, a Place might be Earth where a Destination might be Bellevue, Washington. (Please, pick a more interesting destination if you come to visit Earth).
  pub fn new() -> DestinyDefinitionsDestinyDestinationDefinition {
    DestinyDefinitionsDestinyDestinationDefinition {
      display_properties: None,
      place_hash: None,
      default_freeroam_activity_hash: None,
      activity_graph_entries: None,
      bubble_settings: None,
      bubbles: None,
      hash: None,
      index: None,
      redacted: None
    }
  }

  pub fn set_display_properties(&mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: ::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&::models::DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_place_hash(&mut self, place_hash: i32) {
    self.place_hash = Some(place_hash);
  }

  pub fn with_place_hash(mut self, place_hash: i32) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.place_hash = Some(place_hash);
    self
  }

  pub fn place_hash(&self) -> Option<&i32> {
    self.place_hash.as_ref()
  }

  pub fn reset_place_hash(&mut self) {
    self.place_hash = None;
  }

  pub fn set_default_freeroam_activity_hash(&mut self, default_freeroam_activity_hash: i32) {
    self.default_freeroam_activity_hash = Some(default_freeroam_activity_hash);
  }

  pub fn with_default_freeroam_activity_hash(mut self, default_freeroam_activity_hash: i32) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.default_freeroam_activity_hash = Some(default_freeroam_activity_hash);
    self
  }

  pub fn default_freeroam_activity_hash(&self) -> Option<&i32> {
    self.default_freeroam_activity_hash.as_ref()
  }

  pub fn reset_default_freeroam_activity_hash(&mut self) {
    self.default_freeroam_activity_hash = None;
  }

  pub fn set_activity_graph_entries(&mut self, activity_graph_entries: Vec<::models::DestinyDefinitionsDestinyActivityGraphListEntryDefinition>) {
    self.activity_graph_entries = Some(activity_graph_entries);
  }

  pub fn with_activity_graph_entries(mut self, activity_graph_entries: Vec<::models::DestinyDefinitionsDestinyActivityGraphListEntryDefinition>) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.activity_graph_entries = Some(activity_graph_entries);
    self
  }

  pub fn activity_graph_entries(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyActivityGraphListEntryDefinition>> {
    self.activity_graph_entries.as_ref()
  }

  pub fn reset_activity_graph_entries(&mut self) {
    self.activity_graph_entries = None;
  }

  pub fn set_bubble_settings(&mut self, bubble_settings: Vec<::models::DestinyDefinitionsDestinyDestinationBubbleSettingDefinition>) {
    self.bubble_settings = Some(bubble_settings);
  }

  pub fn with_bubble_settings(mut self, bubble_settings: Vec<::models::DestinyDefinitionsDestinyDestinationBubbleSettingDefinition>) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.bubble_settings = Some(bubble_settings);
    self
  }

  pub fn bubble_settings(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyDestinationBubbleSettingDefinition>> {
    self.bubble_settings.as_ref()
  }

  pub fn reset_bubble_settings(&mut self) {
    self.bubble_settings = None;
  }

  pub fn set_bubbles(&mut self, bubbles: Vec<::models::DestinyDefinitionsDestinyBubbleDefinition>) {
    self.bubbles = Some(bubbles);
  }

  pub fn with_bubbles(mut self, bubbles: Vec<::models::DestinyDefinitionsDestinyBubbleDefinition>) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.bubbles = Some(bubbles);
    self
  }

  pub fn bubbles(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyBubbleDefinition>> {
    self.bubbles.as_ref()
  }

  pub fn reset_bubbles(&mut self) {
    self.bubbles = None;
  }

  pub fn set_hash(&mut self, hash: i32) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: i32) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&i32> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_redacted(&mut self, redacted: bool) {
    self.redacted = Some(redacted);
  }

  pub fn with_redacted(mut self, redacted: bool) -> DestinyDefinitionsDestinyDestinationDefinition {
    self.redacted = Some(redacted);
    self
  }

  pub fn redacted(&self) -> Option<&bool> {
    self.redacted.as_ref()
  }

  pub fn reset_redacted(&mut self) {
    self.redacted = None;
  }

}



