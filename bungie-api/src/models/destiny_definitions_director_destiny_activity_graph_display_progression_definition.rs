/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition : When a Graph needs to show active Progressions, this defines those objectives as well as an identifier.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition {
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "progressionHash")]
  progression_hash: Option<i32>
}

impl DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition {
  /// When a Graph needs to show active Progressions, this defines those objectives as well as an identifier.
  pub fn new() -> DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition {
    DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition {
      id: None,
      progression_hash: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_progression_hash(&mut self, progression_hash: i32) {
    self.progression_hash = Some(progression_hash);
  }

  pub fn with_progression_hash(mut self, progression_hash: i32) -> DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition {
    self.progression_hash = Some(progression_hash);
    self
  }

  pub fn progression_hash(&self) -> Option<&i32> {
    self.progression_hash.as_ref()
  }

  pub fn reset_progression_hash(&mut self) {
    self.progression_hash = None;
  }

}



