/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsVendorsDestinyVendorLocationDefinition : These definitions represent vendors' locations and relevant display information at different times in the game.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsVendorsDestinyVendorLocationDefinition {
  /// The hash identifier for a Destination at which this vendor may be located. Each destination where a Vendor may exist will only ever have a single entry.
  #[serde(rename = "destinationHash")]
  destination_hash: Option<i32>,
  /// The relative path to the background image representing this Vendor at this location, for use in a banner.
  #[serde(rename = "backgroundImagePath")]
  background_image_path: Option<String>
}

impl DestinyDefinitionsVendorsDestinyVendorLocationDefinition {
  /// These definitions represent vendors' locations and relevant display information at different times in the game.
  pub fn new() -> DestinyDefinitionsVendorsDestinyVendorLocationDefinition {
    DestinyDefinitionsVendorsDestinyVendorLocationDefinition {
      destination_hash: None,
      background_image_path: None
    }
  }

  pub fn set_destination_hash(&mut self, destination_hash: i32) {
    self.destination_hash = Some(destination_hash);
  }

  pub fn with_destination_hash(mut self, destination_hash: i32) -> DestinyDefinitionsVendorsDestinyVendorLocationDefinition {
    self.destination_hash = Some(destination_hash);
    self
  }

  pub fn destination_hash(&self) -> Option<&i32> {
    self.destination_hash.as_ref()
  }

  pub fn reset_destination_hash(&mut self) {
    self.destination_hash = None;
  }

  pub fn set_background_image_path(&mut self, background_image_path: String) {
    self.background_image_path = Some(background_image_path);
  }

  pub fn with_background_image_path(mut self, background_image_path: String) -> DestinyDefinitionsVendorsDestinyVendorLocationDefinition {
    self.background_image_path = Some(background_image_path);
    self
  }

  pub fn background_image_path(&self) -> Option<&String> {
    self.background_image_path.as_ref()
  }

  pub fn reset_background_image_path(&mut self) {
    self.background_image_path = None;
  }

}



