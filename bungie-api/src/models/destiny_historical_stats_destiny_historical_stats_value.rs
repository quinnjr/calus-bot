/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyHistoricalStatsValue {
  /// Unique ID for this stat
  #[serde(rename = "statId")]
  stat_id: Option<String>,
  /// Basic stat value.
  #[serde(rename = "basic")]
  basic: Option<Value>,
  /// Per game average for the statistic, if applicable
  #[serde(rename = "pga")]
  pga: Option<Value>,
  /// Weighted value of the stat if a weight greater than 1 has been assigned.
  #[serde(rename = "weighted")]
  weighted: Option<Value>,
  /// When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
  #[serde(rename = "activityId")]
  activity_id: Option<i64>
}

impl DestinyHistoricalStatsDestinyHistoricalStatsValue {
  pub fn new() -> DestinyHistoricalStatsDestinyHistoricalStatsValue {
    DestinyHistoricalStatsDestinyHistoricalStatsValue {
      stat_id: None,
      basic: None,
      pga: None,
      weighted: None,
      activity_id: None
    }
  }

  pub fn set_stat_id(&mut self, stat_id: String) {
    self.stat_id = Some(stat_id);
  }

  pub fn with_stat_id(mut self, stat_id: String) -> DestinyHistoricalStatsDestinyHistoricalStatsValue {
    self.stat_id = Some(stat_id);
    self
  }

  pub fn stat_id(&self) -> Option<&String> {
    self.stat_id.as_ref()
  }

  pub fn reset_stat_id(&mut self) {
    self.stat_id = None;
  }

  pub fn set_basic(&mut self, basic: Value) {
    self.basic = Some(basic);
  }

  pub fn with_basic(mut self, basic: Value) -> DestinyHistoricalStatsDestinyHistoricalStatsValue {
    self.basic = Some(basic);
    self
  }

  pub fn basic(&self) -> Option<&Value> {
    self.basic.as_ref()
  }

  pub fn reset_basic(&mut self) {
    self.basic = None;
  }

  pub fn set_pga(&mut self, pga: Value) {
    self.pga = Some(pga);
  }

  pub fn with_pga(mut self, pga: Value) -> DestinyHistoricalStatsDestinyHistoricalStatsValue {
    self.pga = Some(pga);
    self
  }

  pub fn pga(&self) -> Option<&Value> {
    self.pga.as_ref()
  }

  pub fn reset_pga(&mut self) {
    self.pga = None;
  }

  pub fn set_weighted(&mut self, weighted: Value) {
    self.weighted = Some(weighted);
  }

  pub fn with_weighted(mut self, weighted: Value) -> DestinyHistoricalStatsDestinyHistoricalStatsValue {
    self.weighted = Some(weighted);
    self
  }

  pub fn weighted(&self) -> Option<&Value> {
    self.weighted.as_ref()
  }

  pub fn reset_weighted(&mut self) {
    self.weighted = None;
  }

  pub fn set_activity_id(&mut self, activity_id: i64) {
    self.activity_id = Some(activity_id);
  }

  pub fn with_activity_id(mut self, activity_id: i64) -> DestinyHistoricalStatsDestinyHistoricalStatsValue {
    self.activity_id = Some(activity_id);
    self
  }

  pub fn activity_id(&self) -> Option<&i64> {
    self.activity_id.as_ref()
  }

  pub fn reset_activity_id(&mut self) {
    self.activity_id = None;
  }

}



