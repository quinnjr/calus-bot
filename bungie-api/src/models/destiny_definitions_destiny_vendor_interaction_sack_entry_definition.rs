/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition : Compare this sackType to the sack identifier in the DestinyInventoryItemDefinition.vendorSackType property of items. If they match, show this sack with this interaction.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition {
  #[serde(rename = "sackType")]
  sack_type: Option<i32>
}

impl DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition {
  /// Compare this sackType to the sack identifier in the DestinyInventoryItemDefinition.vendorSackType property of items. If they match, show this sack with this interaction.
  pub fn new() -> DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition {
    DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition {
      sack_type: None
    }
  }

  pub fn set_sack_type(&mut self, sack_type: i32) {
    self.sack_type = Some(sack_type);
  }

  pub fn with_sack_type(mut self, sack_type: i32) -> DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition {
    self.sack_type = Some(sack_type);
    self
  }

  pub fn sack_type(&self) -> Option<&i32> {
    self.sack_type.as_ref()
  }

  pub fn reset_sack_type(&mut self) {
    self.sack_type = None;
  }

}



