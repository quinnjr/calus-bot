/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyRequestsActionsDestinyInsertPlugsActionRequest {
  /// Action token provided by the AwaGetActionToken API call.
  #[serde(rename = "actionToken")]
  action_token: Option<String>,
  /// The instance ID of the item having a plug inserted. Only instanced items can have sockets.
  #[serde(rename = "itemInstanceId")]
  item_instance_id: Option<i64>,
  /// The plugs being inserted.
  #[serde(rename = "plug")]
  plug: Option<Value>,
  #[serde(rename = "characterId")]
  character_id: Option<i64>,
  #[serde(rename = "membershipType")]
  membership_type: Option<i32>
}

impl DestinyRequestsActionsDestinyInsertPlugsActionRequest {
  pub fn new() -> DestinyRequestsActionsDestinyInsertPlugsActionRequest {
    DestinyRequestsActionsDestinyInsertPlugsActionRequest {
      action_token: None,
      item_instance_id: None,
      plug: None,
      character_id: None,
      membership_type: None
    }
  }

  pub fn set_action_token(&mut self, action_token: String) {
    self.action_token = Some(action_token);
  }

  pub fn with_action_token(mut self, action_token: String) -> DestinyRequestsActionsDestinyInsertPlugsActionRequest {
    self.action_token = Some(action_token);
    self
  }

  pub fn action_token(&self) -> Option<&String> {
    self.action_token.as_ref()
  }

  pub fn reset_action_token(&mut self) {
    self.action_token = None;
  }

  pub fn set_item_instance_id(&mut self, item_instance_id: i64) {
    self.item_instance_id = Some(item_instance_id);
  }

  pub fn with_item_instance_id(mut self, item_instance_id: i64) -> DestinyRequestsActionsDestinyInsertPlugsActionRequest {
    self.item_instance_id = Some(item_instance_id);
    self
  }

  pub fn item_instance_id(&self) -> Option<&i64> {
    self.item_instance_id.as_ref()
  }

  pub fn reset_item_instance_id(&mut self) {
    self.item_instance_id = None;
  }

  pub fn set_plug(&mut self, plug: Value) {
    self.plug = Some(plug);
  }

  pub fn with_plug(mut self, plug: Value) -> DestinyRequestsActionsDestinyInsertPlugsActionRequest {
    self.plug = Some(plug);
    self
  }

  pub fn plug(&self) -> Option<&Value> {
    self.plug.as_ref()
  }

  pub fn reset_plug(&mut self) {
    self.plug = None;
  }

  pub fn set_character_id(&mut self, character_id: i64) {
    self.character_id = Some(character_id);
  }

  pub fn with_character_id(mut self, character_id: i64) -> DestinyRequestsActionsDestinyInsertPlugsActionRequest {
    self.character_id = Some(character_id);
    self
  }

  pub fn character_id(&self) -> Option<&i64> {
    self.character_id.as_ref()
  }

  pub fn reset_character_id(&mut self) {
    self.character_id = None;
  }

  pub fn set_membership_type(&mut self, membership_type: i32) {
    self.membership_type = Some(membership_type);
  }

  pub fn with_membership_type(mut self, membership_type: i32) -> DestinyRequestsActionsDestinyInsertPlugsActionRequest {
    self.membership_type = Some(membership_type);
    self
  }

  pub fn membership_type(&self) -> Option<&i32> {
    self.membership_type.as_ref()
  }

  pub fn reset_membership_type(&mut self) {
    self.membership_type = None;
  }

}



