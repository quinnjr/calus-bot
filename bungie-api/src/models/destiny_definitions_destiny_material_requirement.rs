/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyMaterialRequirement : Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyMaterialRequirement {
  /// The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.
  #[serde(rename = "itemHash")]
  item_hash: Option<i32>,
  /// If True, the material will be removed from the character's inventory when the action is performed.
  #[serde(rename = "deleteOnAction")]
  delete_on_action: Option<bool>,
  /// The amount of the material required.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// If True, this requirement is \"silent\": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.
  #[serde(rename = "omitFromRequirements")]
  omit_from_requirements: Option<bool>
}

impl DestinyDefinitionsDestinyMaterialRequirement {
  /// Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that.
  pub fn new() -> DestinyDefinitionsDestinyMaterialRequirement {
    DestinyDefinitionsDestinyMaterialRequirement {
      item_hash: None,
      delete_on_action: None,
      count: None,
      omit_from_requirements: None
    }
  }

  pub fn set_item_hash(&mut self, item_hash: i32) {
    self.item_hash = Some(item_hash);
  }

  pub fn with_item_hash(mut self, item_hash: i32) -> DestinyDefinitionsDestinyMaterialRequirement {
    self.item_hash = Some(item_hash);
    self
  }

  pub fn item_hash(&self) -> Option<&i32> {
    self.item_hash.as_ref()
  }

  pub fn reset_item_hash(&mut self) {
    self.item_hash = None;
  }

  pub fn set_delete_on_action(&mut self, delete_on_action: bool) {
    self.delete_on_action = Some(delete_on_action);
  }

  pub fn with_delete_on_action(mut self, delete_on_action: bool) -> DestinyDefinitionsDestinyMaterialRequirement {
    self.delete_on_action = Some(delete_on_action);
    self
  }

  pub fn delete_on_action(&self) -> Option<&bool> {
    self.delete_on_action.as_ref()
  }

  pub fn reset_delete_on_action(&mut self) {
    self.delete_on_action = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> DestinyDefinitionsDestinyMaterialRequirement {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_omit_from_requirements(&mut self, omit_from_requirements: bool) {
    self.omit_from_requirements = Some(omit_from_requirements);
  }

  pub fn with_omit_from_requirements(mut self, omit_from_requirements: bool) -> DestinyDefinitionsDestinyMaterialRequirement {
    self.omit_from_requirements = Some(omit_from_requirements);
    self
  }

  pub fn omit_from_requirements(&self) -> Option<&bool> {
    self.omit_from_requirements.as_ref()
  }

  pub fn reset_omit_from_requirements(&mut self) {
    self.omit_from_requirements = None;
  }

}



