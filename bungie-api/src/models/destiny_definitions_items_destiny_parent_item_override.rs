/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsItemsDestinyParentItemOverride {
  #[serde(rename = "additionalEquipRequirementsDisplayStrings")]
  additional_equip_requirements_display_strings: Option<Vec<String>>,
  #[serde(rename = "pipIcon")]
  pip_icon: Option<String>
}

impl DestinyDefinitionsItemsDestinyParentItemOverride {
  pub fn new() -> DestinyDefinitionsItemsDestinyParentItemOverride {
    DestinyDefinitionsItemsDestinyParentItemOverride {
      additional_equip_requirements_display_strings: None,
      pip_icon: None
    }
  }

  pub fn set_additional_equip_requirements_display_strings(&mut self, additional_equip_requirements_display_strings: Vec<String>) {
    self.additional_equip_requirements_display_strings = Some(additional_equip_requirements_display_strings);
  }

  pub fn with_additional_equip_requirements_display_strings(mut self, additional_equip_requirements_display_strings: Vec<String>) -> DestinyDefinitionsItemsDestinyParentItemOverride {
    self.additional_equip_requirements_display_strings = Some(additional_equip_requirements_display_strings);
    self
  }

  pub fn additional_equip_requirements_display_strings(&self) -> Option<&Vec<String>> {
    self.additional_equip_requirements_display_strings.as_ref()
  }

  pub fn reset_additional_equip_requirements_display_strings(&mut self) {
    self.additional_equip_requirements_display_strings = None;
  }

  pub fn set_pip_icon(&mut self, pip_icon: String) {
    self.pip_icon = Some(pip_icon);
  }

  pub fn with_pip_icon(mut self, pip_icon: String) -> DestinyDefinitionsItemsDestinyParentItemOverride {
    self.pip_icon = Some(pip_icon);
    self
  }

  pub fn pip_icon(&self) -> Option<&String> {
    self.pip_icon.as_ref()
  }

  pub fn reset_pip_icon(&mut self) {
    self.pip_icon = None;
  }

}



