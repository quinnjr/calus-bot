/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyAdvancedAwaAuthorizationResult {
  /// Indication of how the user responded to the request. If the value is \"Approved\" the actionToken will contain the token that can be presented when performing the advanced write action.
  #[serde(rename = "userSelection")]
  user_selection: Option<i32>,
  #[serde(rename = "responseReason")]
  response_reason: Option<i32>,
  /// Message to the app developer to help understand the response.
  #[serde(rename = "developerNote")]
  developer_note: Option<String>,
  /// Credential used to prove the user authorized an advanced write action.
  #[serde(rename = "actionToken")]
  action_token: Option<String>,
  /// This token may be used to perform the requested action this number of times, at a maximum. If this value is 0, then there is no limit.
  #[serde(rename = "maximumNumberOfUses")]
  maximum_number_of_uses: Option<i32>,
  /// Time, UTC, when token expires.
  #[serde(rename = "validUntil")]
  valid_until: Option<String>,
  /// Advanced Write Action Type from the permission request.
  #[serde(rename = "type")]
  _type: Option<i32>,
  /// MembershipType from the permission request.
  #[serde(rename = "membershipType")]
  membership_type: Option<i32>
}

impl DestinyAdvancedAwaAuthorizationResult {
  pub fn new() -> DestinyAdvancedAwaAuthorizationResult {
    DestinyAdvancedAwaAuthorizationResult {
      user_selection: None,
      response_reason: None,
      developer_note: None,
      action_token: None,
      maximum_number_of_uses: None,
      valid_until: None,
      _type: None,
      membership_type: None
    }
  }

  pub fn set_user_selection(&mut self, user_selection: i32) {
    self.user_selection = Some(user_selection);
  }

  pub fn with_user_selection(mut self, user_selection: i32) -> DestinyAdvancedAwaAuthorizationResult {
    self.user_selection = Some(user_selection);
    self
  }

  pub fn user_selection(&self) -> Option<&i32> {
    self.user_selection.as_ref()
  }

  pub fn reset_user_selection(&mut self) {
    self.user_selection = None;
  }

  pub fn set_response_reason(&mut self, response_reason: i32) {
    self.response_reason = Some(response_reason);
  }

  pub fn with_response_reason(mut self, response_reason: i32) -> DestinyAdvancedAwaAuthorizationResult {
    self.response_reason = Some(response_reason);
    self
  }

  pub fn response_reason(&self) -> Option<&i32> {
    self.response_reason.as_ref()
  }

  pub fn reset_response_reason(&mut self) {
    self.response_reason = None;
  }

  pub fn set_developer_note(&mut self, developer_note: String) {
    self.developer_note = Some(developer_note);
  }

  pub fn with_developer_note(mut self, developer_note: String) -> DestinyAdvancedAwaAuthorizationResult {
    self.developer_note = Some(developer_note);
    self
  }

  pub fn developer_note(&self) -> Option<&String> {
    self.developer_note.as_ref()
  }

  pub fn reset_developer_note(&mut self) {
    self.developer_note = None;
  }

  pub fn set_action_token(&mut self, action_token: String) {
    self.action_token = Some(action_token);
  }

  pub fn with_action_token(mut self, action_token: String) -> DestinyAdvancedAwaAuthorizationResult {
    self.action_token = Some(action_token);
    self
  }

  pub fn action_token(&self) -> Option<&String> {
    self.action_token.as_ref()
  }

  pub fn reset_action_token(&mut self) {
    self.action_token = None;
  }

  pub fn set_maximum_number_of_uses(&mut self, maximum_number_of_uses: i32) {
    self.maximum_number_of_uses = Some(maximum_number_of_uses);
  }

  pub fn with_maximum_number_of_uses(mut self, maximum_number_of_uses: i32) -> DestinyAdvancedAwaAuthorizationResult {
    self.maximum_number_of_uses = Some(maximum_number_of_uses);
    self
  }

  pub fn maximum_number_of_uses(&self) -> Option<&i32> {
    self.maximum_number_of_uses.as_ref()
  }

  pub fn reset_maximum_number_of_uses(&mut self) {
    self.maximum_number_of_uses = None;
  }

  pub fn set_valid_until(&mut self, valid_until: String) {
    self.valid_until = Some(valid_until);
  }

  pub fn with_valid_until(mut self, valid_until: String) -> DestinyAdvancedAwaAuthorizationResult {
    self.valid_until = Some(valid_until);
    self
  }

  pub fn valid_until(&self) -> Option<&String> {
    self.valid_until.as_ref()
  }

  pub fn reset_valid_until(&mut self) {
    self.valid_until = None;
  }

  pub fn set__type(&mut self, _type: i32) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: i32) -> DestinyAdvancedAwaAuthorizationResult {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&i32> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_membership_type(&mut self, membership_type: i32) {
    self.membership_type = Some(membership_type);
  }

  pub fn with_membership_type(mut self, membership_type: i32) -> DestinyAdvancedAwaAuthorizationResult {
    self.membership_type = Some(membership_type);
    self
  }

  pub fn membership_type(&self) -> Option<&i32> {
    self.membership_type.as_ref()
  }

  pub fn reset_membership_type(&mut self) {
    self.membership_type = None;
  }

}



