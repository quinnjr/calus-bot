/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsItemsDestinyEnergyCapacityEntry : Items can have Energy Capacity, and plugs can provide that capacity such as on a piece of Armor in Armor 2.0. This is how much \"Energy\" can be spent on activating plugs for this item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsItemsDestinyEnergyCapacityEntry {
  /// How much energy capacity this plug provides.
  #[serde(rename = "capacityValue")]
  capacity_value: Option<i32>,
  /// Energy provided by a plug is always of a specific type - this is the hash identifier for the energy type for which it provides Capacity.
  #[serde(rename = "energyTypeHash")]
  energy_type_hash: Option<i32>,
  /// The Energy Type for this energy capacity, in enum form for easy use.
  #[serde(rename = "energyType")]
  energy_type: Option<i32>
}

impl DestinyDefinitionsItemsDestinyEnergyCapacityEntry {
  /// Items can have Energy Capacity, and plugs can provide that capacity such as on a piece of Armor in Armor 2.0. This is how much \"Energy\" can be spent on activating plugs for this item.
  pub fn new() -> DestinyDefinitionsItemsDestinyEnergyCapacityEntry {
    DestinyDefinitionsItemsDestinyEnergyCapacityEntry {
      capacity_value: None,
      energy_type_hash: None,
      energy_type: None
    }
  }

  pub fn set_capacity_value(&mut self, capacity_value: i32) {
    self.capacity_value = Some(capacity_value);
  }

  pub fn with_capacity_value(mut self, capacity_value: i32) -> DestinyDefinitionsItemsDestinyEnergyCapacityEntry {
    self.capacity_value = Some(capacity_value);
    self
  }

  pub fn capacity_value(&self) -> Option<&i32> {
    self.capacity_value.as_ref()
  }

  pub fn reset_capacity_value(&mut self) {
    self.capacity_value = None;
  }

  pub fn set_energy_type_hash(&mut self, energy_type_hash: i32) {
    self.energy_type_hash = Some(energy_type_hash);
  }

  pub fn with_energy_type_hash(mut self, energy_type_hash: i32) -> DestinyDefinitionsItemsDestinyEnergyCapacityEntry {
    self.energy_type_hash = Some(energy_type_hash);
    self
  }

  pub fn energy_type_hash(&self) -> Option<&i32> {
    self.energy_type_hash.as_ref()
  }

  pub fn reset_energy_type_hash(&mut self) {
    self.energy_type_hash = None;
  }

  pub fn set_energy_type(&mut self, energy_type: i32) {
    self.energy_type = Some(energy_type);
  }

  pub fn with_energy_type(mut self, energy_type: i32) -> DestinyDefinitionsItemsDestinyEnergyCapacityEntry {
    self.energy_type = Some(energy_type);
    self
  }

  pub fn energy_type(&self) -> Option<&i32> {
    self.energy_type.as_ref()
  }

  pub fn reset_energy_type(&mut self) {
    self.energy_type = None;
  }

}



