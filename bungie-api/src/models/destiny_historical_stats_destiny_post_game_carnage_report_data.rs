/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyPostGameCarnageReportData {
  /// Date and time for the activity.
  #[serde(rename = "period")]
  period: Option<String>,
  /// If this activity has \"phases\", this is the phase at which the activity was started.
  #[serde(rename = "startingPhaseIndex")]
  starting_phase_index: Option<i32>,
  /// Details about the activity.
  #[serde(rename = "activityDetails")]
  activity_details: Option<Value>,
  /// Collection of players and their data for this activity.
  #[serde(rename = "entries")]
  entries: Option<Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportEntry>>,
  /// Collection of stats for the player in this activity.
  #[serde(rename = "teams")]
  teams: Option<Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry>>
}

impl DestinyHistoricalStatsDestinyPostGameCarnageReportData {
  pub fn new() -> DestinyHistoricalStatsDestinyPostGameCarnageReportData {
    DestinyHistoricalStatsDestinyPostGameCarnageReportData {
      period: None,
      starting_phase_index: None,
      activity_details: None,
      entries: None,
      teams: None
    }
  }

  pub fn set_period(&mut self, period: String) {
    self.period = Some(period);
  }

  pub fn with_period(mut self, period: String) -> DestinyHistoricalStatsDestinyPostGameCarnageReportData {
    self.period = Some(period);
    self
  }

  pub fn period(&self) -> Option<&String> {
    self.period.as_ref()
  }

  pub fn reset_period(&mut self) {
    self.period = None;
  }

  pub fn set_starting_phase_index(&mut self, starting_phase_index: i32) {
    self.starting_phase_index = Some(starting_phase_index);
  }

  pub fn with_starting_phase_index(mut self, starting_phase_index: i32) -> DestinyHistoricalStatsDestinyPostGameCarnageReportData {
    self.starting_phase_index = Some(starting_phase_index);
    self
  }

  pub fn starting_phase_index(&self) -> Option<&i32> {
    self.starting_phase_index.as_ref()
  }

  pub fn reset_starting_phase_index(&mut self) {
    self.starting_phase_index = None;
  }

  pub fn set_activity_details(&mut self, activity_details: Value) {
    self.activity_details = Some(activity_details);
  }

  pub fn with_activity_details(mut self, activity_details: Value) -> DestinyHistoricalStatsDestinyPostGameCarnageReportData {
    self.activity_details = Some(activity_details);
    self
  }

  pub fn activity_details(&self) -> Option<&Value> {
    self.activity_details.as_ref()
  }

  pub fn reset_activity_details(&mut self) {
    self.activity_details = None;
  }

  pub fn set_entries(&mut self, entries: Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportEntry>) {
    self.entries = Some(entries);
  }

  pub fn with_entries(mut self, entries: Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportEntry>) -> DestinyHistoricalStatsDestinyPostGameCarnageReportData {
    self.entries = Some(entries);
    self
  }

  pub fn entries(&self) -> Option<&Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportEntry>> {
    self.entries.as_ref()
  }

  pub fn reset_entries(&mut self) {
    self.entries = None;
  }

  pub fn set_teams(&mut self, teams: Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry>) {
    self.teams = Some(teams);
  }

  pub fn with_teams(mut self, teams: Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry>) -> DestinyHistoricalStatsDestinyPostGameCarnageReportData {
    self.teams = Some(teams);
    self
  }

  pub fn teams(&self) -> Option<&Vec<::models::DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry>> {
    self.teams.as_ref()
  }

  pub fn reset_teams(&mut self) {
    self.teams = None;
  }

}



