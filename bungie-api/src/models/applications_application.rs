/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationsApplication {
  #[serde(rename = "applicationType")]
  application_type: Option<i32>,
  /// Unique ID assigned to the application
  #[serde(rename = "applicationId")]
  application_id: Option<i32>,
  /// Name of the application
  #[serde(rename = "name")]
  name: Option<String>,
  /// URL used to pass the user's authorization code to the application
  #[serde(rename = "redirectUrl")]
  redirect_url: Option<String>,
  /// Link to website for the application where a user can learn more about the app.
  #[serde(rename = "link")]
  link: Option<String>,
  /// Permissions the application needs to work
  #[serde(rename = "scope")]
  scope: Option<i64>,
  /// Value of the Origin header sent in requests generated by this application.
  #[serde(rename = "origin")]
  origin: Option<String>,
  /// Current status of the application.
  #[serde(rename = "status")]
  status: Option<i32>,
  /// Date the application was first added to our database.
  #[serde(rename = "creationDate")]
  creation_date: Option<String>,
  /// Date the application status last changed.
  #[serde(rename = "statusChanged")]
  status_changed: Option<String>,
  /// Date the first time the application status entered the 'Public' status.
  #[serde(rename = "firstPublished")]
  first_published: Option<String>,
  /// List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.
  #[serde(rename = "team")]
  team: Option<Vec<::models::ApplicationsApplicationDeveloper>>
}

impl ApplicationsApplication {
  pub fn new() -> ApplicationsApplication {
    ApplicationsApplication {
      application_type: None,
      application_id: None,
      name: None,
      redirect_url: None,
      link: None,
      scope: None,
      origin: None,
      status: None,
      creation_date: None,
      status_changed: None,
      first_published: None,
      team: None
    }
  }

  pub fn set_application_type(&mut self, application_type: i32) {
    self.application_type = Some(application_type);
  }

  pub fn with_application_type(mut self, application_type: i32) -> ApplicationsApplication {
    self.application_type = Some(application_type);
    self
  }

  pub fn application_type(&self) -> Option<&i32> {
    self.application_type.as_ref()
  }

  pub fn reset_application_type(&mut self) {
    self.application_type = None;
  }

  pub fn set_application_id(&mut self, application_id: i32) {
    self.application_id = Some(application_id);
  }

  pub fn with_application_id(mut self, application_id: i32) -> ApplicationsApplication {
    self.application_id = Some(application_id);
    self
  }

  pub fn application_id(&self) -> Option<&i32> {
    self.application_id.as_ref()
  }

  pub fn reset_application_id(&mut self) {
    self.application_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ApplicationsApplication {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_redirect_url(&mut self, redirect_url: String) {
    self.redirect_url = Some(redirect_url);
  }

  pub fn with_redirect_url(mut self, redirect_url: String) -> ApplicationsApplication {
    self.redirect_url = Some(redirect_url);
    self
  }

  pub fn redirect_url(&self) -> Option<&String> {
    self.redirect_url.as_ref()
  }

  pub fn reset_redirect_url(&mut self) {
    self.redirect_url = None;
  }

  pub fn set_link(&mut self, link: String) {
    self.link = Some(link);
  }

  pub fn with_link(mut self, link: String) -> ApplicationsApplication {
    self.link = Some(link);
    self
  }

  pub fn link(&self) -> Option<&String> {
    self.link.as_ref()
  }

  pub fn reset_link(&mut self) {
    self.link = None;
  }

  pub fn set_scope(&mut self, scope: i64) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: i64) -> ApplicationsApplication {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&i64> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

  pub fn set_origin(&mut self, origin: String) {
    self.origin = Some(origin);
  }

  pub fn with_origin(mut self, origin: String) -> ApplicationsApplication {
    self.origin = Some(origin);
    self
  }

  pub fn origin(&self) -> Option<&String> {
    self.origin.as_ref()
  }

  pub fn reset_origin(&mut self) {
    self.origin = None;
  }

  pub fn set_status(&mut self, status: i32) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: i32) -> ApplicationsApplication {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&i32> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_creation_date(&mut self, creation_date: String) {
    self.creation_date = Some(creation_date);
  }

  pub fn with_creation_date(mut self, creation_date: String) -> ApplicationsApplication {
    self.creation_date = Some(creation_date);
    self
  }

  pub fn creation_date(&self) -> Option<&String> {
    self.creation_date.as_ref()
  }

  pub fn reset_creation_date(&mut self) {
    self.creation_date = None;
  }

  pub fn set_status_changed(&mut self, status_changed: String) {
    self.status_changed = Some(status_changed);
  }

  pub fn with_status_changed(mut self, status_changed: String) -> ApplicationsApplication {
    self.status_changed = Some(status_changed);
    self
  }

  pub fn status_changed(&self) -> Option<&String> {
    self.status_changed.as_ref()
  }

  pub fn reset_status_changed(&mut self) {
    self.status_changed = None;
  }

  pub fn set_first_published(&mut self, first_published: String) {
    self.first_published = Some(first_published);
  }

  pub fn with_first_published(mut self, first_published: String) -> ApplicationsApplication {
    self.first_published = Some(first_published);
    self
  }

  pub fn first_published(&self) -> Option<&String> {
    self.first_published.as_ref()
  }

  pub fn reset_first_published(&mut self) {
    self.first_published = None;
  }

  pub fn set_team(&mut self, team: Vec<::models::ApplicationsApplicationDeveloper>) {
    self.team = Some(team);
  }

  pub fn with_team(mut self, team: Vec<::models::ApplicationsApplicationDeveloper>) -> ApplicationsApplication {
    self.team = Some(team);
    self
  }

  pub fn team(&self) -> Option<&Vec<::models::ApplicationsApplicationDeveloper>> {
    self.team.as_ref()
  }

  pub fn reset_team(&mut self) {
    self.team = None;
  }

}



