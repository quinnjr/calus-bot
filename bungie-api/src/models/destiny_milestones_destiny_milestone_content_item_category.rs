/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyMilestonesDestinyMilestoneContentItemCategory : Part of our dynamic, localized Milestone content is arbitrary categories of items. These are built in our content management system, and thus aren't the same as programmatically generated rewards.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyMilestoneContentItemCategory {
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "itemHashes")]
  item_hashes: Option<Vec<i32>>
}

impl DestinyMilestonesDestinyMilestoneContentItemCategory {
  /// Part of our dynamic, localized Milestone content is arbitrary categories of items. These are built in our content management system, and thus aren't the same as programmatically generated rewards.
  pub fn new() -> DestinyMilestonesDestinyMilestoneContentItemCategory {
    DestinyMilestonesDestinyMilestoneContentItemCategory {
      title: None,
      item_hashes: None
    }
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> DestinyMilestonesDestinyMilestoneContentItemCategory {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_item_hashes(&mut self, item_hashes: Vec<i32>) {
    self.item_hashes = Some(item_hashes);
  }

  pub fn with_item_hashes(mut self, item_hashes: Vec<i32>) -> DestinyMilestonesDestinyMilestoneContentItemCategory {
    self.item_hashes = Some(item_hashes);
    self
  }

  pub fn item_hashes(&self) -> Option<&Vec<i32>> {
    self.item_hashes.as_ref()
  }

  pub fn reset_item_hashes(&mut self) {
    self.item_hashes = None;
  }

}



