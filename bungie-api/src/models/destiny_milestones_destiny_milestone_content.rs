/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyMilestonesDestinyMilestoneContent : Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyMilestoneContent {
  /// The \"About this Milestone\" text from the Firehose.
  #[serde(rename = "about")]
  about: Option<String>,
  /// The Current Status of the Milestone, as driven by the Firehose.
  #[serde(rename = "status")]
  status: Option<String>,
  /// A list of tips, provided by the Firehose.
  #[serde(rename = "tips")]
  tips: Option<Vec<String>>,
  /// If DPS has defined items related to this Milestone, they can categorize those items in the Firehose. That data will then be returned as item categories here.
  #[serde(rename = "itemCategories")]
  item_categories: Option<Vec<::models::DestinyMilestonesDestinyMilestoneContentItemCategory>>
}

impl DestinyMilestonesDestinyMilestoneContent {
  /// Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint.
  pub fn new() -> DestinyMilestonesDestinyMilestoneContent {
    DestinyMilestonesDestinyMilestoneContent {
      about: None,
      status: None,
      tips: None,
      item_categories: None
    }
  }

  pub fn set_about(&mut self, about: String) {
    self.about = Some(about);
  }

  pub fn with_about(mut self, about: String) -> DestinyMilestonesDestinyMilestoneContent {
    self.about = Some(about);
    self
  }

  pub fn about(&self) -> Option<&String> {
    self.about.as_ref()
  }

  pub fn reset_about(&mut self) {
    self.about = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> DestinyMilestonesDestinyMilestoneContent {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_tips(&mut self, tips: Vec<String>) {
    self.tips = Some(tips);
  }

  pub fn with_tips(mut self, tips: Vec<String>) -> DestinyMilestonesDestinyMilestoneContent {
    self.tips = Some(tips);
    self
  }

  pub fn tips(&self) -> Option<&Vec<String>> {
    self.tips.as_ref()
  }

  pub fn reset_tips(&mut self) {
    self.tips = None;
  }

  pub fn set_item_categories(&mut self, item_categories: Vec<::models::DestinyMilestonesDestinyMilestoneContentItemCategory>) {
    self.item_categories = Some(item_categories);
  }

  pub fn with_item_categories(mut self, item_categories: Vec<::models::DestinyMilestonesDestinyMilestoneContentItemCategory>) -> DestinyMilestonesDestinyMilestoneContent {
    self.item_categories = Some(item_categories);
    self
  }

  pub fn item_categories(&self) -> Option<&Vec<::models::DestinyMilestonesDestinyMilestoneContentItemCategory>> {
    self.item_categories.as_ref()
  }

  pub fn reset_item_categories(&mut self) {
    self.item_categories = None;
  }

}



