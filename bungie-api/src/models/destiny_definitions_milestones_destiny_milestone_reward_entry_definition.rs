/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition : The definition of a specific reward, which may be contained in a category of rewards and that has optional information about how it is obtained.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
  /// The identifier for this reward entry. Runtime data will refer to reward entries by this hash. Only guaranteed unique within the specific Milestone.
  #[serde(rename = "rewardEntryHash")]
  reward_entry_hash: Option<i32>,
  /// The string identifier, if you care about it. Only guaranteed unique within the specific Milestone.
  #[serde(rename = "rewardEntryIdentifier")]
  reward_entry_identifier: Option<String>,
  /// The items you will get as rewards, and how much of it you'll get.
  #[serde(rename = "items")]
  items: Option<Vec<::models::DestinyDestinyItemQuantity>>,
  /// If this reward is redeemed at a Vendor, this is the hash of the Vendor to go to in order to redeem the reward. Use this hash to look up the DestinyVendorDefinition.
  #[serde(rename = "vendorHash")]
  vendor_hash: Option<i32>,
  /// For us to bother returning this info, we should be able to return some kind of information about why these rewards are grouped together. This is ideally that information. Look at how confident I am that this will always remain true.
  #[serde(rename = "displayProperties")]
  display_properties: Option<Value>,
  /// If you want to follow BNet's ordering of these rewards, use this number within a given category to order the rewards. Yeah, I know. I feel dirty too.
  #[serde(rename = "order")]
  order: Option<i32>
}

impl DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
  /// The definition of a specific reward, which may be contained in a category of rewards and that has optional information about how it is obtained.
  pub fn new() -> DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
    DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
      reward_entry_hash: None,
      reward_entry_identifier: None,
      items: None,
      vendor_hash: None,
      display_properties: None,
      order: None
    }
  }

  pub fn set_reward_entry_hash(&mut self, reward_entry_hash: i32) {
    self.reward_entry_hash = Some(reward_entry_hash);
  }

  pub fn with_reward_entry_hash(mut self, reward_entry_hash: i32) -> DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
    self.reward_entry_hash = Some(reward_entry_hash);
    self
  }

  pub fn reward_entry_hash(&self) -> Option<&i32> {
    self.reward_entry_hash.as_ref()
  }

  pub fn reset_reward_entry_hash(&mut self) {
    self.reward_entry_hash = None;
  }

  pub fn set_reward_entry_identifier(&mut self, reward_entry_identifier: String) {
    self.reward_entry_identifier = Some(reward_entry_identifier);
  }

  pub fn with_reward_entry_identifier(mut self, reward_entry_identifier: String) -> DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
    self.reward_entry_identifier = Some(reward_entry_identifier);
    self
  }

  pub fn reward_entry_identifier(&self) -> Option<&String> {
    self.reward_entry_identifier.as_ref()
  }

  pub fn reset_reward_entry_identifier(&mut self) {
    self.reward_entry_identifier = None;
  }

  pub fn set_items(&mut self, items: Vec<::models::DestinyDestinyItemQuantity>) {
    self.items = Some(items);
  }

  pub fn with_items(mut self, items: Vec<::models::DestinyDestinyItemQuantity>) -> DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
    self.items = Some(items);
    self
  }

  pub fn items(&self) -> Option<&Vec<::models::DestinyDestinyItemQuantity>> {
    self.items.as_ref()
  }

  pub fn reset_items(&mut self) {
    self.items = None;
  }

  pub fn set_vendor_hash(&mut self, vendor_hash: i32) {
    self.vendor_hash = Some(vendor_hash);
  }

  pub fn with_vendor_hash(mut self, vendor_hash: i32) -> DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
    self.vendor_hash = Some(vendor_hash);
    self
  }

  pub fn vendor_hash(&self) -> Option<&i32> {
    self.vendor_hash.as_ref()
  }

  pub fn reset_vendor_hash(&mut self) {
    self.vendor_hash = None;
  }

  pub fn set_display_properties(&mut self, display_properties: Value) {
    self.display_properties = Some(display_properties);
  }

  pub fn with_display_properties(mut self, display_properties: Value) -> DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
    self.display_properties = Some(display_properties);
    self
  }

  pub fn display_properties(&self) -> Option<&Value> {
    self.display_properties.as_ref()
  }

  pub fn reset_display_properties(&mut self) {
    self.display_properties = None;
  }

  pub fn set_order(&mut self, order: i32) {
    self.order = Some(order);
  }

  pub fn with_order(mut self, order: i32) -> DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition {
    self.order = Some(order);
    self
  }

  pub fn order(&self) -> Option<&i32> {
    self.order.as_ref()
  }

  pub fn reset_order(&mut self) {
    self.order = None;
  }

}



