/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GroupsV2GroupV2Card : A small infocard of group information, usually used for when a list of groups are returned

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupV2Card {
  #[serde(rename = "groupId")]
  group_id: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "groupType")]
  group_type: Option<i32>,
  #[serde(rename = "creationDate")]
  creation_date: Option<String>,
  #[serde(rename = "about")]
  about: Option<String>,
  #[serde(rename = "motto")]
  motto: Option<String>,
  #[serde(rename = "memberCount")]
  member_count: Option<i32>,
  #[serde(rename = "locale")]
  locale: Option<String>,
  #[serde(rename = "membershipOption")]
  membership_option: Option<i32>,
  #[serde(rename = "capabilities")]
  capabilities: Option<i32>,
  #[serde(rename = "clanInfo")]
  clan_info: Option<::models::GroupsV2GroupV2ClanInfo>,
  #[serde(rename = "avatarPath")]
  avatar_path: Option<String>,
  #[serde(rename = "theme")]
  theme: Option<String>
}

impl GroupsV2GroupV2Card {
  /// A small infocard of group information, usually used for when a list of groups are returned
  pub fn new() -> GroupsV2GroupV2Card {
    GroupsV2GroupV2Card {
      group_id: None,
      name: None,
      group_type: None,
      creation_date: None,
      about: None,
      motto: None,
      member_count: None,
      locale: None,
      membership_option: None,
      capabilities: None,
      clan_info: None,
      avatar_path: None,
      theme: None
    }
  }

  pub fn set_group_id(&mut self, group_id: i64) {
    self.group_id = Some(group_id);
  }

  pub fn with_group_id(mut self, group_id: i64) -> GroupsV2GroupV2Card {
    self.group_id = Some(group_id);
    self
  }

  pub fn group_id(&self) -> Option<&i64> {
    self.group_id.as_ref()
  }

  pub fn reset_group_id(&mut self) {
    self.group_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GroupsV2GroupV2Card {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_group_type(&mut self, group_type: i32) {
    self.group_type = Some(group_type);
  }

  pub fn with_group_type(mut self, group_type: i32) -> GroupsV2GroupV2Card {
    self.group_type = Some(group_type);
    self
  }

  pub fn group_type(&self) -> Option<&i32> {
    self.group_type.as_ref()
  }

  pub fn reset_group_type(&mut self) {
    self.group_type = None;
  }

  pub fn set_creation_date(&mut self, creation_date: String) {
    self.creation_date = Some(creation_date);
  }

  pub fn with_creation_date(mut self, creation_date: String) -> GroupsV2GroupV2Card {
    self.creation_date = Some(creation_date);
    self
  }

  pub fn creation_date(&self) -> Option<&String> {
    self.creation_date.as_ref()
  }

  pub fn reset_creation_date(&mut self) {
    self.creation_date = None;
  }

  pub fn set_about(&mut self, about: String) {
    self.about = Some(about);
  }

  pub fn with_about(mut self, about: String) -> GroupsV2GroupV2Card {
    self.about = Some(about);
    self
  }

  pub fn about(&self) -> Option<&String> {
    self.about.as_ref()
  }

  pub fn reset_about(&mut self) {
    self.about = None;
  }

  pub fn set_motto(&mut self, motto: String) {
    self.motto = Some(motto);
  }

  pub fn with_motto(mut self, motto: String) -> GroupsV2GroupV2Card {
    self.motto = Some(motto);
    self
  }

  pub fn motto(&self) -> Option<&String> {
    self.motto.as_ref()
  }

  pub fn reset_motto(&mut self) {
    self.motto = None;
  }

  pub fn set_member_count(&mut self, member_count: i32) {
    self.member_count = Some(member_count);
  }

  pub fn with_member_count(mut self, member_count: i32) -> GroupsV2GroupV2Card {
    self.member_count = Some(member_count);
    self
  }

  pub fn member_count(&self) -> Option<&i32> {
    self.member_count.as_ref()
  }

  pub fn reset_member_count(&mut self) {
    self.member_count = None;
  }

  pub fn set_locale(&mut self, locale: String) {
    self.locale = Some(locale);
  }

  pub fn with_locale(mut self, locale: String) -> GroupsV2GroupV2Card {
    self.locale = Some(locale);
    self
  }

  pub fn locale(&self) -> Option<&String> {
    self.locale.as_ref()
  }

  pub fn reset_locale(&mut self) {
    self.locale = None;
  }

  pub fn set_membership_option(&mut self, membership_option: i32) {
    self.membership_option = Some(membership_option);
  }

  pub fn with_membership_option(mut self, membership_option: i32) -> GroupsV2GroupV2Card {
    self.membership_option = Some(membership_option);
    self
  }

  pub fn membership_option(&self) -> Option<&i32> {
    self.membership_option.as_ref()
  }

  pub fn reset_membership_option(&mut self) {
    self.membership_option = None;
  }

  pub fn set_capabilities(&mut self, capabilities: i32) {
    self.capabilities = Some(capabilities);
  }

  pub fn with_capabilities(mut self, capabilities: i32) -> GroupsV2GroupV2Card {
    self.capabilities = Some(capabilities);
    self
  }

  pub fn capabilities(&self) -> Option<&i32> {
    self.capabilities.as_ref()
  }

  pub fn reset_capabilities(&mut self) {
    self.capabilities = None;
  }

  pub fn set_clan_info(&mut self, clan_info: ::models::GroupsV2GroupV2ClanInfo) {
    self.clan_info = Some(clan_info);
  }

  pub fn with_clan_info(mut self, clan_info: ::models::GroupsV2GroupV2ClanInfo) -> GroupsV2GroupV2Card {
    self.clan_info = Some(clan_info);
    self
  }

  pub fn clan_info(&self) -> Option<&::models::GroupsV2GroupV2ClanInfo> {
    self.clan_info.as_ref()
  }

  pub fn reset_clan_info(&mut self) {
    self.clan_info = None;
  }

  pub fn set_avatar_path(&mut self, avatar_path: String) {
    self.avatar_path = Some(avatar_path);
  }

  pub fn with_avatar_path(mut self, avatar_path: String) -> GroupsV2GroupV2Card {
    self.avatar_path = Some(avatar_path);
    self
  }

  pub fn avatar_path(&self) -> Option<&String> {
    self.avatar_path.as_ref()
  }

  pub fn reset_avatar_path(&mut self) {
    self.avatar_path = None;
  }

  pub fn set_theme(&mut self, theme: String) {
    self.theme = Some(theme);
  }

  pub fn with_theme(mut self, theme: String) -> GroupsV2GroupV2Card {
    self.theme = Some(theme);
    self
  }

  pub fn theme(&self) -> Option<&String> {
    self.theme.as_ref()
  }

  pub fn reset_theme(&mut self) {
    self.theme = None;
  }

}



