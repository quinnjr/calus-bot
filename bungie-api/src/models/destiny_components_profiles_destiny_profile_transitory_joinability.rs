/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyComponentsProfilesDestinyProfileTransitoryJoinability : Some basic information about whether you can be joined, how many slots are left etc. Note that this can change quickly, so it may not actually be useful. But perhaps it will be in some use cases?

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyComponentsProfilesDestinyProfileTransitoryJoinability {
  /// The number of slots still available on this person's fireteam.
  #[serde(rename = "openSlots")]
  open_slots: Option<i32>,
  /// Who the person is currently allowing invites from.
  #[serde(rename = "privacySetting")]
  privacy_setting: Option<i32>,
  /// Reasons why a person can't join this person's fireteam.
  #[serde(rename = "closedReasons")]
  closed_reasons: Option<i32>
}

impl DestinyComponentsProfilesDestinyProfileTransitoryJoinability {
  /// Some basic information about whether you can be joined, how many slots are left etc. Note that this can change quickly, so it may not actually be useful. But perhaps it will be in some use cases?
  pub fn new() -> DestinyComponentsProfilesDestinyProfileTransitoryJoinability {
    DestinyComponentsProfilesDestinyProfileTransitoryJoinability {
      open_slots: None,
      privacy_setting: None,
      closed_reasons: None
    }
  }

  pub fn set_open_slots(&mut self, open_slots: i32) {
    self.open_slots = Some(open_slots);
  }

  pub fn with_open_slots(mut self, open_slots: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryJoinability {
    self.open_slots = Some(open_slots);
    self
  }

  pub fn open_slots(&self) -> Option<&i32> {
    self.open_slots.as_ref()
  }

  pub fn reset_open_slots(&mut self) {
    self.open_slots = None;
  }

  pub fn set_privacy_setting(&mut self, privacy_setting: i32) {
    self.privacy_setting = Some(privacy_setting);
  }

  pub fn with_privacy_setting(mut self, privacy_setting: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryJoinability {
    self.privacy_setting = Some(privacy_setting);
    self
  }

  pub fn privacy_setting(&self) -> Option<&i32> {
    self.privacy_setting.as_ref()
  }

  pub fn reset_privacy_setting(&mut self) {
    self.privacy_setting = None;
  }

  pub fn set_closed_reasons(&mut self, closed_reasons: i32) {
    self.closed_reasons = Some(closed_reasons);
  }

  pub fn with_closed_reasons(mut self, closed_reasons: i32) -> DestinyComponentsProfilesDestinyProfileTransitoryJoinability {
    self.closed_reasons = Some(closed_reasons);
    self
  }

  pub fn closed_reasons(&self) -> Option<&i32> {
    self.closed_reasons.as_ref()
  }

  pub fn reset_closed_reasons(&mut self) {
    self.closed_reasons = None;
  }

}



