/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDestinyStat : Represents a stat on an item *or* Character (NOT a Historical Stat, but a physical attribute stat like Attack, Defense etc...)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDestinyStat {
  /// The hash identifier for the Stat. Use it to look up the DestinyStatDefinition for static data about the stat.
  #[serde(rename = "statHash")]
  stat_hash: Option<i32>,
  /// The current value of the Stat.
  #[serde(rename = "value")]
  value: Option<i32>
}

impl DestinyDestinyStat {
  /// Represents a stat on an item *or* Character (NOT a Historical Stat, but a physical attribute stat like Attack, Defense etc...)
  pub fn new() -> DestinyDestinyStat {
    DestinyDestinyStat {
      stat_hash: None,
      value: None
    }
  }

  pub fn set_stat_hash(&mut self, stat_hash: i32) {
    self.stat_hash = Some(stat_hash);
  }

  pub fn with_stat_hash(mut self, stat_hash: i32) -> DestinyDestinyStat {
    self.stat_hash = Some(stat_hash);
    self
  }

  pub fn stat_hash(&self) -> Option<&i32> {
    self.stat_hash.as_ref()
  }

  pub fn reset_stat_hash(&mut self) {
    self.stat_hash = None;
  }

  pub fn set_value(&mut self, value: i32) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: i32) -> DestinyDestinyStat {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&i32> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



