/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrendingTrendingEntryDestinyRitual {
  #[serde(rename = "image")]
  image: Option<String>,
  #[serde(rename = "icon")]
  icon: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "subtitle")]
  subtitle: Option<String>,
  #[serde(rename = "dateStart")]
  date_start: Option<String>,
  #[serde(rename = "dateEnd")]
  date_end: Option<String>,
  /// A destiny event does not necessarily have a related Milestone, but if it does the details will be returned here.
  #[serde(rename = "milestoneDetails")]
  milestone_details: Option<Value>,
  /// A destiny event will not necessarily have milestone \"custom content\", but if it does the details will be here.
  #[serde(rename = "eventContent")]
  event_content: Option<Value>
}

impl TrendingTrendingEntryDestinyRitual {
  pub fn new() -> TrendingTrendingEntryDestinyRitual {
    TrendingTrendingEntryDestinyRitual {
      image: None,
      icon: None,
      title: None,
      subtitle: None,
      date_start: None,
      date_end: None,
      milestone_details: None,
      event_content: None
    }
  }

  pub fn set_image(&mut self, image: String) {
    self.image = Some(image);
  }

  pub fn with_image(mut self, image: String) -> TrendingTrendingEntryDestinyRitual {
    self.image = Some(image);
    self
  }

  pub fn image(&self) -> Option<&String> {
    self.image.as_ref()
  }

  pub fn reset_image(&mut self) {
    self.image = None;
  }

  pub fn set_icon(&mut self, icon: String) {
    self.icon = Some(icon);
  }

  pub fn with_icon(mut self, icon: String) -> TrendingTrendingEntryDestinyRitual {
    self.icon = Some(icon);
    self
  }

  pub fn icon(&self) -> Option<&String> {
    self.icon.as_ref()
  }

  pub fn reset_icon(&mut self) {
    self.icon = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> TrendingTrendingEntryDestinyRitual {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_subtitle(&mut self, subtitle: String) {
    self.subtitle = Some(subtitle);
  }

  pub fn with_subtitle(mut self, subtitle: String) -> TrendingTrendingEntryDestinyRitual {
    self.subtitle = Some(subtitle);
    self
  }

  pub fn subtitle(&self) -> Option<&String> {
    self.subtitle.as_ref()
  }

  pub fn reset_subtitle(&mut self) {
    self.subtitle = None;
  }

  pub fn set_date_start(&mut self, date_start: String) {
    self.date_start = Some(date_start);
  }

  pub fn with_date_start(mut self, date_start: String) -> TrendingTrendingEntryDestinyRitual {
    self.date_start = Some(date_start);
    self
  }

  pub fn date_start(&self) -> Option<&String> {
    self.date_start.as_ref()
  }

  pub fn reset_date_start(&mut self) {
    self.date_start = None;
  }

  pub fn set_date_end(&mut self, date_end: String) {
    self.date_end = Some(date_end);
  }

  pub fn with_date_end(mut self, date_end: String) -> TrendingTrendingEntryDestinyRitual {
    self.date_end = Some(date_end);
    self
  }

  pub fn date_end(&self) -> Option<&String> {
    self.date_end.as_ref()
  }

  pub fn reset_date_end(&mut self) {
    self.date_end = None;
  }

  pub fn set_milestone_details(&mut self, milestone_details: Value) {
    self.milestone_details = Some(milestone_details);
  }

  pub fn with_milestone_details(mut self, milestone_details: Value) -> TrendingTrendingEntryDestinyRitual {
    self.milestone_details = Some(milestone_details);
    self
  }

  pub fn milestone_details(&self) -> Option<&Value> {
    self.milestone_details.as_ref()
  }

  pub fn reset_milestone_details(&mut self) {
    self.milestone_details = None;
  }

  pub fn set_event_content(&mut self, event_content: Value) {
    self.event_content = Some(event_content);
  }

  pub fn with_event_content(mut self, event_content: Value) -> TrendingTrendingEntryDestinyRitual {
    self.event_content = Some(event_content);
    self
  }

  pub fn event_content(&self) -> Option<&Value> {
    self.event_content.as_ref()
  }

  pub fn reset_event_content(&mut self) {
    self.event_content = None;
  }

}



