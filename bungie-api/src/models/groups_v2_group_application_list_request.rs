/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupApplicationListRequest {
  #[serde(rename = "memberships")]
  memberships: Option<Vec<::models::UserUserMembership>>,
  #[serde(rename = "message")]
  message: Option<String>
}

impl GroupsV2GroupApplicationListRequest {
  pub fn new() -> GroupsV2GroupApplicationListRequest {
    GroupsV2GroupApplicationListRequest {
      memberships: None,
      message: None
    }
  }

  pub fn set_memberships(&mut self, memberships: Vec<::models::UserUserMembership>) {
    self.memberships = Some(memberships);
  }

  pub fn with_memberships(mut self, memberships: Vec<::models::UserUserMembership>) -> GroupsV2GroupApplicationListRequest {
    self.memberships = Some(memberships);
    self
  }

  pub fn memberships(&self) -> Option<&Vec<::models::UserUserMembership>> {
    self.memberships.as_ref()
  }

  pub fn reset_memberships(&mut self) {
    self.memberships = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> GroupsV2GroupApplicationListRequest {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

}



