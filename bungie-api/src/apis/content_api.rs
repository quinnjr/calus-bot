/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.7.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct ContentApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ContentApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ContentApiClient<C> {
        ContentApiClient {
            configuration: configuration,
        }
    }
}

pub trait ContentApi {
    fn content_get_content_by_id(&self, id: i64, locale: &str, head: bool) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error<serde_json::Value>>>;
    fn content_get_content_by_tag_and_type(&self, locale: &str, tag: &str, _type: &str, head: bool) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error<serde_json::Value>>>;
    fn content_get_content_type(&self, _type: &str) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>>;
    fn content_search_content_by_tag_and_type(&self, locale: &str, tag: &str, _type: &str, currentpage: i32, head: bool, itemsperpage: i32) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error<serde_json::Value>>>;
    fn content_search_content_with_text(&self, locale: &str, ctype: &str, currentpage: i32, head: bool, searchtext: &str, source: &str, tag: &str) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error<serde_json::Value>>>;
    fn content_search_help_articles(&self, searchtext: &str, size: &str) -> Box<Future<Item = ::models::InlineResponse20011, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>ContentApi for ContentApiClient<C> {
    fn content_get_content_by_id(&self, id: i64, locale: &str, head: bool) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("head", &head.to_string());
            query.finish()
        };
        let uri_str = format!("{}/Content/GetContentById/{id}/{locale}/?{}", configuration.base_path, query_string, id=id, locale=locale);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2009, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn content_get_content_by_tag_and_type(&self, locale: &str, tag: &str, _type: &str, head: bool) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("head", &head.to_string());
            query.finish()
        };
        let uri_str = format!("{}/Content/GetContentByTagAndType/{tag}/{type}/{locale}/?{}", configuration.base_path, query_string, locale=locale, tag=tag, type=_type);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2009, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn content_get_content_type(&self, _type: &str) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/Content/GetContentType/{type}/?{}", configuration.base_path, query_string, type=_type);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2008, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn content_search_content_by_tag_and_type(&self, locale: &str, tag: &str, _type: &str, currentpage: i32, head: bool, itemsperpage: i32) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("currentpage", &currentpage.to_string());
            query.append_pair("head", &head.to_string());
            query.append_pair("itemsperpage", &itemsperpage.to_string());
            query.finish()
        };
        let uri_str = format!("{}/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/?{}", configuration.base_path, query_string, locale=locale, tag=tag, type=_type);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20010, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn content_search_content_with_text(&self, locale: &str, ctype: &str, currentpage: i32, head: bool, searchtext: &str, source: &str, tag: &str) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("ctype", &ctype.to_string());
            query.append_pair("currentpage", &currentpage.to_string());
            query.append_pair("head", &head.to_string());
            query.append_pair("searchtext", &searchtext.to_string());
            query.append_pair("source", &source.to_string());
            query.append_pair("tag", &tag.to_string());
            query.finish()
        };
        let uri_str = format!("{}/Content/Search/{locale}/?{}", configuration.base_path, query_string, locale=locale);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20010, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn content_search_help_articles(&self, searchtext: &str, size: &str) -> Box<Future<Item = ::models::InlineResponse20011, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/Content/SearchHelpArticles/{searchtext}/{size}/?{}", configuration.base_path, query_string, searchtext=searchtext, size=size);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20011, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
